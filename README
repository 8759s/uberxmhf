Building and Deploying XMHF on the PI3
Author: Amit Vasudevan (amitvasudevan@acm.org)


1. Raspberry pi sd-card image
	a. https://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2016-11-29/2016-11-25-raspbian-jessie-lite.zip
	b. Use win32diskimager under windows to burn contents of .zip
	c. Use ImageWriter tool under ubuntu
	
2. Development system (VM, baremetal or Windows/WSL with Ubuntu 16.04.x) update
	a. Sudo apt-get update
	b. Sudo apt-get install build-essential autoconf autotools-dev
	c. Sudo apt-get install git
	d. Sudo apt-get install bc
	
3. Install rpi tools on development system
	a. git clone https://github.com/raspberrypi/tools
	b. Add ~/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/ to PATH

4. Install and build rpi kernel on development system
	a. git clone https://github.com/raspberrypi/linux.git
	b. cd linux
	c. git checkout rpi-4.4.y
	d. export KERNEL=kernel7
	e. make ARCH=arm CROSS_COMPILE=~/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf- bcm2709_defconfig
	f. make -j 4 ARCH=arm CROSS_COMPILE=~/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf- zImage modules dtbs
	g. mkdir -p ~/uxmhf-rpi3-staging/mod_install
	h. make -j 4 ARCH=arm CROSS_COMPILE=~/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf- INSTALL_MOD_PATH=~/uxmhf-rpi3-staging/mod_install/ modules_install
	i. ./scripts/mkknlimg arch/arm/boot/zImage ~/uxmhf-rpi3-staging/$KERNEL.img
	j. mkdir -p ~/uxmhf-rpi3-staging/overlays
	k. cp ./arch/arm/boot/dts/overlays/*.dtb* ~/uxmhf-rpi3-staging/overlays/.
	l. cp ./arch/arm/boot/dts/overlays/README ~/uxmhf-rpi3-staging/overlays/.
	m. mkdir -p ~/uxmhf-rpi3-staging/boot
	n. cp ./arch/arm/boot/dts/*.dtb ~/uxmhf-rpi3-staging/boot/.

5. Build uxmhf-rpi3 on development system
	a. git clone https://gitlab.com/hypcode/projs/sei-cdra/prototypes/uxmhf-rpi3.git
	b. cd uxmhf-rpi3/uxmhf-rpi3
	c. ./bsconfigure.sh
	d. make clean
	e. make OSKRNLIMG=~/uxmhf-rpi3-staging/kernel7.img
	f. cp uxmhf-rpi3.img ~/uxmhf-rpi3-staging/.
	g. cp rpi3-config.txt ~/uxmhf-rpi3-staging/config.txt

6. Building uhcallkmod on development system
	b. cd rgapps/linux/rgapp-uhcallkmod
	c. ./build.sh ~/linux ~/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/
	d. cp ./uhcallkmod.ko ~/uxmhf-rpi3-staging/.

7. Building uhcalltest on development system
	b. Cd rgapps/linux
	c. Make -w all
	d. cd rgapp-uhcalltest
	e. make -w all
	f. cp ./uhcalltest ~/uxmhf-rpi3-staging/.
	
8. Deploying on sd-card
	a. mkdir -p ~/mnt/pi-boot
	b. mkdir -p ~/mnt/pi-root
	c. sudo mount /dev/mmcblk0p1 ~/mnt/pi-boot
	d. sudo mount /dev/mmcblk0p2 ~/mnt/pi-root
	
	e. sudo cp ~/uxmhf-rpi3-staging/uhcalltest ~/mnt/pi-root/home/pi/.
	f. sudo cp ~/uxmhf-rpi3-staging/uhcallkmod.ko ~/mnt/pi-root/home/pi/.
	g. sudo cp ~/uxmhf-rpi3-staging/uxmhf-rpi3.img ~/mnt/pi-boot/.
	
	h. sudo cp ~/uxmhf-rpi3-staging/cmdline.txt ~/mnt/pi-boot/.
	i. sudo cp ~/uxmhf-rpi3-staging/config.txt ~/mnt/pi-boot/.
	j. append loglevel=8 memblock=debug dwc_otg.fiq_enable=0 dwc_otg.fiq_fsm_enable=0 to ~/mnt/pi-boot/cmdline.txt
	
	k. sudo cp ~/uxmhf-rpi3-staging/boot/* ~/mnt/pi-boot/.
	l. sudo mkdir -p ~/mnt/pi-boot/overlays
	m. sudo cp -R ~/uxmhf-rpi3-staging/overlays/* ~/mnt/pi-boot/overlays/.
	n. sudo cp ~/uxmhf-rpi3-staging/kernel7.img ~/mnt/pi-boot/.
	o. sudo mkdir -p ~/mnt/pi-root/lib/firmware
	p. sudo cp -R ~/uxmhf-rpi3-staging/mod_install/lib/firmware/* ~/mnt/pi-root/lib/firmware/.
	q. sudo mkdir -p ~/mnt/pi-root/lib/modules/4.4.50-v7+
	r. sudo cp -R ~/uxmhf-rpi3-staging/mod_install/lib/modules/4.4.50-v7+/* ~/mnt/pi-root/lib/modules/4.4.50-v7+/.

9. Setup serial debugging
	a. Connect Pin 6 on pi to GND of serial cable; Pin 8 to RX and Pin 10 to TX
	b. edit ~/mnt/pi-boot/config.txt add the following lines
		enable_uart=1
		init_uart_baud=115200
		force_turbo=0

10. Boot up and test
	a. umount ~/mnt/pi-boot
	b. umount ~/mnt/pi-root
	c. Stick sdcard into the pi3
	d. on a seperate terminal do
		sudo ccreen /dev/ttyUSB0 115200 8N1
	e. Power on the pi3
	f. ... and you should see the micro-hypervisor booting up with debug output and the guest starting soon thereafter


