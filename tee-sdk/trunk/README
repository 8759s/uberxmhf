# Overview

This is the Trusted-Execution-Environment Software-Development-Kit
(tee-sdk). It comprises tools and documentation for developing
_services_ that run in a trusted environments, and _clients_ that
communicate with those services. Initially, this means writing PALs
that run under TrustVisor, and applications that use PALs. However,
the APIs provided here are intended to provide sufficient abstraction
such that additional back-ends can be implemented, allowing services
and applications to be ported to use alternative trusted environments
with little or no modification.

# Terminology

Service
  ~ A piece of code running in a trusted execution environment
    provided by a _device_. (e.g., a PAL)
Client
  ~ An application that communicates with one or more _services_.
Device
  ~ A module providing a trusted execution environment (e.g., TrustVisor)

# Files

  * [README](README) This file.
  * [tz](tz) TrustZone API. This library is to be used by _clients_
    to communicate with _services_. This library supports multiple
    _device_ back-ends, abstracting them in such a way that most _client_
    code can be oblivious to which back-end is in use.
  * [ports](ports) Support libraries for _services_. These have been
    ported to run in a trusted environment provided by some _device_.
    i.e., they do not make system calls, and all dependencies should
    be satisfied by other ports, svcapi, or other libraries provided
    as part of this package.
  * [examples](examples) Examples and tests.
  
# Build and installation

You will need to build and install in [tz](tz):

  * cd tz
  * run 'autoreconf -i', unless there's already a configure script
  * ./configure
  * make
  * make install

By default, everything will install into /usr/local. You can of course
change this by passing --prefix=$tzinstallprefix to the configure
script.

# Compiling applications

The previous step installs several libraries. There is a front-end
library for applications (tee-sdk-app), a front-end library for
services (tee-sdk-svc), and for each device there are application and
service back-end libraries (tee-sdk-app-devname and
tee-sdk-svc-devname). 

We use [pkgconfig] to simplify management of these libraries.  The
compile time flags needed to link against a package can be obtained
using `pkg-config --cflags packagename`. The linking flags can be
obtained using `pkg-config --libs --static packagename`. Note that we
only support static linking for now. If you installed [tz](tz) to a
non-standard location $tzinstallprefix, you may need to set
PKG_CONFIG_LIBDIR to include $tzinstallprefix/lib/pkgconfig.

[pkgconfig]: http://pkg-config.freedesktop.org/wiki/

An application using the tee-sdk to communicate with a service running
in a trusted environment must link against at least one application
back-end. It is also permissable to link against multiple back-ends; a
single application can communicate with services running on multiple
devices. 

# Compiling services

Currently, all services must meet the following requirements:

 * The entry point must be in section ".scode". E.g., use

~~~ {.c}
   __attribute__ ((section (".scode")))
~~~

 * All code to be executed as part of the service must be
   in either section ".scode" or ".stext". Code in ".scode"
   is unreadable to the guest operating system, so code that
   should be executable both by a service and an application
   should be put in ".stext".
 * All data accessed by the service must be in section ".sdata".

You must compile and link using exactly one service back-end
package. At the time of this writing, there is only one anyways:
'tee-sdk-svc-tv'. pkgconfig will automatically pull in the service
front-end 'tee-sdk-svc' as a dependency. Using the compile and link
flags from those packages is important not only to link against the
corresponding libraries; they also reference compiler options to
eliminate code-constructs that are unsupported inside services, and
linker options to ensure the necessary layout in the final binary.

# Compiling and running the test example

After installation in [tz](tz), you should be able to compile and run
the test example in [examples/test](examples/test). Remember to set
the PKG_CONFIG_LIBDIR environment variable if you installed to a
non-system directory.

# Loading and unloading services

Services are loaded and unloaded through the TrustZone service manager:

~~~ {.c}
  tz_return_t tzRet;
  tz_device_t tzDevice;
  tz_session_t tzManagerSession;
  tz_uuid_t tzSvcId;

  /* open isolated execution environment device */
  /* Use NULL for default device, or 'tv' to specify trustvisor */
  tzRet = TZDeviceOpen(NULL, NULL, &tzDevice);
  assert(tzRet == TZ_SUCCESS);

  /* prepare service descriptor */
  /* this is currently device-specific (i.e., trustvisor-specific).
     eventually it'd be good to provide a common abstraction here. */
  scode_sections_info_init(&scode_info,
                           &__scode_start, scode_ptr_diff(&__scode_end, &__scode_start),
                           NULL, 0,
                           PAGE_SIZE, PAGE_SIZE);

  /* open session with device manager */
  tzRet = TZManagerOpen(&tzDevice, NULL, &tzManagerSession);
  assert(tzRet == TZ_SUCCESS);

  /* download */
  tzRet = TZManagerDownloadService(&tzManagerSession,
                                   &pal,
                                   sizeof(pal),
                                   &tzSvcId);
  assert(tzRet == TZ_SUCCESS);

  /* do useful work with the service */
  
  /* unload the service. */
  /* This is currently CRITICAL when using TrustVisor. Exiting the
     application without unloading the service will lead to system
     instability. */
  tzRet = TZManagerRemoveService(&tzManagerSession,
                                 &tzSvcId);
  assert(tzRet == TZ_SUCCESS);

  /* close session */
  tzRet = TZManagerClose(&tzManagerSession);
  assert(tzRet == TZ_SUCCESS);
~~~ 

# Calling services

Services are called through the TrustZone API. You must open a session
with a currently-loaded service. A session can be used for multiple
invocations of a service. See the
[TrustZone API specification](tz/TrustZone_API_3.0_Specification.pdf)
for details.

# Developing a service

Unfortunately this area still needs a lot of work. It is currently
very trustvisor-specific and fragile. Everything here is likely to
change significantly.

## Memory Layout

While eventually services will be compiled as standalone binaries,
currently they are compiled together with the application that calls
them. When loading the service, memory pages that contain service code
and data are registered with trustvisor to be measured and protected.
This means that service code and data must be on separate memory
pages from application code and data, and that you must be able to identify
the relevant memory ranges. This is most easily done by putting service
code in separate object files or in separate sections, e.g.


A linker script must then be used to ensure page-alignment, and to
identify the beginning and end of the relevant sections. See
[examples/test/inject.ld] for an example of such a linker script.

## Service entry point

The service entry point should have the following prototype:

~~~ {.c}
void pal_entry(uint32_t uiCommand, tzi_encode_buffer_t *psInBuf, tzi_encode_buffer_t *psOutBuf, tz_return_t *puiRv)
~~~

 * `uiCommand` will contain command specified in the call to
   `TZOperationPrepareInvoke`
 * `psInBuf` will contain the parameters marshalled by `TZEncode*`. 
   Use the API in [tz/include/marshal.h] to decode this buffer.
 * `psOutBuf` is an output buffer for marshalled data. Use the
   API in [tz/include/marshal.h] to encode this buffer.
 * `puiRv` is a status code to be returned. Success should be indicated
   by setting this to `TZ_SUCCESS`.

# Roadmap

## Clean API for developing services

We need to define a common clean interface for the runtime that
a device provides to a service. This is currently defined by
svcapi.h, which is just a quick rip from trustvisor's code.

## Support for standalone service binaries

For the moment, services and the applications that interact with them
are compiled into the same binary. Support for standalone service
binaries will help decouple these. In the first iteration, these will
probably have to be statically compiled position-independent binaries.

The current API for loading services is trustvisor-specific, and
requires that the service (PAL) and the application that invokes it
are compiled into the same binary. Soon we'll standardize a standalone
binary format for services, so that they may be compiled separately
from the applications that use them. Ideally they will also be at least
source-compatible with alternative devices; perhaps even binary-compatible.

## User-space device

It should be fairly straightforward to create a device that runs a
service in user-space, while emulating both the functionality and
limitations of a trusted environment. This would help a lot with
debugging. A clean way to simulate this would be to fork a new process
to run the service code, passing data through shared mmap regions.

# Other resources

  * [Redmine Project](https://plover.pdl.cmu.local/projects/tee-sdk/) 

This file is written in [Pandoc] Markdown for easy conversion to other
formats.

[Pandoc]: http://johnmacfarlane.net/pandoc/README.html

