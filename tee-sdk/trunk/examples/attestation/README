Prerequisites:

JSON library for data encoding / decoding
TrouSerS / tpm-tools for interacting with TPM in untrusted world
OpenSSL development for crypto and base64 encoding and decoding

aptitude install libtspi-dev libtspi1 trousers tpm-tools libjson0-dbg libjson0-dev python-json python-m2crypto libtpm-unseal-dev
...and OpenSSL development packages

Also required is OpenPlatformTrustServices-tools-0.1.2, as it provides
tpm_quote and tpm_createkey. See:
REPO/tools/OpenPlatformTrustServices-tools-0.1.2.

Try prereqs.sh to see if the needed TrouSerS / TPM functionality is in place.

verifier.py: Runs on the "trusted" host and generates nonces (the
  "challenges") for which the target host generates attestations (the
  "quotes" from the PAL's uTPM and the host's TPM that comprise the
  response).

attestor.py: Runs on the "untrusted" host where TrustVisor is active
  and manages collection and communication of the uTPM and TPM
  attestations.


Lots of issues remain:
1. consistent message encoding
2. consistent JSON hierarchy
3. better error handling
4. using functions to clean up the current straight-line code and make it more readable
5. actually getting a certificate for an AIK
6. supporting a single long-lived AIK
7. break dependency on OpenPTS's tpm_createkey and tpm_quote, since they're buggy
