This example is the starting point for anti-rollback protections that
will eventually be leveraged by all PALs with real state continuity
requirements.  

Ultimately the anti-rollback capabilities developed here will make
their way into a "MUX PAL" that will multiplex anti-rollback
capabilities for an arbitrary number of PALs on the system.

The basic design is largely inspired by the "Memoir" research paper,
but the operating environment on TrustVisor with its MicroTPM is faily
different.  In particular (likely not exhaustive):

 1. There is no need for an asymmetric keypair within a Trusted
    Module, since MicroTPM attestations can fulfill the need for
    authenticating different PALs, and one PAL's data can readily be
    sealed for another PAL.

 2. PALs' state is maintained while a PAL is registered, even if it is
    not executing. Though it is necessary to continue to provide
    rollback protection against unexpected (and potentially malicious)
    power loss, a lot less shuffling of bytes is required between
    calls into the PAL.

For this initial implementation, there will not be any stand-alone
"Memoir Tools".  Rather, we aspire to create two libraries (one
trusted, one untrusted, respectively) called libarb and libarbtools.
Part of the motivation for this is the practical constraint that a PAL
on TrustVisor is linked into the application that calls it, and is not
a stand-alone binary.

This initial implementation will be rife with responsibilities that
the developer must meet to ensure the desired security properties.
Ultimately we hope to structure the code such that shooting oneself in
the foot becomes challenging.

Initially, we will not leverage JSON, Google Protocol Buffers, or
other "nice" data structuring formats.  Ultimately, we will use
something like this.

In memoir paper, State Snapshot (Fig. 3) contains a freshness tag and
authenticator, where the freshness tag is not encrypted, and the
authenticator is distinct from the encrypted state.  Here in
TrustVisor, we have high-performance sealing, so we can omit the
authenticator and just include the freshness tag in the encrypted
state data.

******************************************************************

This implementation is now stale.  Further development will proceed as
a component of tee-sdk.  This implementation will be kept around for
reference, testing, etc.
