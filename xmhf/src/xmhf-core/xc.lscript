/*
 * @XMHF_LICENSE_HEADER_START@
 *
 * eXtensible, Modular Hypervisor Framework (XMHF)
 * Copyright (c) 2009-2012 Carnegie Mellon University
 * Copyright (c) 2010-2012 VDG Inc.
 * All Rights Reserved.
 *
 * Developed by: XMHF Team
 *               Carnegie Mellon University / CyLab
 *               VDG Inc.
 *               http://xmhf.org
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the names of Carnegie Mellon or VDG Inc, nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @XMHF_LICENSE_HEADER_END@
 */

#include <xmhf.h>

OUTPUT_ARCH("i386")

ENTRY(xmhf_runtime_entry)

MEMORY
{
  all (rwxai) : ORIGIN = 0x10200000, LENGTH = 14M /* max. length */
  slabroshareddatamem (rai) : ORIGIN = 0x11000000, LENGTH = 2M
  slabmem (rwxai) : ORIGIN = 0x11200000, LENGTH = 16M
  unaccounted (rwxai) : ORIGIN = 0, LENGTH = 0 /* see section .unaccounted at end */
}

SECTIONS
{
	. = 0x10200000;

	.text : {
		*(.s_rpb)
		*(.text)
		. = ALIGN(4096);    
	} >all =0x9090 

	.data : {
		*(.data)
		*(.rodata)
		*(.rodata.str1.1)
		*(.comment)
		*(.eh_frame) /* exception-metadata. might be able to discard */
		*(.bss)
		. = ALIGN(4096);    
	} >all =0x0000 

	.palign_data : {
		*(.palign_data)
		. = ALIGN(4096);    
	} >all =0x0000 

	.stack : {
		*(.stack)
		. = ALIGN(0x01000000);    
	} >all =0x0000


	/* shared slab read-only data area */
	. = 0x11000000; 
	.slabroshareddata : {
		_slab_table = .;
		. = ALIGN(0x01000000);    
	} >slabroshareddatamem =0x0000
	

	/* [test] slabs start */
	. = 0x11200000;
	.slabtest : {
		_test_slab_header = . ;
		_objs_slab/xmhf-slab.slo(*)
		. = ALIGN(0x01000000);
	} >slabmem =0x0000


	/* this is to cause the link to fail if there is
	* anything we didn't explicitly place.
	* when this does cause link to fail, temporarily comment
	* this part out to see what sections end up in the output
	* which are not handled above, and handle them.
	*/
	.unaccounted : {
	*(*)
	} >unaccounted

	/* paramcore = core parameter area (1MB in size) */
	. = 0x1CC00000;
	paramcore_start = .;
	
	/* paramhypapp = hypapp parameter area (1MB in size) */
	. = 0x1CE00000;
	paramhypapp_start = .;
}
