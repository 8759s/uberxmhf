# common makefile for slabs
# author: amit vasudevan (amitvasudevan@acm.org)

XMHF_SLAB_SOURCES_SUBST := $(patsubst $(srcdir)/%, %, $(XMHF_SLAB_SOURCES))

# grab list of file names only for binary generation
XMHF_SLAB_SOURCES_FILENAMEONLY := $(notdir $(XMHF_SLAB_SOURCES_SUBST))

XMHF_SLAB_OBJECTS_ARCHIVE := $(patsubst %.c, %.o, $(XMHF_SLAB_SOURCES_FILENAMEONLY))
XMHF_SLAB_OBJECTS_ARCHIVE := $(patsubst %.cS, %.o, $(XMHF_SLAB_OBJECTS_ARCHIVE))
XMHF_SLAB_OBJECTS_ARCHIVE := $(patsubst %.S, %.o, $(XMHF_SLAB_OBJECTS_ARCHIVE))

XMHF_SLAB_VERIFICATION_SOURCES := $(patsubst %.c, %.c.v.c, $(XMHF_SLAB_SOURCES_FILENAMEONLY))
XMHF_SLAB_VERIFICATION_SOURCES := $(patsubst %.cS, %.cS.v.c, $(XMHF_SLAB_VERIFICATION_SOURCES))


# list of object dependencies
XMHF_SLAB_OBJECTS := $(patsubst %.c, %.o, $(XMHF_SLAB_SOURCES_SUBST))
XMHF_SLAB_OBJECTS := $(patsubst %.cS, %.o, $(XMHF_SLAB_OBJECTS))
XMHF_SLAB_OBJECTS := $(patsubst %.S, %.o, $(XMHF_SLAB_OBJECTS))

# folder where objects go
XMHF_SLAB_OBJECTS_DIR := _objs_slab_$(XMHF_SLAB_NAME)
XMHF_SLAB_VERIFICATION_DIR := _verif_$(XMHF_SLAB_NAME)


LINKER_SCRIPT_INPUT := $(XMHF_DIR)/xmhf-slabs/$(XMHF_SLAB_NAME)/xmhfgeecslab.lscript
LINKER_SCRIPT_OUTPUT := $(XMHF_SLAB_NAME).lds

#ifeq ($(XMHF_SLAB_FULLLINK), y)
export LDFLAGS := --oformat elf32-i386
#else
#    export LDFLAGS := -r --oformat elf32-i386
#endif


# targets
.PHONY: all
all: buildslabbin


.PHONY: verifybase
verifybase:
	@echo Prepping sources...
	mkdir -p $(XMHF_SLAB_VERIFICATION_DIR)
	@for i in $(XMHF_SLAB_SOURCES_SUBST); \
	do \
		(cp -f $$i $(XMHF_SLAB_VERIFICATION_DIR)/$$i.v.c) || exit 1; \
	done;
	@echo Sources prepped.






#pp_slab_gsm:
#	mkdir -p $(XMHF_SLAB_OBJECTS_DIR)
#	cd $(XMHF_SLAB_OBJECTS_DIR) && $(CP) -f $(XMHF_DIR)/xmhf-slabs/$(XMHF_SLAB_NAME)/$(XMHF_SLAB_NAME).gsm $(XMHF_SLAB_NAME).gsm.c
#	cd $(XMHF_SLAB_OBJECTS_DIR) && $(CCERT) -E -D__ASSEMBLY__ $(CCERT_FLAGS) $(XMHF_SLAB_NAME).gsm.c >$(XMHF_DIR)/xmhf-slabs/$(XMHF_SLAB_NAME)/$(XMHF_SLAB_NAME).gsm.pp
.PHONY: linkslabbin
linkslabbin:
	cd $(XMHF_SLAB_OBJECTS_DIR) && cp -f $(LINKER_SCRIPT_INPUT) $(XMHF_SLAB_NAME).lscript.c
	cd $(XMHF_SLAB_OBJECTS_DIR) && $(CC) $(CFLAGS) -D__ASSEMBLY__ -P -E $(XMHF_SLAB_NAME).lscript.c -o $(LINKER_SCRIPT_OUTPUT)
	cd $(XMHF_SLAB_OBJECTS_DIR) && $(LD) $(LDFLAGS) -T $(LINKER_SCRIPT_OUTPUT) -o $(XMHF_SLAB_NAME).slo $(XMHF_SLAB_OBJECTS_ARCHIVE) $(XMHF_SLAB_STUBOBJECTS) -L$(CCERT_LIB) -L$(CCLIB)/lib/linux -L$(XMHF_LIBS_OBJECTS_DIR) -lxmhfc -lxmhfcrypto -lxmhfdebug -lxmhfhw -lxmhfhw -lxmhfc -lclang_rt.full-i386 -lcompcert
	cd $(XMHF_SLAB_OBJECTS_DIR) && nm $(XMHF_SLAB_NAME).slo | awk '{ print $$3 }' | awk NF >$(XMHF_SLAB_NAME).slo.syms
	cd $(XMHF_SLAB_OBJECTS_DIR) && $(OBJCOPY) --localize-symbols=$(XMHF_SLAB_NAME).slo.syms $(XMHF_SLAB_NAME).slo $(XMHF_SLAB_NAME).slo
	#cd $(XMHF_SLAB_OBJECTS_DIR) && $(OBJCOPY) $(XMHF_SLAB_GLOBAL_SYMS) $(XMHF_SLAB_NAME).slo $(XMHF_SLAB_NAME).slo
	cd $(XMHF_SLAB_OBJECTS_DIR) && nm $(XMHF_SLAB_NAME).slo | awk '{ print $$3,":",$$1 }' | awk NF >$(XMHF_SLAB_NAME).mmap


buildslabbin: $(XMHF_SLAB_OBJECTS) linkslabbin


%.o: %.c
	mkdir -p $(XMHF_SLAB_OBJECTS_DIR)
	$(CCERT) -c $(CCERT_FLAGS) -o $(XMHF_SLAB_OBJECTS_DIR)/$@ $<

%.o: %.cS
	mkdir -p $(XMHF_SLAB_OBJECTS_DIR)
	@echo Building "$@" from "$<"
	cp -f $< $(XMHF_SLAB_OBJECTS_DIR)/$(@F).c
	cd $(XMHF_SLAB_OBJECTS_DIR) && $(CCERT) -c -dmach $(CCERT_FLAGS) -O0 $(@F).c
	cd $(XMHF_SLAB_OBJECTS_DIR) && $(XMHF_DIR)/tools/extractasm.pl $(@F).mach > $(@F).S
	cd $(XMHF_SLAB_OBJECTS_DIR) && gcc -c $(ASFLAGS) -o $@ $(@F).S

%.o: %.S
	mkdir -p $(XMHF_SLAB_OBJECTS_DIR)
	cd $(XMHF_SLAB_OBJECTS_DIR) && gcc -c $(ASFLAGS) $< -o $(@F)


.PHONY: clean
clean:
	$(RM) -rf $(XMHF_SLAB_OBJECTS_DIR)








