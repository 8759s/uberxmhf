   1              		.file	"startup.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	IRQ_Routine
  13              	IRQ_Routine:
  14              	.LFB2:
  15              		.file 1 "ARM2148/startup.c"
   1:ARM2148/startup.c **** /*
   2:ARM2148/startup.c **** 	LPCUSB, an USB device driver for LPC microcontrollers	
   3:ARM2148/startup.c **** 
   4:ARM2148/startup.c **** 	Initialisation functions for exception handlers, PLL and MAM
   5:ARM2148/startup.c **** 	Partially copied from Jim Lynch's tutorial
   6:ARM2148/startup.c **** */
   7:ARM2148/startup.c **** 
   8:ARM2148/startup.c **** /**********************************************************
   9:ARM2148/startup.c ****                   Header files
  10:ARM2148/startup.c ****  **********************************************************/
  11:ARM2148/startup.c **** 
  12:ARM2148/startup.c **** #include "startup.h"
  13:ARM2148/startup.c **** 
  14:ARM2148/startup.c **** 
  15:ARM2148/startup.c **** #define MAMCR		*(volatile unsigned int *)0xE01FC000
  16:ARM2148/startup.c **** #define MAMTIM		*(volatile unsigned int *)0xE01FC004
  17:ARM2148/startup.c **** 
  18:ARM2148/startup.c **** #define PLLCON		*(volatile unsigned int *)0xE01FC080
  19:ARM2148/startup.c **** #define PLLCFG		*(volatile unsigned int *)0xE01FC084
  20:ARM2148/startup.c **** #define PLLSTAT		*(volatile unsigned int *)0xE01FC088
  21:ARM2148/startup.c **** #define PLLFEED		*(volatile unsigned int *)0xE01FC08C
  22:ARM2148/startup.c **** 
  23:ARM2148/startup.c **** #define VPBDIV		*(volatile unsigned int *)0xE01FC100
  24:ARM2148/startup.c **** 
  25:ARM2148/startup.c **** #define T1IR		*(volatile unsigned int *)0xE0008000
  26:ARM2148/startup.c **** #define TIR_MR0I    (1 << 0)            // Interrupt flag for match channel 0
  27:ARM2148/startup.c **** 
  28:ARM2148/startup.c **** #define IO0PIN      *(volatile unsigned int *)0xE0028000 
  29:ARM2148/startup.c **** 
  30:ARM2148/startup.c **** #define SCS_REG     *(volatile unsigned int *)0xE01FC1A0   
  31:ARM2148/startup.c **** 
  32:ARM2148/startup.c **** void IRQ_Routine (void)   __attribute__ ((interrupt("IRQ")));
  33:ARM2148/startup.c **** void FIQ_Routine (void)   __attribute__ ((interrupt("FIQ")));
  34:ARM2148/startup.c **** void SWI_Routine (void)   __attribute__ ((interrupt("SWI")));
  35:ARM2148/startup.c **** void UNDEF_Routine (void) __attribute__ ((interrupt("UNDEF")));
  36:ARM2148/startup.c **** 
  37:ARM2148/startup.c **** 
  38:ARM2148/startup.c **** /*  Stubs for various interrupts (may be replaced later)  */
  39:ARM2148/startup.c **** /*  ----------------------------------------------------  */
  40:ARM2148/startup.c **** 
  41:ARM2148/startup.c **** 
  42:ARM2148/startup.c **** 
  43:ARM2148/startup.c **** void IRQ_Routine (void) {
  16              		.loc 1 43 0
  17              		@ Interrupt Service Routine.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              		@ lr needed for prologue
  22              	.L3:
  23 0000 FEFFFFEA 		b	.L3
  24              	.LFE2:
  26              		.align	2
  27              		.global	FIQ_Routine
  29              	FIQ_Routine:
  30              	.LFB3:
  44:ARM2148/startup.c **** 	while (1) ;	
  45:ARM2148/startup.c **** }
  46:ARM2148/startup.c **** 
  47:ARM2148/startup.c **** void FIQ_Routine (void)  {
  31              		.loc 1 47 0
  32              		@ Fast Interrupt Service Routine.
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36              		.loc 1 47 0
  37              		@ lr needed for prologue
  38              	.L7:
  39 0004 FEFFFFEA 		b	.L7
  40              	.LFE3:
  42              		.align	2
  43              		.global	SWI_Routine
  45              	SWI_Routine:
  46              	.LFB4:
  48:ARM2148/startup.c **** 	while (1) ;	
  49:ARM2148/startup.c **** }		
  50:ARM2148/startup.c **** 		
  51:ARM2148/startup.c **** 		
  52:ARM2148/startup.c **** void SWI_Routine (void)  {
  47              		.loc 1 52 0
  48              		@ ARM Exception Handler.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              		.loc 1 52 0
  53              		@ lr needed for prologue
  54              	.L11:
  55 0008 FEFFFFEA 		b	.L11
  56              	.LFE4:
  58              		.align	2
  59              		.global	UNDEF_Routine
  61              	UNDEF_Routine:
  62              	.LFB5:
  53:ARM2148/startup.c **** 	while (1) ;	
  54:ARM2148/startup.c **** }
  55:ARM2148/startup.c **** 
  56:ARM2148/startup.c **** 
  57:ARM2148/startup.c **** void UNDEF_Routine (void) {
  63              		.loc 1 57 0
  64              		@ ARM Exception Handler.
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              		.loc 1 57 0
  69              		@ lr needed for prologue
  70              	.L15:
  71 000c FEFFFFEA 		b	.L15
  72              	.LFE5:
  74              		.align	2
  75              		.global	Init2148
  77              	Init2148:
  78              	.LFB7:
  58:ARM2148/startup.c **** 	while (1) ;	
  59:ARM2148/startup.c **** }
  60:ARM2148/startup.c **** 
  61:ARM2148/startup.c **** 
  62:ARM2148/startup.c **** /**********************************************************
  63:ARM2148/startup.c ****                       Initialize
  64:ARM2148/startup.c **** **********************************************************/
  65:ARM2148/startup.c **** 
  66:ARM2148/startup.c **** #define PLOCK 0x400
  67:ARM2148/startup.c **** 
  68:ARM2148/startup.c **** static void feed(void)
  69:ARM2148/startup.c **** {
  70:ARM2148/startup.c **** 	PLLFEED = 0xAA;
  71:ARM2148/startup.c **** 	PLLFEED = 0x55;
  72:ARM2148/startup.c **** }
  73:ARM2148/startup.c **** 
  74:ARM2148/startup.c **** 
  75:ARM2148/startup.c **** void Init2148(void)  
  76:ARM2148/startup.c **** {
  79              		.loc 1 76 0
  80              		@ Function supports interworking.
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  77:ARM2148/startup.c **** 	
  78:ARM2148/startup.c ****  
  79:ARM2148/startup.c **** 	// 				Setting the Phased Lock Loop (PLL)
  80:ARM2148/startup.c **** 	//               ----------------------------------
  81:ARM2148/startup.c **** 	//
  82:ARM2148/startup.c **** 	// Olimex LPC-P2148 has a 12.0000 mhz crystal
  83:ARM2148/startup.c **** 	//
  84:ARM2148/startup.c **** 	// We'd like the LPC2148 to run at 60 mhz (has to be an even multiple of crystal)
  85:ARM2148/startup.c **** 	// 
  86:ARM2148/startup.c **** 	// According to the Philips LPC2148 manual:   M = cclk / Fosc	where:	M    = PLL multiplier (bits 0
  87:ARM2148/startup.c **** 	//																		cclk = 60000000 hz
  88:ARM2148/startup.c **** 	//																		Fosc = 12000000 hz
  89:ARM2148/startup.c **** 	//
  90:ARM2148/startup.c **** 	// Solving:	M = 60000000 / 12000000 = 5           
  91:ARM2148/startup.c **** 	//
  92:ARM2148/startup.c **** 	//			Note: M - 1 must be entered into bits 0-4 of PLLCFG (assign 4 to these bits)
  93:ARM2148/startup.c **** 	//
  94:ARM2148/startup.c **** 	//
  95:ARM2148/startup.c **** 	// The Current Controlled Oscilator (CCO) must operate in the range 156 mhz to 320 mhz
  96:ARM2148/startup.c **** 	//
  97:ARM2148/startup.c **** 	// According to the Philips LPC2148 manual:	Fcco = cclk * 2 * P    where:	Fcco = CCO frequency 
  98:ARM2148/startup.c **** 	//																			cclk = 60000000 hz
  99:ARM2148/startup.c **** 	//																			P = PLL divisor (bits 5-6 of PLLCFG)
 100:ARM2148/startup.c **** 	//
 101:ARM2148/startup.c **** 	// Solving:	Fcco = 60000000 * 2 * P
 102:ARM2148/startup.c **** 	//			P = 2  (trial value)
 103:ARM2148/startup.c **** 	//			Fcco = 60000000 * 2 * 2
 104:ARM2148/startup.c **** 	//			Fcc0 = 240000000 hz    (good choice for P since it's within the 156 mhz to 320 mhz range)
 105:ARM2148/startup.c **** 	//
 106:ARM2148/startup.c **** 	// From Table 22 (page 34) of Philips LPC2148 manual    P = 2, PLLCFG bits 5-6 = 1  (assign 1 to t
 107:ARM2148/startup.c **** 	//
 108:ARM2148/startup.c **** 	// Finally:      PLLCFG = 0  01  00100  =  0x24
 109:ARM2148/startup.c **** 	//
 110:ARM2148/startup.c **** 	// Final note: to load PLLCFG register, we must use the 0xAA followed 0x55 write sequence to the P
 111:ARM2148/startup.c **** 	//             this is done in the short function feed() below
 112:ARM2148/startup.c **** 	//
 113:ARM2148/startup.c ****    
 114:ARM2148/startup.c **** 	// Setting Multiplier and Divider values
 115:ARM2148/startup.c ****   PLLCFG = 0x24;
  84              		.loc 1 115 0
  85 0010 68209FE5 		ldr	r2, .L23
  86 0014 2430A0E3 		mov	r3, #36
  87 0018 843082E5 		str	r3, [r2, #132]
  88              	.LBB8:
  89              	.LBB9:
  90              		.loc 1 70 0
  91 001c AA10A0E3 		mov	r1, #170
  92              		.loc 1 71 0
  93 0020 5500A0E3 		mov	r0, #85
  94              	.LBE9:
  95              	.LBE8:
 116:ARM2148/startup.c ****   feed();
 117:ARM2148/startup.c ****   
 118:ARM2148/startup.c **** 	// Enabling the PLL */	
 119:ARM2148/startup.c **** 	PLLCON = 0x1;
  96              		.loc 1 119 0
  97 0024 0130A0E3 		mov	r3, #1
  98              	.LBB10:
  99              	.LBB11:
 100              		.loc 1 70 0
 101 0028 8C1082E5 		str	r1, [r2, #140]
 102              		.loc 1 71 0
 103 002c 8C0082E5 		str	r0, [r2, #140]
 104              	.LBE11:
 105              	.LBE10:
 106              		.loc 1 119 0
 107 0030 803082E5 		str	r3, [r2, #128]
 108              	.LBB12:
 109              	.LBB13:
 110              		.loc 1 70 0
 111 0034 8C1082E5 		str	r1, [r2, #140]
 112              		.loc 1 71 0
 113 0038 8C0082E5 		str	r0, [r2, #140]
 114              	.LBE13:
 115              	.LBE12:
 116              		.loc 1 76 0
 117              		@ lr needed for prologue
 118              	.L18:
 120:ARM2148/startup.c **** 	feed();
 121:ARM2148/startup.c ****   
 122:ARM2148/startup.c **** 	// Wait for the PLL to lock to set frequency
 123:ARM2148/startup.c **** 	while(!(PLLSTAT & PLOCK)) ;
 119              		.loc 1 123 0
 120 003c 3C109FE5 		ldr	r1, .L23
 121 0040 883091E5 		ldr	r3, [r1, #136]
 122 0044 010B13E3 		tst	r3, #1024
 123 0048 FBFFFF0A 		beq	.L18
 124:ARM2148/startup.c ****   
 125:ARM2148/startup.c **** 	// Connect the PLL as the clock source
 126:ARM2148/startup.c **** 	PLLCON = 0x3;
 124              		.loc 1 126 0
 125 004c 0320A0E3 		mov	r2, #3
 126              	.LBB14:
 127              	.LBB15:
 128              		.loc 1 70 0
 129 0050 AA30A0E3 		mov	r3, #170
 130              	.LBE15:
 131              	.LBE14:
 132              		.loc 1 126 0
 133 0054 802081E5 		str	r2, [r1, #128]
 134              	.LBB16:
 135              	.LBB17:
 136              		.loc 1 70 0
 137 0058 8C3081E5 		str	r3, [r1, #140]
 138              		.loc 1 71 0
 139 005c 5530A0E3 		mov	r3, #85
 140 0060 8C3081E5 		str	r3, [r1, #140]
 141              	.LBE17:
 142              	.LBE16:
 127:ARM2148/startup.c **** 	feed();
 128:ARM2148/startup.c ****   
 129:ARM2148/startup.c **** 	// Enabling MAM and setting number of clocks used for Flash memory fetch
 130:ARM2148/startup.c **** 	MAMTIM = 0x3;
 131:ARM2148/startup.c **** 	MAMCR = 0x2;
 143              		.loc 1 131 0
 144 0064 0230A0E3 		mov	r3, #2
 145              		.loc 1 130 0
 146 0068 042081E5 		str	r2, [r1, #4]
 147              		.loc 1 131 0
 148 006c 003081E5 		str	r3, [r1, #0]
 132:ARM2148/startup.c ****   
 133:ARM2148/startup.c **** 	// Setting peripheral Clock (pclk) to System Clock (cclk)
 134:ARM2148/startup.c **** 	VPBDIV = 0x1;
 149              		.loc 1 134 0
 150 0070 0130A0E3 		mov	r3, #1
 151 0074 003181E5 		str	r3, [r1, #256]
 135:ARM2148/startup.c **** 	
 136:ARM2148/startup.c **** 	// Initialize Port0 & Port1 as Fast
 137:ARM2148/startup.c **** 	SCS_REG = 0x3;
 152              		.loc 1 137 0
 153 0078 A02181E5 		str	r2, [r1, #416]
 138:ARM2148/startup.c **** }
 154              		.loc 1 138 0
 155 007c 1EFF2FE1 		bx	lr
 156              	.L24:
 157              		.align	2
 158              	.L23:
 159 0080 00C01FE0 		.word	-534790144
 160              	.LFE7:
 218              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 startup.c
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccOdWbTx.s:13     .text:00000000 IRQ_Routine
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccOdWbTx.s:23     .text:00000000 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccOdWbTx.s:29     .text:00000004 FIQ_Routine
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccOdWbTx.s:45     .text:00000008 SWI_Routine
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccOdWbTx.s:61     .text:0000000c UNDEF_Routine
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccOdWbTx.s:77     .text:00000010 Init2148
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccOdWbTx.s:159    .text:00000080 $d

NO UNDEFINED SYMBOLS
