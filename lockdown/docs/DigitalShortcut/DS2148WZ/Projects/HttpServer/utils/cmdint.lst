   1              		.file	"cmdint.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	Get4cDecNum
  13              	Get4cDecNum:
  14              	.LFB4:
  15              		.file 1 "utils/cmdint.c"
   1:utils/cmdint.c **** /** @file
   2:utils/cmdint.c ****  * Command Interpreter
   3:utils/cmdint.c ****  */
   4:utils/cmdint.c **** /* copyright ©2008, 2008 #001142 */
   5:utils/cmdint.c **** 
   6:utils/cmdint.c **** #include <stdlib.h>
   7:utils/cmdint.c **** #include <string.h>
   8:utils/cmdint.c **** 
   9:utils/cmdint.c **** #include	"console.h"
  10:utils/cmdint.c **** 
  11:utils/cmdint.c **** #include	"../ARM2148/lpc21xx.h"
  12:utils/cmdint.c **** #include	"../ARM2148/processor.h"
  13:utils/cmdint.c **** 
  14:utils/cmdint.c **** #include	"types.h"
  15:utils/cmdint.c **** #include	"../Wiznet/w5300.h"
  16:utils/cmdint.c **** #include	"../utils/util.h"
  17:utils/cmdint.c **** #include	"../i2c/i2c.h"
  18:utils/cmdint.c **** 
  19:utils/cmdint.c **** int			CmdLen, CmdRest, CmdDone;
  20:utils/cmdint.c **** char		CmdStr[30], cmd, scmd;
  21:utils/cmdint.c **** char*		CmdPtr;
  22:utils/cmdint.c **** 
  23:utils/cmdint.c **** extern	unsigned int	SrvCnt, StarCnt, ir_t1;
  24:utils/cmdint.c **** extern	uint32 miliSec, LogTim0;
  25:utils/cmdint.c **** extern	int SpurIntCnt, CRdyMax;
  26:utils/cmdint.c **** extern	uint8 	outBuf[];
  27:utils/cmdint.c **** extern	uint8 	inBuf[];
  28:utils/cmdint.c **** extern	uint8		tmpBuf[];	
  29:utils/cmdint.c **** extern	char		RevDate[];	
  30:utils/cmdint.c **** 
  31:utils/cmdint.c **** 
  32:utils/cmdint.c **** extern	void WizCheck0(void);
  33:utils/cmdint.c **** extern	void ShowIPs(void);
  34:utils/cmdint.c **** extern	void ShowSSRs(void);
  35:utils/cmdint.c **** 
  36:utils/cmdint.c **** void	CheckCmd(void);
  37:utils/cmdint.c **** void	LogInit(void);
  38:utils/cmdint.c **** void	LogWr( uint16 data );
  39:utils/cmdint.c **** void	LogWrTim( void );
  40:utils/cmdint.c **** void	LogDisplay( void );
  41:utils/cmdint.c **** int 	printf(const char *format, ...);
  42:utils/cmdint.c **** int 	scanDecNumber( char* StrBuf, int maxLen, int* number);
  43:utils/cmdint.c **** int		RdUi8Seq( char* StBuf, int Len,  uint8* numBuf );
  44:utils/cmdint.c **** int		InitEE_IP(void);
  45:utils/cmdint.c **** void	DumpEE(uint16 addr, int len);
  46:utils/cmdint.c **** void 	ClearEE(void);
  47:utils/cmdint.c **** 
  48:utils/cmdint.c **** #define HT	9
  49:utils/cmdint.c **** #define LF	10
  50:utils/cmdint.c **** #define CR	13
  51:utils/cmdint.c **** #define ESC	27
  52:utils/cmdint.c **** 
  53:utils/cmdint.c **** #define LOGMAX	1200
  54:utils/cmdint.c **** 
  55:utils/cmdint.c **** int 	tmp, LogCnt;
  56:utils/cmdint.c **** uint16	LogData[LOGMAX+5];
  57:utils/cmdint.c **** 
  58:utils/cmdint.c **** int	Get4cDecNum(char* nStr);
  59:utils/cmdint.c **** int	GetCmdLine(void);
  60:utils/cmdint.c **** 
  61:utils/cmdint.c **** extern	uint8		ip_0[];
  62:utils/cmdint.c **** 
  63:utils/cmdint.c **** static unsigned char ip_a[4];                   // alternate setting SIP
  64:utils/cmdint.c **** static unsigned char sn_a[4];                   // alternate setting SUBR 
  65:utils/cmdint.c **** static unsigned char gar_a[6];                  // alternate setting GAT
  66:utils/cmdint.c **** static unsigned char mac_a[6];                  // alternate setting MAC
  67:utils/cmdint.c **** 
  68:utils/cmdint.c **** 
  69:utils/cmdint.c **** void	CheckCmd(void)
  70:utils/cmdint.c **** {
  71:utils/cmdint.c **** 	uint8 	tb[30];
  72:utils/cmdint.c **** 	int len = 0;
  73:utils/cmdint.c **** 	int v1;
  74:utils/cmdint.c **** 	int i;
  75:utils/cmdint.c **** 
  76:utils/cmdint.c **** 	if ( CmdDone ) {
  77:utils/cmdint.c **** 		CmdDone = 0;
  78:utils/cmdint.c **** 		printf("\n\r!");
  79:utils/cmdint.c **** 	}
  80:utils/cmdint.c **** 	
  81:utils/cmdint.c **** 	if ( GetCmdLine()&&(CmdLen>0) ) {
  82:utils/cmdint.c **** 		CmdDone = 1;
  83:utils/cmdint.c **** 		cmd = CmdStr[0];
  84:utils/cmdint.c ****      if ( (cmd>0x60)&&(cmd<0x7B) ) {
  85:utils/cmdint.c **** 			cmd = cmd - 0x20;		// ASCII toupper
  86:utils/cmdint.c **** 		}
  87:utils/cmdint.c **** 		CmdRest--;
  88:utils/cmdint.c **** 			      
  89:utils/cmdint.c ****     switch (cmd) {
  90:utils/cmdint.c **** 		case 'L':
  91:utils/cmdint.c **** 			LogDisplay();
  92:utils/cmdint.c **** 			break;
  93:utils/cmdint.c **** 
  94:utils/cmdint.c **** 		case 'I':
  95:utils/cmdint.c **** 			// INFO
  96:utils/cmdint.c **** 			printf( "### HTTP Server_Demo %s ###\n\r", RevDate);
  97:utils/cmdint.c **** 			printf( "EEPROM:\n\r");
  98:utils/cmdint.c **** 			DumpEE(0, 0x30); printf( "\n\r" );
  99:utils/cmdint.c **** 			
 100:utils/cmdint.c **** 			ShowIPs();
 101:utils/cmdint.c **** 			break;
 102:utils/cmdint.c **** 
 103:utils/cmdint.c **** 		case 'F': {
 104:utils/cmdint.c **** 			char MStr[] = {"BrownAB Fox123 jumpsABC 1234\r\n\r\n"};
 105:utils/cmdint.c **** 			char CStr[] = {"\r\n"};
 106:utils/cmdint.c **** 			printf("\n\r%02X %02X", CStr[0], CStr[1]);
 107:utils/cmdint.c **** 			findstr(&MStr[0], "Fox");
 108:utils/cmdint.c **** 			findstr(&MStr[0], "123");
 109:utils/cmdint.c **** 			findstr(&MStr[0], "1234");
 110:utils/cmdint.c **** 			findstr(&MStr[0], "Br");
 111:utils/cmdint.c **** 			findstr(&MStr[0], "j");
 112:utils/cmdint.c **** 			findstr(&MStr[0], "XYZ");
 113:utils/cmdint.c **** 			findstr(&MStr[0], "\r\n\r\n");
 114:utils/cmdint.c **** 			break;
 115:utils/cmdint.c **** 		}
 116:utils/cmdint.c **** 			
 117:utils/cmdint.c **** 		case 'H':
 118:utils/cmdint.c **** 			// Help
 119:utils/cmdint.c **** 			printf( "Commands:"); 
 120:utils/cmdint.c **** 			printf( "\n\r L  - LogDisplay");
 121:utils/cmdint.c **** 			printf( "\n\r I  - Info");
 122:utils/cmdint.c **** 			printf( "\n\r EC - Clear EE");
 123:utils/cmdint.c **** 			printf( "\n\r ED - Dump EE");
 124:utils/cmdint.c **** 			printf( "\n\r EL - Load/Init EE_IPs");
 125:utils/cmdint.c **** 			printf( "\n\r EI - set EE_IP");
 126:utils/cmdint.c **** 			printf( "\n\r EM - set EE_MAC");
 127:utils/cmdint.c **** 			printf( "\n\r ES - set EE_SN");
 128:utils/cmdint.c **** 			printf( "\n\r EG - set EE_GAR");
 129:utils/cmdint.c **** 			printf( "\n\r EP - set EE_Port");
 130:utils/cmdint.c **** 			break;
 131:utils/cmdint.c **** 
 132:utils/cmdint.c **** 		case 'E':
 133:utils/cmdint.c **** 			// EEPROM commands
 134:utils/cmdint.c **** 			if (CmdStr[1] == 0) {
 135:utils/cmdint.c **** 				printf("\n\r????");
 136:utils/cmdint.c **** 			} else {
 137:utils/cmdint.c **** 				i = 1;
 138:utils/cmdint.c **** 	   		while ( CmdStr[i] != 0 ) {
 139:utils/cmdint.c **** 					scmd = CmdStr[i];
 140:utils/cmdint.c **** 					if ( (scmd>0x60)&&(scmd<0x7B) ) {
 141:utils/cmdint.c **** 						scmd = scmd - 0x20;		// ASCII toupper
 142:utils/cmdint.c **** 					}
 143:utils/cmdint.c **** 					i++;
 144:utils/cmdint.c **** 
 145:utils/cmdint.c **** 					switch (scmd) {
 146:utils/cmdint.c **** 						case 'D' :
 147:utils/cmdint.c **** 							// Dump EE
 148:utils/cmdint.c **** 							DumpEE(0, 0x60);
 149:utils/cmdint.c **** 							break;
 150:utils/cmdint.c **** 						
 151:utils/cmdint.c **** 						case 'C' :
 152:utils/cmdint.c **** 							// Clear EE
 153:utils/cmdint.c **** 							ClearEE();
 154:utils/cmdint.c **** 							break;
 155:utils/cmdint.c **** 						
 156:utils/cmdint.c **** 						case 'L' :
 157:utils/cmdint.c **** 							// Load - Initialize IP, MAC, GAR, SN, Port
 158:utils/cmdint.c **** 							InitEE_IP();
 159:utils/cmdint.c **** 							delay(100000);
 160:utils/cmdint.c **** 							DumpEE(0, 0x60);
 161:utils/cmdint.c **** 							break;
 162:utils/cmdint.c **** 						
 163:utils/cmdint.c **** 						case 'I' :
 164:utils/cmdint.c **** 							// Set Source IP Address - SIPR 
 165:utils/cmdint.c **** 						  len = RdUi8Seq( &CmdStr[i], 4, ip_a );
 166:utils/cmdint.c **** 						  if ( len > 0 ) {
 167:utils/cmdint.c **** 							  printf("IP: %d.%d.%d.%d", ip_a[0], ip_a[1], ip_a[2], ip_a[3]);
 168:utils/cmdint.c **** 							  setSIPR(ip_a);
 169:utils/cmdint.c **** 								memcpy ( &tb[2], ip_a, 4 );
 170:utils/cmdint.c **** 								if ( eepromWrite(8, tb, 4) != 0 ) printf("\n\rWrEE Err");
 171:utils/cmdint.c **** 						  }
 172:utils/cmdint.c **** 						  else printf("????\n\r");
 173:utils/cmdint.c **** 						  break;
 174:utils/cmdint.c **** 						  
 175:utils/cmdint.c **** 						case 'G' :
 176:utils/cmdint.c **** 							// Set Source Gateway Address - GAR 
 177:utils/cmdint.c **** 						  len = RdUi8Seq( &CmdStr[i], 4, gar_a );
 178:utils/cmdint.c **** 						  if ( len > 0 ) {
 179:utils/cmdint.c **** 							  printf("GAR: %d.%d.%d.%d", gar_a[0], gar_a[1], gar_a[2], gar_a[3]);
 180:utils/cmdint.c **** 							  setGAR(gar_a);
 181:utils/cmdint.c **** 								memcpy ( &tb[2], gar_a, 4 );
 182:utils/cmdint.c **** 								if ( eepromWrite(0x10, tb, 4) != 0 ) printf("\n\rWrEE Err");
 183:utils/cmdint.c **** 						  }
 184:utils/cmdint.c **** 						  else printf("\n\r????");
 185:utils/cmdint.c **** 						  break;
 186:utils/cmdint.c **** 						  
 187:utils/cmdint.c **** 						case 'S' :
 188:utils/cmdint.c **** 							// Set Subnet Mask Address - SUBR
 189:utils/cmdint.c **** 						  len = RdUi8Seq( &CmdStr[i], 4, sn_a );
 190:utils/cmdint.c **** 						  if ( len > 0 ) {
 191:utils/cmdint.c **** 						  	printf("SN: %d.%d.%d.%d", sn_a[0], sn_a[1], sn_a[2], sn_a[3]);
 192:utils/cmdint.c **** 						  	setSUBR(sn_a); 
 193:utils/cmdint.c **** 								memcpy ( &tb[2], &sn_a[0], 4 );
 194:utils/cmdint.c **** 								if ( eepromWrite(0x18, tb, 4) != 0 ) printf("\n\rWrEE Err");
 195:utils/cmdint.c **** 					  	}
 196:utils/cmdint.c **** 						  else printf("\n\r????");
 197:utils/cmdint.c **** 						  break;
 198:utils/cmdint.c **** 						  
 199:utils/cmdint.c **** 						case 'M' :
 200:utils/cmdint.c **** 							// Set MAC Address
 201:utils/cmdint.c **** 						  len = RdUi8Seq( &CmdStr[i], 6, mac_a );
 202:utils/cmdint.c **** 						  if ( len > 0 ) {
 203:utils/cmdint.c **** 						  	printf("MAC: %02x:%02x:%02x:%02x:%02x:%02x", 
 204:utils/cmdint.c **** 						  	mac_a[0], mac_a[1], mac_a[2], mac_a[3], mac_a[4], mac_a[5]);
 205:utils/cmdint.c **** 						  	setSHAR(mac_a);
 206:utils/cmdint.c **** 						  	memcpy ( &tb[2], &mac_a[0], 6 );
 207:utils/cmdint.c **** 						  	if ( eepromWrite(0, tb, 6) != 0 ) printf("\n\rWrEE Err"); 
 208:utils/cmdint.c **** 					  	}
 209:utils/cmdint.c **** 						  else printf("\n\r????");
 210:utils/cmdint.c **** 						  break;
 211:utils/cmdint.c **** 						  
 212:utils/cmdint.c **** 						case 'P' :
 213:utils/cmdint.c **** 							// Set HTTP Port
 214:utils/cmdint.c **** 							scanDecNumber( &CmdStr[i], 5, &v1); 
 215:utils/cmdint.c **** 						  printf("New htPort = %d", v1);
 216:utils/cmdint.c **** 							memcpy ( &tb[2], &v1, 2 );
 217:utils/cmdint.c **** 							if ( eepromWrite(0x20, tb, 2 ) != 0 ) printf("\n\rWrEE Err");
 218:utils/cmdint.c **** 						  break;
 219:utils/cmdint.c **** 
 220:utils/cmdint.c **** 						default: break;
 221:utils/cmdint.c **** 
 222:utils/cmdint.c **** 					}
 223:utils/cmdint.c **** 					i += len;
 224:utils/cmdint.c **** 				}
 225:utils/cmdint.c **** 			}
 226:utils/cmdint.c **** 		break;
 227:utils/cmdint.c **** 			
 228:utils/cmdint.c **** 		default:
 229:utils/cmdint.c **** 			printf("*CmdErr\n\r");
 230:utils/cmdint.c **** 			break;
 231:utils/cmdint.c **** 		}
 232:utils/cmdint.c **** 		CmdLen = 0;
 233:utils/cmdint.c **** 	}					
 234:utils/cmdint.c **** }												
 235:utils/cmdint.c **** 
 236:utils/cmdint.c **** int	GetCmdLine(void)
 237:utils/cmdint.c **** {
 238:utils/cmdint.c **** 	int CRdy;
 239:utils/cmdint.c **** 	int c;
 240:utils/cmdint.c **** 
 241:utils/cmdint.c **** 	CRdy = 0;
 242:utils/cmdint.c **** 	c = my_getchar();
 243:utils/cmdint.c **** 	if ( c != EOF ) {
 244:utils/cmdint.c **** 		// show on console
 245:utils/cmdint.c **** 		// putchar(c);
 246:utils/cmdint.c **** 		printf("%c", c);
 247:utils/cmdint.c **** 		if ( c == CR ) {
 248:utils/cmdint.c **** 			CmdStr[CmdLen]=0;
 249:utils/cmdint.c **** 			CRdy = 1;
 250:utils/cmdint.c **** 		} else {
 251:utils/cmdint.c **** 			CmdStr[CmdLen] = c;
 252:utils/cmdint.c **** 			CmdLen++;
 253:utils/cmdint.c **** 		}
 254:utils/cmdint.c **** 	}
 255:utils/cmdint.c **** 	CmdRest = CmdLen;
 256:utils/cmdint.c **** 	return CRdy;
 257:utils/cmdint.c **** }
 258:utils/cmdint.c **** 
 259:utils/cmdint.c **** 	// Get 4character Decimal Number
 260:utils/cmdint.c **** int	Get4cDecNum(char* nStr)
 261:utils/cmdint.c **** {
  16              		.loc 1 261 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              	.LVL0:
  21 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
  22              	.LCFI0:
  23              		.loc 1 261 0
  24 0004 0020A0E3 		mov	r2, #0
  25              	.LVL1:
  26              	.L2:
 262:utils/cmdint.c **** 	int i, num, v;
 263:utils/cmdint.c **** 	char ch;
 264:utils/cmdint.c **** 	
 265:utils/cmdint.c **** 	num = 0;
 266:utils/cmdint.c **** 	// Skip blank spaces at the beginning
 267:utils/cmdint.c **** 	for (i = 0; i < 3; i++) {
 268:utils/cmdint.c **** 		ch = *nStr;
  27              		.loc 1 268 0
  28 0008 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
  29              	.LVL2:
 269:utils/cmdint.c **** 		if ( ( ch == ' ')||(ch == HT) ) {
  30              		.loc 1 269 0
  31 000c 090053E3 		cmp	r3, #9
  32 0010 20005313 		cmpne	r3, #32
 270:utils/cmdint.c **** 			nStr++;
 271:utils/cmdint.c **** 			CmdRest--;
  33              		.loc 1 271 0
  34 0014 88109FE5 		ldr	r1, .L15
  35              		.loc 1 267 0
  36 0018 012082E2 		add	r2, r2, #1
  37              		.loc 1 269 0
  38 001c 0500001A 		bne	.L3
  39              		.loc 1 271 0
  40 0020 003091E5 		ldr	r3, [r1, #0]
  41              	.LVL3:
  42              		.loc 1 267 0
  43 0024 030052E3 		cmp	r2, #3
  44              		.loc 1 271 0
  45 0028 013043E2 		sub	r3, r3, #1
  46 002c 003081E5 		str	r3, [r1, #0]
  47              		.loc 1 270 0
  48 0030 010080E2 		add	r0, r0, #1
  49              		.loc 1 267 0
  50 0034 F3FFFF1A 		bne	.L2
  51              	.LVL4:
  52              	.L3:
  53 0038 0040A0E3 		mov	r4, #0
  54              	.LVL5:
  55 003c 0450A0E1 		mov	r5, r4
  56              	.LVL6:
  57              	.LVL7:
  58              	.L5:
 272:utils/cmdint.c **** 		} else break;
 273:utils/cmdint.c **** 	}	
 274:utils/cmdint.c **** 		
 275:utils/cmdint.c **** 	for (i = 0; i < 4; i++) {
 276:utils/cmdint.c **** 		ch = *nStr;
 277:utils/cmdint.c **** 		nStr++;
 278:utils/cmdint.c **** 		CmdRest--;
  59              		.loc 1 278 0
  60 0040 5C309FE5 		ldr	r3, .L15
  61              	.LVL8:
  62              		.loc 1 276 0
  63 0044 0120D0E4 		ldrb	r2, [r0], #1	@ zero_extendqisi2
  64              	.LVL9:
  65              		.loc 1 278 0
  66 0048 001093E5 		ldr	r1, [r3, #0]
 279:utils/cmdint.c **** 		if ( ( ch == ' ')||(ch == HT) ) break;
 280:utils/cmdint.c **** 		v = 0;
 281:utils/cmdint.c **** 		if ( (ch>0x2f)&&(ch<0x3a) ) {
  67              		.loc 1 281 0
  68 004c 30C042E2 		sub	ip, r2, #48
  69              		.loc 1 278 0
  70 0050 011041E2 		sub	r1, r1, #1
  71              		.loc 1 279 0
  72 0054 090052E3 		cmp	r2, #9
  73 0058 20005213 		cmpne	r2, #32
  74              		.loc 1 275 0
  75 005c 015085E2 		add	r5, r5, #1
  76              		.loc 1 281 0
  77 0060 FFE00CE2 		and	lr, ip, #255
  78              		.loc 1 278 0
  79 0064 001083E5 		str	r1, [r3, #0]
  80              		.loc 1 279 0
  81 0068 0800000A 		beq	.L6
  82              		.loc 1 281 0
  83 006c 09005EE3 		cmp	lr, #9
  84 0070 0C20A091 		movls	r2, ip
  85              	.LVL10:
  86 0074 0020A083 		movhi	r2, #0
 282:utils/cmdint.c **** 			v = ch-0x30;
 283:utils/cmdint.c **** 		} 
 284:utils/cmdint.c **** 		num = (num*10)+v;
  87              		.loc 1 284 0
  88 0078 0A30A0E3 		mov	r3, #10
 285:utils/cmdint.c **** 		
 286:utils/cmdint.c **** 		if ( CmdRest==0 ) break;
  89              		.loc 1 286 0
  90 007c 000051E3 		cmp	r1, #0
  91              		.loc 1 284 0
  92 0080 932424E0 		mla	r4, r3, r4, r2
  93              		.loc 1 286 0
  94 0084 0100000A 		beq	.L6
  95              		.loc 1 275 0
  96 0088 040055E3 		cmp	r5, #4
  97 008c EBFFFF1A 		bne	.L5
  98              	.LVL11:
  99              	.L6:
 287:utils/cmdint.c **** 	}
 288:utils/cmdint.c **** 	CmdPtr = nStr;	
 100              		.loc 1 288 0
 101 0090 10309FE5 		ldr	r3, .L15+4
 102 0094 000083E5 		str	r0, [r3, #0]
 289:utils/cmdint.c **** 	return num;
 290:utils/cmdint.c **** }		
 103              		.loc 1 290 0
 104 0098 0400A0E1 		mov	r0, r4
 105              	.LVL12:
 106 009c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 107 00a0 1EFF2FE1 		bx	lr
 108              	.L16:
 109              		.align	2
 110              	.L15:
 111 00a4 00000000 		.word	CmdRest
 112 00a8 00000000 		.word	CmdPtr
 113              	.LFE4:
 115              		.align	2
 116              		.global	scanDecNumber
 118              	scanDecNumber:
 119              	.LFB5:
 291:utils/cmdint.c **** 
 292:utils/cmdint.c **** 
 293:utils/cmdint.c **** //--scan string and extract decimal number
 294:utils/cmdint.c **** int scanDecNumber( char* StrBuf, int maxLen, int* number)
 295:utils/cmdint.c **** {
 120              		.loc 1 295 0
 121              		@ Function supports interworking.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              	.LVL13:
 125 00ac 04E02DE5 		str	lr, [sp, #-4]!
 126              	.LCFI1:
 296:utils/cmdint.c **** 	int i   = 0;
 297:utils/cmdint.c **** 	*number = 0;
 127              		.loc 1 297 0
 128 00b0 0030A0E3 		mov	r3, #0
 129              		.loc 1 295 0
 130 00b4 02E0A0E1 		mov	lr, r2
 131 00b8 0020A0E1 		mov	r2, r0
 132              	.LVL14:
 133              		.loc 1 297 0
 134 00bc 0300A0E1 		mov	r0, r3
 135              	.LVL15:
 136 00c0 00308EE5 		str	r3, [lr, #0]
 137 00c4 000000EA 		b	.L18
 138              	.L19:
 298:utils/cmdint.c **** 	while ( (StrBuf[i] == ' ')||(StrBuf[i] == '.') ) { i++; maxLen++; }
 139              		.loc 1 298 0
 140 00c8 010080E2 		add	r0, r0, #1
 141              	.L18:
 142 00cc 0230D0E7 		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 143 00d0 2E0053E3 		cmp	r3, #46
 144 00d4 20005313 		cmpne	r3, #32
 145 00d8 FAFFFF0A 		beq	.L19
 146              		.loc 1 295 0
 147 00dc 001081E0 		add	r1, r1, r0
 148              	.LVL16:
 149 00e0 00C082E0 		add	ip, r2, r0
 150 00e4 080000EA 		b	.L21
 151              	.L22:
 299:utils/cmdint.c **** 	while ((StrBuf[i] >= '0') && (StrBuf[i] <= '9') && (i < maxLen)) {
 300:utils/cmdint.c **** 		*number  *= 10;
 152              		.loc 1 300 0
 153 00e8 00209EE5 		ldr	r2, [lr, #0]
 154              	.LVL17:
 155 00ec 0A30A0E3 		mov	r3, #10
 156 00f0 930202E0 		mul	r2, r3, r2
 157 00f4 00208EE5 		str	r2, [lr, #0]
 301:utils/cmdint.c **** 		*number  += (StrBuf[i] & 0x0000000F);
 158              		.loc 1 301 0
 159 00f8 01305CE5 		ldrb	r3, [ip, #-1]	@ zero_extendqisi2
 160 00fc 0F3003E2 		and	r3, r3, #15
 161 0100 032082E0 		add	r2, r2, r3
 162 0104 00208EE5 		str	r2, [lr, #0]
 302:utils/cmdint.c **** 		i++;
 163              		.loc 1 302 0
 164 0108 010080E2 		add	r0, r0, #1
 165              	.LVL18:
 166              	.L21:
 167              		.loc 1 299 0
 168 010c 0130DCE4 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 169 0110 303043E2 		sub	r3, r3, #48
 170 0114 090053E3 		cmp	r3, #9
 171 0118 0030A083 		movhi	r3, #0
 172 011c 0130A093 		movls	r3, #1
 173 0120 010050E1 		cmp	r0, r1
 174 0124 0030A0A3 		movge	r3, #0
 175 0128 000053E3 		cmp	r3, #0
 176 012c EDFFFF1A 		bne	.L22
 303:utils/cmdint.c **** 	}
 304:utils/cmdint.c **** 	return i;
 305:utils/cmdint.c **** }
 177              		.loc 1 305 0
 178 0130 04E09DE4 		ldr	lr, [sp], #4
 179 0134 1EFF2FE1 		bx	lr
 180              	.LFE5:
 182              		.align	2
 183              		.global	RdUi8Seq
 185              	RdUi8Seq:
 186              	.LFB6:
 306:utils/cmdint.c **** 
 307:utils/cmdint.c **** 
 308:utils/cmdint.c **** int	RdUi8Seq( char* StBuf, int Len,  uint8* numBuf )
 309:utils/cmdint.c **** {
 187              		.loc 1 309 0
 188              		@ Function supports interworking.
 189              		@ args = 0, pretend = 0, frame = 16
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              	.LVL19:
 192 0138 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 193              	.LCFI2:
 194 013c 00E0A0E3 		mov	lr, #0
 195              	.LVL20:
 196 0140 10D04DE2 		sub	sp, sp, #16
 197              	.LCFI3:
 198              		.loc 1 309 0
 199 0144 0160A0E1 		mov	r6, r1
 200 0148 0270A0E1 		mov	r7, r2
 201 014c 0040A0E1 		mov	r4, r0
 202              	.LVL21:
 203 0150 0E50A0E1 		mov	r5, lr
 204              	.LVL22:
 205 0154 0EC0A0E1 		mov	ip, lr
 206              	.LVL23:
 207 0158 080000EA 		b	.L26
 208              	.LVL24:
 209              	.L27:
 310:utils/cmdint.c **** 	int j = 0;
 311:utils/cmdint.c **** 	int ll, v;
 312:utils/cmdint.c **** 	uint8 OKFlag = 0;
 313:utils/cmdint.c **** 	uint8	tbuf[10];
 314:utils/cmdint.c **** 	char* ibufp;
 315:utils/cmdint.c **** 	
 316:utils/cmdint.c **** 	ll = 0;
 317:utils/cmdint.c **** 	ibufp = StBuf;
 318:utils/cmdint.c **** 	for ( j=0; j<Len; j++ ) {
 319:utils/cmdint.c **** 		ll = scanDecNumber( ibufp, 3, &v);
 210              		.loc 1 319 0
 211 015c FEFFFFEB 		bl	scanDecNumber
 212              	.LVL25:
 320:utils/cmdint.c **** 		if (ll == 0) { 
 213              		.loc 1 320 0
 214 0160 00E050E2 		subs	lr, r0, #0
 215              	.LVL26:
 321:utils/cmdint.c **** 			OKFlag = 0; 
 322:utils/cmdint.c **** 			break; 
 323:utils/cmdint.c **** 		}
 324:utils/cmdint.c **** 		tbuf[j] = (uint8)(v&0xff);
 325:utils/cmdint.c **** 		ibufp += ll;
 216              		.loc 1 325 0
 217 0164 0E4084E0 		add	r4, r4, lr
 218              		.loc 1 318 0
 219 0168 01C0A0E3 		mov	ip, #1
 220              	.LVL27:
 221              		.loc 1 320 0
 222 016c 1300000A 		beq	.L28
 223              		.loc 1 324 0
 224 0170 0C209DE5 		ldr	r2, [sp, #12]
 225 0174 02308DE2 		add	r3, sp, #2
 226 0178 0320C5E7 		strb	r2, [r5, r3]
 227              	.LVL28:
 228              		.loc 1 318 0
 229 017c 0C5085E0 		add	r5, r5, ip
 230              	.LVL29:
 231              	.L26:
 232 0180 060055E1 		cmp	r5, r6
 233              		.loc 1 319 0
 234 0184 0400A0E1 		mov	r0, r4
 235              	.LVL30:
 236 0188 0310A0E3 		mov	r1, #3
 237 018c 0C208DE2 		add	r2, sp, #12
 238              	.LVL31:
 239              		.loc 1 318 0
 240 0190 F1FFFFBA 		blt	.L27
 241              	.LVL32:
 326:utils/cmdint.c **** 		OKFlag = 1;
 327:utils/cmdint.c **** 	}
 328:utils/cmdint.c **** 	if ( OKFlag == 0 ) return 0;
 242              		.loc 1 328 0
 243 0194 00005CE3 		cmp	ip, #0
 244 0198 0CE0A001 		moveq	lr, ip
 245 019c 0020A013 		movne	r2, #0
 246              	.LVL33:
 247 01a0 0400001A 		bne	.L33
 248 01a4 050000EA 		b	.L28
 249              	.L34:
 329:utils/cmdint.c **** 	 
 330:utils/cmdint.c **** 	for ( j=0; j<Len; j++ ) numBuf[j] = tbuf[j];
 250              		.loc 1 330 0
 251 01a8 02308DE2 		add	r3, sp, #2
 252 01ac 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 253 01b0 0730C2E7 		strb	r3, [r2, r7]
 254 01b4 012082E2 		add	r2, r2, #1
 255              	.L33:
 256 01b8 060052E1 		cmp	r2, r6
 257 01bc F9FFFFBA 		blt	.L34
 258              	.LVL34:
 259              	.L28:
 331:utils/cmdint.c **** 	
 332:utils/cmdint.c **** 	return ll;
 333:utils/cmdint.c **** }
 260              		.loc 1 333 0
 261 01c0 0E00A0E1 		mov	r0, lr
 262 01c4 10D08DE2 		add	sp, sp, #16
 263 01c8 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 264 01cc 1EFF2FE1 		bx	lr
 265              	.LFE6:
 267              		.align	2
 268              		.global	LogInit
 270              	LogInit:
 271              	.LFB10:
 334:utils/cmdint.c **** 
 335:utils/cmdint.c **** /***********
 336:utils/cmdint.c **** EEPROM MAC_IP Store Record
 337:utils/cmdint.c **** 	MAC - 6bytes addr: 0x00-0x05
 338:utils/cmdint.c **** 	IP  - 4bytes addr: 0x08-0x0b
 339:utils/cmdint.c **** 	GAR - 4bytes addr: 0x10-0x13
 340:utils/cmdint.c **** 	SN  - 4bytes addr: 0x18-0x1b
 341:utils/cmdint.c **** 	Port- 2bytes addr: 0x20-0x21
 342:utils/cmdint.c **** ***********/
 343:utils/cmdint.c **** int InitEE_IP(void)
 344:utils/cmdint.c **** {
 345:utils/cmdint.c **** 	uint8 	mac_ee[] = {0x06,0x44,0x53,0x01,0x01,0x02,0,0};      
 346:utils/cmdint.c **** 	uint8 	ip_ee[] = {192,168,0,41,0,0,0,0};
 347:utils/cmdint.c **** 	uint8 	gar_ee[] = {192,168,0,1,0,0,0,0};
 348:utils/cmdint.c **** 	uint8 	sn_ee[] = {255,255,255,1,0,0,0,0};
 349:utils/cmdint.c **** 	uint8		port_ee[] = {80,0};
 350:utils/cmdint.c **** 	
 351:utils/cmdint.c **** 	memcpy ( &outBuf[(0x00+2)], mac_ee, 8 );
 352:utils/cmdint.c **** 	memcpy ( &outBuf[(0x08+2)], ip_ee, 8 );
 353:utils/cmdint.c **** 	memcpy ( &outBuf[(0x10+2)], gar_ee, 8 );
 354:utils/cmdint.c **** 	memcpy ( &outBuf[(0x18+2)], sn_ee, 8 );
 355:utils/cmdint.c **** 	memcpy ( &outBuf[(0x20+2)], port_ee, 2 );
 356:utils/cmdint.c **** 	if ( eepromWrite(0, outBuf, 0x22) != 0 ) {
 357:utils/cmdint.c **** 		printf("\n\rInitEE Err1");
 358:utils/cmdint.c **** 		return -1;	//error
 359:utils/cmdint.c **** 	}
 360:utils/cmdint.c **** 	
 361:utils/cmdint.c **** 	return 0;
 362:utils/cmdint.c **** 	
 363:utils/cmdint.c **** }
 364:utils/cmdint.c **** 
 365:utils/cmdint.c **** void DumpEE(uint16 addr, int len)
 366:utils/cmdint.c **** {	
 367:utils/cmdint.c **** 	int r, i, idx, sLen;
 368:utils/cmdint.c **** 	sLen = len;	
 369:utils/cmdint.c **** 	
 370:utils/cmdint.c **** 	r = eepromRead(addr, outBuf, len);
 371:utils/cmdint.c **** 	
 372:utils/cmdint.c **** 	idx = 0;
 373:utils/cmdint.c **** 	while ( idx < sLen ) {
 374:utils/cmdint.c **** 		printf("%03d  ", (addr+idx) );
 375:utils/cmdint.c **** 		for (i=0; i<16; i++) printf("%02x ", outBuf[idx+i]);
 376:utils/cmdint.c **** 		printf("  ");
 377:utils/cmdint.c **** 		for (i=0; i<16; i++) printf("%c", outBuf[idx+i]);
 378:utils/cmdint.c **** 		idx += 16;
 379:utils/cmdint.c **** 		if (idx<sLen) printf("\n\r");
 380:utils/cmdint.c **** 	}
 381:utils/cmdint.c **** }	
 382:utils/cmdint.c **** 
 383:utils/cmdint.c **** 
 384:utils/cmdint.c **** void ClearEE(void)
 385:utils/cmdint.c **** {
 386:utils/cmdint.c **** 	int		i;
 387:utils/cmdint.c **** 	uint16 addr;
 388:utils/cmdint.c **** 	
 389:utils/cmdint.c **** 	addr = 0;
 390:utils/cmdint.c **** 	memset ( &outBuf[2], 0xff, 64 );
 391:utils/cmdint.c **** 	for (i=0; i<6; i++ )	{	// i<<128
 392:utils/cmdint.c **** 		eepromWrite( addr, outBuf, 64 );
 393:utils/cmdint.c **** 		delay(100000);
 394:utils/cmdint.c **** 		addr += 64;
 395:utils/cmdint.c **** 	}
 396:utils/cmdint.c **** }
 397:utils/cmdint.c **** 
 398:utils/cmdint.c **** 	
 399:utils/cmdint.c **** void	LogInit(void)
 400:utils/cmdint.c **** {
 272              		.loc 1 400 0
 273              		@ Function supports interworking.
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 277 01d0 20209FE5 		ldr	r2, .L42
 278              		@ lr needed for prologue
 279              	.L37:
 401:utils/cmdint.c **** 	int i;
 402:utils/cmdint.c **** 	
 403:utils/cmdint.c **** 	for (i=0; i<LOGMAX; i++ ) {
 404:utils/cmdint.c **** 		LogData[i] = 0x1111;
 280              		.loc 1 404 0
 281 01d4 20309FE5 		ldr	r3, .L42+4
 282 01d8 B230C2E0 		strh	r3, [r2], #2	@ movhi
 283              		.loc 1 403 0
 284 01dc 1C309FE5 		ldr	r3, .L42+8
 285 01e0 030052E1 		cmp	r2, r3
 286 01e4 FAFFFF1A 		bne	.L37
 405:utils/cmdint.c **** 	}
 406:utils/cmdint.c **** 	
 407:utils/cmdint.c **** 	LogCnt = 0;
 287              		.loc 1 407 0
 288 01e8 14309FE5 		ldr	r3, .L42+12
 289 01ec 0020A0E3 		mov	r2, #0
 290 01f0 002083E5 		str	r2, [r3, #0]
 408:utils/cmdint.c **** }
 291              		.loc 1 408 0
 292 01f4 1EFF2FE1 		bx	lr
 293              	.L43:
 294              		.align	2
 295              	.L42:
 296 01f8 00000000 		.word	LogData
 297 01fc 11110000 		.word	4369
 298 0200 60090000 		.word	LogData+2400
 299 0204 00000000 		.word	LogCnt
 300              	.LFE10:
 302              		.align	2
 303              		.global	LogWr
 305              	LogWr:
 306              	.LFB11:
 409:utils/cmdint.c **** 
 410:utils/cmdint.c **** 
 411:utils/cmdint.c **** void	LogWr( uint16 data )
 412:utils/cmdint.c **** {
 307              		.loc 1 412 0
 308              		@ Function supports interworking.
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312              	.LVL35:
 413:utils/cmdint.c **** 	if ( LogCnt == 0 ) LogTim0 = miliSec;
 313              		.loc 1 413 0
 314 0208 44309FE5 		ldr	r3, .L50
 315 020c 00C093E5 		ldr	ip, [r3, #0]
 316              		.loc 1 412 0
 317 0210 0008A0E1 		mov	r0, r0, asl #16
 318              	.LVL36:
 319              		.loc 1 413 0
 320 0214 00005CE3 		cmp	ip, #0
 321              		.loc 1 412 0
 322              		@ lr needed for prologue
 323              		.loc 1 412 0
 324 0218 2008A0E1 		mov	r0, r0, lsr #16
 325              	.LVL37:
 326              		.loc 1 413 0
 327 021c 34309F05 		ldreq	r3, .L50+4
 328 0220 00209305 		ldreq	r2, [r3, #0]
 329 0224 30309F05 		ldreq	r3, .L50+8
 330 0228 00208305 		streq	r2, [r3, #0]
 331 022c 0100000A 		beq	.L47
 332              	.L45:
 414:utils/cmdint.c **** 	
 415:utils/cmdint.c **** 	if ( LogCnt < LOGMAX ) {
 333              		.loc 1 415 0
 334 0230 4B0E5CE3 		cmp	ip, #1200
 335 0234 1EFF2FA1 		bxge	lr
 336              	.L47:
 416:utils/cmdint.c **** 		LogData[LogCnt] = data;
 337              		.loc 1 416 0
 338 0238 20309FE5 		ldr	r3, .L50+12
 339 023c 8C20A0E1 		mov	r2, ip, asl #1
 340 0240 B30082E1 		strh	r0, [r2, r3]	@ movhi
 417:utils/cmdint.c **** 		LogCnt++;
 341              		.loc 1 417 0
 342 0244 08309FE5 		ldr	r3, .L50
 343 0248 01108CE2 		add	r1, ip, #1
 344 024c 001083E5 		str	r1, [r3, #0]
 345 0250 1EFF2FE1 		bx	lr
 346              	.L51:
 347              		.align	2
 348              	.L50:
 349 0254 00000000 		.word	LogCnt
 350 0258 00000000 		.word	miliSec
 351 025c 00000000 		.word	LogTim0
 352 0260 00000000 		.word	LogData
 353              	.LFE11:
 355              		.align	2
 356              		.global	LogWrTim
 358              	LogWrTim:
 359              	.LFB12:
 418:utils/cmdint.c **** 	}
 419:utils/cmdint.c **** }
 420:utils/cmdint.c **** 
 421:utils/cmdint.c **** void	LogWrTim( void )
 422:utils/cmdint.c **** {
 360              		.loc 1 422 0
 361              		@ Function supports interworking.
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 423:utils/cmdint.c **** 	if ( LogCnt < LOGMAX ) {
 365              		.loc 1 423 0
 366 0264 3CC09FE5 		ldr	ip, .L56
 367 0268 00309CE5 		ldr	r3, [ip, #0]
 368 026c 4B0E53E3 		cmp	r3, #1200
 369              		.loc 1 422 0
 370              		@ lr needed for prologue
 371              	.LBB2:
 424:utils/cmdint.c **** 		uint16 td;
 425:utils/cmdint.c **** 		td = ((miliSec-LogTim0)&0x3fff)|0xc000;
 426:utils/cmdint.c **** 		LogData[LogCnt] = td;
 427:utils/cmdint.c **** 		LogCnt++;
 372              		.loc 1 427 0
 373 0270 010083E2 		add	r0, r3, #1
 374              		.loc 1 426 0
 375 0274 8310A0E1 		mov	r1, r3, asl #1
 376              	.LBE2:
 377              		.loc 1 423 0
 378 0278 1EFF2FA1 		bxge	lr
 379              	.LBB3:
 380              		.loc 1 426 0
 381 027c 28309FE5 		ldr	r3, .L56+4
 382 0280 28209FE5 		ldr	r2, .L56+8
 383 0284 003093E5 		ldr	r3, [r3, #0]
 384 0288 002092E5 		ldr	r2, [r2, #0]
 385 028c 033062E0 		rsb	r3, r2, r3
 386 0290 0339E0E1 		mvn	r3, r3, asl #18
 387 0294 18209FE5 		ldr	r2, .L56+12
 388 0298 2339E0E1 		mvn	r3, r3, lsr #18
 389 029c B23081E1 		strh	r3, [r1, r2]	@ movhi
 390              		.loc 1 427 0
 391 02a0 00008CE5 		str	r0, [ip, #0]
 392 02a4 1EFF2FE1 		bx	lr
 393              	.L57:
 394              		.align	2
 395              	.L56:
 396 02a8 00000000 		.word	LogCnt
 397 02ac 00000000 		.word	miliSec
 398 02b0 00000000 		.word	LogTim0
 399 02b4 00000000 		.word	LogData
 400              	.LBE3:
 401              	.LFE12:
 403              		.section	.rodata.str1.4,"aMS",%progbits,1
 404              		.align	2
 405              	.LC0:
 406 0000 0A0D4C6F 		.ascii	"\012\015LogCnt= %d Tim=%d.%d \000"
 406      67436E74 
 406      3D202564 
 406      2054696D 
 406      3D25642E 
 407              		.global	__udivsi3
 408              		.global	__umodsi3
 409              		.align	2
 410              	.LC1:
 411 0018 0A0D00   		.ascii	"\012\015\000"
 412 001b 00       		.align	2
 413              	.LC2:
 414 001c 25303478 		.ascii	"%04x \000"
 414      2000
 415 0022 0000     		.align	2
 416              	.LC3:
 417 0024 0A0D2533 		.ascii	"\012\015%3d   %04x  \000"
 417      64202020 
 417      25303478 
 417      202000
 418 0033 00       		.align	2
 419              	.LC4:
 420 0034 20202020 		.ascii	"     \000"
 420      2000
 421 003a 0000     		.align	2
 422              	.LC5:
 423 003c 2064743D 		.ascii	" dt= %d\000"
 423      20256400 
 424              		.text
 425              		.align	2
 426              		.global	LogDisplay
 428              	LogDisplay:
 429              	.LFB13:
 428:utils/cmdint.c **** 	}
 429:utils/cmdint.c **** }
 430:utils/cmdint.c **** 
 431:utils/cmdint.c **** uint16 LogRMark[] = { 0x11, 0x20, 0x21, 0x22, 0x23, 
 432:utils/cmdint.c **** 											0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
 433:utils/cmdint.c **** 											0x31, 0x32, 0x33, 0x35,
 434:utils/cmdint.c **** 											0x41, 0x42, 0x45, 0x47, 0x48, 0x49,
 435:utils/cmdint.c **** 											0x50, 0x51, 0x56,
 436:utils/cmdint.c **** 											0x70, 0x71, 0x77, 0x78, 0x88,
 437:utils/cmdint.c **** 										 	0x551, 0x555,
 438:utils/cmdint.c **** 										 	0x771, 0x772, 0x773, 0x774,
 439:utils/cmdint.c **** 										 	0 };
 440:utils/cmdint.c **** 										  
 441:utils/cmdint.c **** int	LogRLen[] = { 3, 3, 3, 3, 3,
 442:utils/cmdint.c **** 									3, 3, 3, 3, 4, 4,
 443:utils/cmdint.c **** 									4, 5, 4, 3,
 444:utils/cmdint.c **** 									3, 4, 3, 3, 3, 2,
 445:utils/cmdint.c **** 									3, 3, 2,
 446:utils/cmdint.c **** 									3, 3, 3, 5, 3,
 447:utils/cmdint.c **** 									6, 3,
 448:utils/cmdint.c **** 									5, 1, 1, 5 };
 449:utils/cmdint.c **** 										 
 450:utils/cmdint.c **** void LogDisplay( void )
 451:utils/cmdint.c **** {
 430              		.loc 1 451 0
 431              		@ Function supports interworking.
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 452:utils/cmdint.c **** 	int i, j, cnt, c1, l;
 453:utils/cmdint.c **** 	uint16 v0, v1;
 454:utils/cmdint.c **** 	
 455:utils/cmdint.c **** 	printf ( "\n\rLogCnt= %d Tim=%d.%d ", LogCnt, (int)(miliSec/1000),(int)(miliSec%1000) );
 434              		.loc 1 455 0
 435 02b8 BC319FE5 		ldr	r3, .L91
 436              		.loc 1 451 0
 437 02bc F0472DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 438              	.LCFI4:
 439              		.loc 1 455 0
 440 02c0 004093E5 		ldr	r4, [r3, #0]
 441 02c4 FA1FA0E3 		mov	r1, #1000
 442 02c8 0400A0E1 		mov	r0, r4
 443 02cc FEFFFFEB 		bl	__udivsi3
 444 02d0 FA1FA0E3 		mov	r1, #1000
 445 02d4 0050A0E1 		mov	r5, r0
 446 02d8 0400A0E1 		mov	r0, r4
 447 02dc FEFFFFEB 		bl	__umodsi3
 448 02e0 98419FE5 		ldr	r4, .L91+4
 449 02e4 0030A0E1 		mov	r3, r0
 450 02e8 0520A0E1 		mov	r2, r5
 451 02ec 90019FE5 		ldr	r0, .L91+8
 452 02f0 001094E5 		ldr	r1, [r4, #0]
 453 02f4 FEFFFFEB 		bl	printf
 456:utils/cmdint.c **** 	if ( LogCnt == 0 ) {
 454              		.loc 1 456 0
 455 02f8 007094E5 		ldr	r7, [r4, #0]
 456              	.LVL38:
 457 02fc 000057E3 		cmp	r7, #0
 458 0300 5B00000A 		beq	.L87
 457:utils/cmdint.c **** 		return;
 458:utils/cmdint.c **** 	}
 459:utils/cmdint.c **** 
 460:utils/cmdint.c **** 	cnt = LogCnt;
 461:utils/cmdint.c **** 	j = 0;
 462:utils/cmdint.c **** 	l = 1;
 463:utils/cmdint.c **** 
 464:utils/cmdint.c **** 	if ( CmdRest==0 ) {
 459              		.loc 1 464 0
 460 0304 7C319FE5 		ldr	r3, .L91+12
 461 0308 003093E5 		ldr	r3, [r3, #0]
 462 030c 000053E3 		cmp	r3, #0
 463 0310 00A0A013 		movne	sl, #0
 464              	.LVL39:
 465 0314 0190A013 		movne	r9, #1
 466              	.LVL40:
 467 0318 0360A001 		moveq	r6, r3
 468              	.LVL41:
 469 031c 0F00000A 		beq	.L64
 470 0320 4F0000EA 		b	.L63
 471              	.LVL42:
 472              	.L65:
 465:utils/cmdint.c **** 		while ( cnt > 0 ) {
 466:utils/cmdint.c **** 			printf("\n\r");
 473              		.loc 1 466 0
 474 0324 60019FE5 		ldr	r0, .L91+16
 475 0328 FEFFFFEB 		bl	printf
 476 032c 5C319FE5 		ldr	r3, .L91+20
 477 0330 0040A0E3 		mov	r4, #0
 478 0334 865083E0 		add	r5, r3, r6, asl #1
 479              	.L66:
 467:utils/cmdint.c **** 			for ( i=0; i<10; i++ ) {
 468:utils/cmdint.c **** 				printf("%04x ", LogData[j]);
 480              		.loc 1 468 0
 481 0338 B010D5E1 		ldrh	r1, [r5, #0]
 482 033c 50019FE5 		ldr	r0, .L91+24
 483 0340 FEFFFFEB 		bl	printf
 469:utils/cmdint.c **** 				j++;
 470:utils/cmdint.c **** 				cnt--;
 471:utils/cmdint.c **** 				if ( cnt==0 ) break;
 484              		.loc 1 471 0
 485 0344 017057E2 		subs	r7, r7, #1
 486              		.loc 1 467 0
 487 0348 014084E2 		add	r4, r4, #1
 488 034c 025085E2 		add	r5, r5, #2
 489              		.loc 1 469 0
 490 0350 016086E2 		add	r6, r6, #1
 491              		.loc 1 471 0
 492 0354 4400000A 		beq	.L68
 493              		.loc 1 467 0
 494 0358 0A0054E3 		cmp	r4, #10
 495 035c F5FFFF1A 		bne	.L66
 496              	.L64:
 497              		.loc 1 465 0
 498 0360 000057E3 		cmp	r7, #0
 499 0364 EEFFFFCA 		bgt	.L65
 500 0368 3F0000EA 		b	.L68
 501              	.LVL43:
 502              	.L69:
 472:utils/cmdint.c **** 			}
 473:utils/cmdint.c **** 		}
 474:utils/cmdint.c **** 	} else {
 475:utils/cmdint.c **** 		while ( cnt > 0 ) {
 476:utils/cmdint.c **** 			v0 = LogData[j++];
 503              		.loc 1 476 0
 504 036c 1C319FE5 		ldr	r3, .L91+20
 505 0370 8A20A0E1 		mov	r2, sl, asl #1
 506 0374 B38092E1 		ldrh	r8, [r2, r3]
 477:utils/cmdint.c **** 			printf("\n\r%3d   %04x  ", l++, v0);
 507              		.loc 1 477 0
 508 0378 0910A0E1 		mov	r1, r9
 509              	.LVL44:
 510 037c 0820A0E1 		mov	r2, r8
 511 0380 10019FE5 		ldr	r0, .L91+28
 512 0384 FEFFFFEB 		bl	printf
 513 0388 0C219FE5 		ldr	r2, .L91+32
 514              		.loc 1 476 0
 515 038c 01A08AE2 		add	sl, sl, #1
 516              		.loc 1 477 0
 517 0390 0010A0E3 		mov	r1, #0
 518              	.LVL45:
 519 0394 000000EA 		b	.L70
 520              	.L71:
 478:utils/cmdint.c **** 			i = 0;	
 479:utils/cmdint.c **** 			while ( (LogRMark[i] > 0) && (LogRMark[i] != v0) ) i++;
 521              		.loc 1 479 0
 522 0398 011081E2 		add	r1, r1, #1
 523              	.L70:
 524 039c B030D2E1 		ldrh	r3, [r2, #0]
 525 03a0 000053E3 		cmp	r3, #0
 526 03a4 022082E2 		add	r2, r2, #2
 527 03a8 2A00000A 		beq	.L72
 528 03ac 080053E1 		cmp	r3, r8
 529 03b0 F8FFFF1A 		bne	.L71
 480:utils/cmdint.c **** 			if ( LogRMark[i]==0 ) c1 = 1; else c1 = LogRLen[i];
 530              		.loc 1 480 0
 531 03b4 E4309FE5 		ldr	r3, .L91+36
 532 03b8 016193E7 		ldr	r6, [r3, r1, asl #2]
 533              	.LVL46:
 481:utils/cmdint.c **** 			if ( c1 > 1 )	{
 534              		.loc 1 481 0
 535 03bc 010056E3 		cmp	r6, #1
 536 03c0 250000DA 		ble	.L76
 537 03c4 C4309FE5 		ldr	r3, .L91+20
 538 03c8 0140A0E3 		mov	r4, #1
 539              	.LVL47:
 540 03cc 8A5083E0 		add	r5, r3, sl, asl #1
 541              	.LVL48:
 542 03d0 010000EA 		b	.L78
 543              	.L79:
 482:utils/cmdint.c **** 				for ( i=1; i<(c1-1); i++ ) printf( "%04x ", LogData[j++] );
 544              		.loc 1 482 0
 545 03d4 B21055E1 		ldrh	r1, [r5, #-2]
 546              	.LVL49:
 547 03d8 FEFFFFEB 		bl	printf
 548              	.LVL50:
 549              	.L78:
 550 03dc 014084E2 		add	r4, r4, #1
 551 03e0 060054E1 		cmp	r4, r6
 552 03e4 A8009FE5 		ldr	r0, .L91+24
 553 03e8 025085E2 		add	r5, r5, #2
 554 03ec F8FFFF1A 		bne	.L79
 555 03f0 06308AE0 		add	r3, sl, r6
 556 03f4 023043E2 		sub	r3, r3, #2
 557              	.LVL51:
 483:utils/cmdint.c **** 				v1 = LogData[j++];
 558              		.loc 1 483 0
 559 03f8 90209FE5 		ldr	r2, .L91+20
 560 03fc 8310A0E1 		mov	r1, r3, asl #1
 561              	.LVL52:
 484:utils/cmdint.c **** 				// TimeDelta Marker ?
 485:utils/cmdint.c **** 				if ( (v0<0x75) && ((v1&0xC000)==0xC000) ) {	
 562              		.loc 1 485 0
 563 0400 740058E3 		cmp	r8, #116
 564              		.loc 1 483 0
 565 0404 B25091E1 		ldrh	r5, [r1, r2]
 566              	.LVL53:
 567 0408 01A083E2 		add	sl, r3, #1
 568              		.loc 1 485 0
 569 040c 0D00008A 		bhi	.L81
 570 0410 033905E2 		and	r3, r5, #49152
 571              	.LVL54:
 572 0414 030953E3 		cmp	r3, #49152
 573 0418 0040A003 		moveq	r4, #0
 574              	.LVL55:
 575 041c 0100000A 		beq	.L84
 576 0420 080000EA 		b	.L81
 577              	.L85:
 486:utils/cmdint.c **** 					v1 = v1&0x3FFF;
 487:utils/cmdint.c **** 					for ( i=0; i<(4-c1); i++ ) printf("     ");
 578              		.loc 1 487 0
 579 0424 FEFFFFEB 		bl	printf
 580              	.L84:
 581 0428 043066E2 		rsb	r3, r6, #4
 582 042c 030054E1 		cmp	r4, r3
 583 0430 6C009FE5 		ldr	r0, .L91+40
 584 0434 014084E2 		add	r4, r4, #1
 585 0438 F9FFFFBA 		blt	.L85
 488:utils/cmdint.c **** 					printf( " dt= %d", v1 );
 586              		.loc 1 488 0
 587 043c 64009FE5 		ldr	r0, .L91+44
 588 0440 0319C5E3 		bic	r1, r5, #49152
 589 0444 010000EA 		b	.L90
 590              	.LVL56:
 591              	.L81:
 489:utils/cmdint.c **** 				}
 490:utils/cmdint.c **** 				else printf( "%04x ", v1 );
 592              		.loc 1 490 0
 593 0448 44009FE5 		ldr	r0, .L91+24
 594 044c 0510A0E1 		mov	r1, r5
 595              	.L90:
 596 0450 FEFFFFEB 		bl	printf
 597              	.LVL57:
 598 0454 000000EA 		b	.L76
 599              	.LVL58:
 600              	.L72:
 601 0458 0160A0E3 		mov	r6, #1
 602              	.LVL59:
 603              	.L76:
 491:utils/cmdint.c **** 			}
 492:utils/cmdint.c **** 			cnt = cnt - c1;
 604              		.loc 1 492 0
 605 045c 077066E0 		rsb	r7, r6, r7
 606              		.loc 1 477 0
 607 0460 019089E2 		add	r9, r9, #1
 608              	.LVL60:
 609              	.L63:
 610              		.loc 1 475 0
 611 0464 000057E3 		cmp	r7, #0
 612 0468 BFFFFFCA 		bgt	.L69
 613              	.LVL61:
 614              	.L68:
 493:utils/cmdint.c **** 		}
 494:utils/cmdint.c **** 	}
 495:utils/cmdint.c **** 	LogInit();
 496:utils/cmdint.c **** }
 615              		.loc 1 496 0
 616 046c F047BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 617              		.loc 1 495 0
 618 0470 FEFFFFEA 		b	LogInit
 619              	.LVL62:
 620              	.LVL63:
 621              	.L87:
 622              		.loc 1 496 0
 623 0474 F047BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 624 0478 1EFF2FE1 		bx	lr
 625              	.L92:
 626              		.align	2
 627              	.L91:
 628 047c 00000000 		.word	miliSec
 629 0480 00000000 		.word	LogCnt
 630 0484 00000000 		.word	.LC0
 631 0488 00000000 		.word	CmdRest
 632 048c 18000000 		.word	.LC1
 633 0490 00000000 		.word	LogData
 634 0494 1C000000 		.word	.LC2
 635 0498 24000000 		.word	.LC3
 636 049c 00000000 		.word	LogRMark
 637 04a0 00000000 		.word	LogRLen
 638 04a4 34000000 		.word	.LC4
 639 04a8 3C000000 		.word	.LC5
 640              	.LFE13:
 642              		.align	2
 643              		.global	ClearEE
 645              	ClearEE:
 646              	.LFB9:
 647              		.loc 1 385 0
 648              		@ Function supports interworking.
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651 04ac 10402DE9 		stmfd	sp!, {r4, lr}
 652              	.LCFI5:
 653              		.loc 1 390 0
 654 04b0 38009FE5 		ldr	r0, .L99
 655 04b4 FF10A0E3 		mov	r1, #255
 656 04b8 4020A0E3 		mov	r2, #64
 657 04bc FEFFFFEB 		bl	memset
 658 04c0 0040A0E3 		mov	r4, #0
 659              	.L94:
 660              		.loc 1 392 0
 661 04c4 0400A0E1 		mov	r0, r4
 662 04c8 24109FE5 		ldr	r1, .L99+4
 663 04cc 4020A0E3 		mov	r2, #64
 664 04d0 FEFFFFEB 		bl	eepromWrite
 665              		.loc 1 393 0
 666 04d4 404084E2 		add	r4, r4, #64
 667 04d8 18009FE5 		ldr	r0, .L99+8
 668 04dc FEFFFFEB 		bl	delay
 669              		.loc 1 391 0
 670 04e0 060D54E3 		cmp	r4, #384
 671 04e4 F6FFFF1A 		bne	.L94
 672              		.loc 1 396 0
 673 04e8 1040BDE8 		ldmfd	sp!, {r4, lr}
 674 04ec 1EFF2FE1 		bx	lr
 675              	.L100:
 676              		.align	2
 677              	.L99:
 678 04f0 02000000 		.word	outBuf+2
 679 04f4 00000000 		.word	outBuf
 680 04f8 A0860100 		.word	100000
 681              	.LFE9:
 683              		.section	.rodata.str1.4
 684              		.align	2
 685              	.LC6:
 686 0044 25303364 		.ascii	"%03d  \000"
 686      202000
 687 004b 00       		.align	2
 688              	.LC7:
 689 004c 25303278 		.ascii	"%02x \000"
 689      2000
 690 0052 0000     		.align	2
 691              	.LC8:
 692 0054 202000   		.ascii	"  \000"
 693              		.text
 694              		.align	2
 695              		.global	DumpEE
 697              	DumpEE:
 698              	.LFB8:
 699              		.loc 1 366 0
 700              		@ Function supports interworking.
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              	.LVL64:
 704 04fc 0008A0E1 		mov	r0, r0, asl #16
 705              	.LVL65:
 706 0500 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 707              	.LCFI6:
 708              		.loc 1 366 0
 709 0504 0170A0E1 		mov	r7, r1
 710 0508 2088A0E1 		mov	r8, r0, lsr #16
 711              	.LVL66:
 712              		.loc 1 370 0
 713 050c 0800A0E1 		mov	r0, r8
 714 0510 88109FE5 		ldr	r1, .L115
 715              	.LVL67:
 716 0514 0720A0E1 		mov	r2, r7
 717 0518 FEFFFFEB 		bl	eepromRead
 718 051c 0060A0E3 		mov	r6, #0
 719              	.LVL68:
 720 0520 1A0000EA 		b	.L102
 721              	.LVL69:
 722              	.L103:
 723              		.loc 1 374 0
 724 0524 78009FE5 		ldr	r0, .L115+4
 725 0528 061088E0 		add	r1, r8, r6
 726 052c FEFFFFEB 		bl	printf
 727 0530 68309FE5 		ldr	r3, .L115
 728 0534 0040A0E3 		mov	r4, #0
 729              	.LVL70:
 730 0538 035086E0 		add	r5, r6, r3
 731              	.L104:
 732              		.loc 1 375 0
 733 053c 014084E2 		add	r4, r4, #1
 734 0540 60009FE5 		ldr	r0, .L115+8
 735 0544 0110D5E4 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 736 0548 FEFFFFEB 		bl	printf
 737 054c 100054E3 		cmp	r4, #16
 738 0550 F9FFFF1A 		bne	.L104
 739              		.loc 1 376 0
 740 0554 50009FE5 		ldr	r0, .L115+12
 741 0558 FEFFFFEB 		bl	printf
 742 055c 3C309FE5 		ldr	r3, .L115
 743 0560 0040A0E3 		mov	r4, #0
 744              	.LVL71:
 745 0564 035086E0 		add	r5, r6, r3
 746              	.L106:
 747              		.loc 1 377 0
 748 0568 014084E2 		add	r4, r4, #1
 749 056c 0100D5E4 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 750 0570 FEFFFFEB 		bl	putchar
 751 0574 100054E3 		cmp	r4, #16
 752 0578 FAFFFF1A 		bne	.L106
 753              		.loc 1 378 0
 754 057c 106086E2 		add	r6, r6, #16
 755              		.loc 1 379 0
 756 0580 070056E1 		cmp	r6, r7
 757 0584 030000AA 		bge	.L110
 758 0588 20009FE5 		ldr	r0, .L115+16
 759 058c FEFFFFEB 		bl	printf
 760              	.L102:
 761              		.loc 1 373 0
 762 0590 070056E1 		cmp	r6, r7
 763 0594 E2FFFFBA 		blt	.L103
 764              	.L110:
 765              		.loc 1 381 0
 766 0598 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 767 059c 1EFF2FE1 		bx	lr
 768              	.L116:
 769              		.align	2
 770              	.L115:
 771 05a0 00000000 		.word	outBuf
 772 05a4 44000000 		.word	.LC6
 773 05a8 4C000000 		.word	.LC7
 774 05ac 54000000 		.word	.LC8
 775 05b0 18000000 		.word	.LC1
 776              	.LFE8:
 778              		.section	.rodata.str1.4
 779 0057 00       		.align	2
 780              	.LC9:
 781 0058 0A0D496E 		.ascii	"\012\015InitEE Err1\000"
 781      69744545 
 781      20457272 
 781      3100
 782              		.text
 783              		.align	2
 784              		.global	InitEE_IP
 786              	InitEE_IP:
 787              	.LFB7:
 788              		.loc 1 344 0
 789              		@ Function supports interworking.
 790              		@ args = 0, pretend = 0, frame = 36
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792 05b4 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 793              	.LCFI7:
 794 05b8 24D04DE2 		sub	sp, sp, #36
 795              	.LCFI8:
 796              		.loc 1 345 0
 797 05bc 1A408DE2 		add	r4, sp, #26
 798              		.loc 1 346 0
 799 05c0 12808DE2 		add	r8, sp, #18
 800              		.loc 1 345 0
 801 05c4 DC109FE5 		ldr	r1, .L122
 802 05c8 0820A0E3 		mov	r2, #8
 803 05cc 0400A0E1 		mov	r0, r4
 804 05d0 FEFFFFEB 		bl	memcpy
 805              		.loc 1 347 0
 806 05d4 0A708DE2 		add	r7, sp, #10
 807              		.loc 1 346 0
 808 05d8 CC109FE5 		ldr	r1, .L122+4
 809 05dc 0820A0E3 		mov	r2, #8
 810 05e0 0800A0E1 		mov	r0, r8
 811 05e4 FEFFFFEB 		bl	memcpy
 812              		.loc 1 348 0
 813 05e8 02608DE2 		add	r6, sp, #2
 814              		.loc 1 347 0
 815 05ec BC109FE5 		ldr	r1, .L122+8
 816 05f0 0820A0E3 		mov	r2, #8
 817 05f4 0700A0E1 		mov	r0, r7
 818 05f8 FEFFFFEB 		bl	memcpy
 819              		.loc 1 349 0
 820 05fc 22508DE2 		add	r5, sp, #34
 821              		.loc 1 348 0
 822 0600 AC109FE5 		ldr	r1, .L122+12
 823 0604 0820A0E3 		mov	r2, #8
 824 0608 0600A0E1 		mov	r0, r6
 825 060c FEFFFFEB 		bl	memcpy
 826              		.loc 1 349 0
 827 0610 A0109FE5 		ldr	r1, .L122+16
 828 0614 0220A0E3 		mov	r2, #2
 829 0618 0500A0E1 		mov	r0, r5
 830 061c FEFFFFEB 		bl	memcpy
 831              		.loc 1 351 0
 832 0620 0410A0E1 		mov	r1, r4
 833 0624 0820A0E3 		mov	r2, #8
 834 0628 8C009FE5 		ldr	r0, .L122+20
 835 062c FEFFFFEB 		bl	memcpy
 836              		.loc 1 352 0
 837 0630 0810A0E1 		mov	r1, r8
 838 0634 0820A0E3 		mov	r2, #8
 839 0638 80009FE5 		ldr	r0, .L122+24
 840 063c FEFFFFEB 		bl	memcpy
 841              		.loc 1 353 0
 842 0640 0710A0E1 		mov	r1, r7
 843 0644 0820A0E3 		mov	r2, #8
 844 0648 74009FE5 		ldr	r0, .L122+28
 845 064c FEFFFFEB 		bl	memcpy
 846              		.loc 1 354 0
 847 0650 0610A0E1 		mov	r1, r6
 848 0654 0820A0E3 		mov	r2, #8
 849 0658 68009FE5 		ldr	r0, .L122+32
 850 065c FEFFFFEB 		bl	memcpy
 851              		.loc 1 355 0
 852 0660 0510A0E1 		mov	r1, r5
 853 0664 0220A0E3 		mov	r2, #2
 854 0668 5C009FE5 		ldr	r0, .L122+36
 855 066c FEFFFFEB 		bl	memcpy
 856              		.loc 1 356 0
 857 0670 58109FE5 		ldr	r1, .L122+40
 858 0674 2220A0E3 		mov	r2, #34
 859 0678 0000A0E3 		mov	r0, #0
 860 067c FEFFFFEB 		bl	eepromWrite
 861 0680 000050E3 		cmp	r0, #0
 862 0684 0030A0E1 		mov	r3, r0
 863              		.loc 1 357 0
 864 0688 44009FE5 		ldr	r0, .L122+44
 865              		.loc 1 356 0
 866 068c 0100000A 		beq	.L120
 867              		.loc 1 357 0
 868 0690 FEFFFFEB 		bl	printf
 869 0694 0030E0E3 		mvn	r3, #0
 870              	.L120:
 871              		.loc 1 363 0
 872 0698 0300A0E1 		mov	r0, r3
 873 069c 24D08DE2 		add	sp, sp, #36
 874 06a0 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 875 06a4 1EFF2FE1 		bx	lr
 876              	.L123:
 877              		.align	2
 878              	.L122:
 879 06a8 1A000000 		.word	C.19.2624
 880 06ac 12000000 		.word	C.20.2625
 881 06b0 0A000000 		.word	C.21.2626
 882 06b4 02000000 		.word	C.22.2627
 883 06b8 00000000 		.word	C.23.2628
 884 06bc 02000000 		.word	outBuf+2
 885 06c0 0A000000 		.word	outBuf+10
 886 06c4 12000000 		.word	outBuf+18
 887 06c8 1A000000 		.word	outBuf+26
 888 06cc 22000000 		.word	outBuf+34
 889 06d0 00000000 		.word	outBuf
 890 06d4 58000000 		.word	.LC9
 891              	.LFE7:
 893              		.align	2
 894              		.global	GetCmdLine
 896              	GetCmdLine:
 897              	.LFB3:
 898              		.loc 1 237 0
 899              		@ Function supports interworking.
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902 06d8 10402DE9 		stmfd	sp!, {r4, lr}
 903              	.LCFI9:
 904              		.loc 1 242 0
 905 06dc FEFFFFEB 		bl	my_getchar
 906              	.LVL72:
 907              		.loc 1 243 0
 908 06e0 010070E3 		cmn	r0, #1
 909              	.LVL73:
 910              		.loc 1 242 0
 911 06e4 0040A0E1 		mov	r4, r0
 912              	.LVL74:
 913              		.loc 1 243 0
 914 06e8 0010A0E3 		mov	r1, #0
 915              	.LVL75:
 916 06ec 0C00000A 		beq	.L127
 917              		.loc 1 246 0
 918 06f0 FEFFFFEB 		bl	putchar
 919              	.LVL76:
 920 06f4 44209FE5 		ldr	r2, .L131
 921              		.loc 1 247 0
 922 06f8 0D0054E3 		cmp	r4, #13
 923              		.loc 1 251 0
 924 06fc 00309215 		ldrne	r3, [r2, #0]
 925 0700 3C009FE5 		ldr	r0, .L131+4
 926              		.loc 1 248 0
 927 0704 00209205 		ldreq	r2, [r2, #0]
 928 0708 0030A003 		moveq	r3, #0
 929              		.loc 1 251 0
 930 070c 0340C017 		strneb	r4, [r0, r3]
 931              		.loc 1 252 0
 932 0710 01308312 		addne	r3, r3, #1
 933              		.loc 1 248 0
 934 0714 0230C007 		streqb	r3, [r0, r2]
 935              		.loc 1 252 0
 936 0718 00308215 		strne	r3, [r2, #0]
 937              		.loc 1 248 0
 938 071c 0110A0E3 		mov	r1, #1
 939              	.LVL77:
 940              		.loc 1 252 0
 941 0720 0010A013 		movne	r1, #0
 942              	.L127:
 943              		.loc 1 255 0
 944 0724 14309FE5 		ldr	r3, .L131
 945 0728 002093E5 		ldr	r2, [r3, #0]
 946 072c 14309FE5 		ldr	r3, .L131+8
 947              		.loc 1 257 0
 948 0730 0100A0E1 		mov	r0, r1
 949              		.loc 1 255 0
 950 0734 002083E5 		str	r2, [r3, #0]
 951              		.loc 1 257 0
 952 0738 1040BDE8 		ldmfd	sp!, {r4, lr}
 953 073c 1EFF2FE1 		bx	lr
 954              	.L132:
 955              		.align	2
 956              	.L131:
 957 0740 00000000 		.word	CmdLen
 958 0744 00000000 		.word	CmdStr
 959 0748 00000000 		.word	CmdRest
 960              	.LFE3:
 962              		.section	.rodata.str1.4
 963 0066 0000     		.align	2
 964              	.LC10:
 965 0068 0A0D2100 		.ascii	"\012\015!\000"
 966              		.align	2
 967              	.LC11:
 968 006c 23232320 		.ascii	"### HTTP Server_Demo %s ###\012\015\000"
 968      48545450 
 968      20536572 
 968      7665725F 
 968      44656D6F 
 969 008a 0000     		.align	2
 970              	.LC12:
 971 008c 45455052 		.ascii	"EEPROM:\012\015\000"
 971      4F4D3A0A 
 971      0D00
 972 0096 0000     		.align	2
 973              	.LC14:
 974 0098 0A0D2530 		.ascii	"\012\015%02X %02X\000"
 974      32582025 
 974      30325800 
 975              		.align	2
 976              	.LC15:
 977 00a4 466F7800 		.ascii	"Fox\000"
 978              		.align	2
 979              	.LC16:
 980 00a8 31323300 		.ascii	"123\000"
 981              		.align	2
 982              	.LC17:
 983 00ac 31323334 		.ascii	"1234\000"
 983      00
 984 00b1 000000   		.align	2
 985              	.LC18:
 986 00b4 427200   		.ascii	"Br\000"
 987 00b7 00       		.align	2
 988              	.LC19:
 989 00b8 6A00     		.ascii	"j\000"
 990 00ba 0000     		.align	2
 991              	.LC20:
 992 00bc 58595A00 		.ascii	"XYZ\000"
 993              		.align	2
 994              	.LC21:
 995 00c0 0D0A0D0A 		.ascii	"\015\012\015\012\000"
 995      00
 996 00c5 000000   		.align	2
 997              	.LC22:
 998 00c8 436F6D6D 		.ascii	"Commands:\000"
 998      616E6473 
 998      3A00
 999 00d2 0000     		.align	2
 1000              	.LC23:
 1001 00d4 0A0D204C 		.ascii	"\012\015 L  - LogDisplay\000"
 1001      20202D20 
 1001      4C6F6744 
 1001      6973706C 
 1001      617900
 1002 00e7 00       		.align	2
 1003              	.LC24:
 1004 00e8 0A0D2049 		.ascii	"\012\015 I  - Info\000"
 1004      20202D20 
 1004      496E666F 
 1004      00
 1005 00f5 000000   		.align	2
 1006              	.LC25:
 1007 00f8 0A0D2045 		.ascii	"\012\015 EC - Clear EE\000"
 1007      43202D20 
 1007      436C6561 
 1007      72204545 
 1007      00
 1008 0109 000000   		.align	2
 1009              	.LC26:
 1010 010c 0A0D2045 		.ascii	"\012\015 ED - Dump EE\000"
 1010      44202D20 
 1010      44756D70 
 1010      20454500 
 1011              		.align	2
 1012              	.LC27:
 1013 011c 0A0D2045 		.ascii	"\012\015 EL - Load/Init EE_IPs\000"
 1013      4C202D20 
 1013      4C6F6164 
 1013      2F496E69 
 1013      74204545 
 1014 0135 000000   		.align	2
 1015              	.LC28:
 1016 0138 0A0D2045 		.ascii	"\012\015 EI - set EE_IP\000"
 1016      49202D20 
 1016      73657420 
 1016      45455F49 
 1016      5000
 1017 014a 0000     		.align	2
 1018              	.LC29:
 1019 014c 0A0D2045 		.ascii	"\012\015 EM - set EE_MAC\000"
 1019      4D202D20 
 1019      73657420 
 1019      45455F4D 
 1019      414300
 1020 015f 00       		.align	2
 1021              	.LC30:
 1022 0160 0A0D2045 		.ascii	"\012\015 ES - set EE_SN\000"
 1022      53202D20 
 1022      73657420 
 1022      45455F53 
 1022      4E00
 1023 0172 0000     		.align	2
 1024              	.LC31:
 1025 0174 0A0D2045 		.ascii	"\012\015 EG - set EE_GAR\000"
 1025      47202D20 
 1025      73657420 
 1025      45455F47 
 1025      415200
 1026 0187 00       		.align	2
 1027              	.LC32:
 1028 0188 0A0D2045 		.ascii	"\012\015 EP - set EE_Port\000"
 1028      50202D20 
 1028      73657420 
 1028      45455F50 
 1028      6F727400 
 1029              		.align	2
 1030              	.LC33:
 1031 019c 0A0D3F3F 		.ascii	"\012\015????\000"
 1031      3F3F00
 1032 01a3 00       		.align	2
 1033              	.LC34:
 1034 01a4 49503A20 		.ascii	"IP: %d.%d.%d.%d\000"
 1034      25642E25 
 1034      642E2564 
 1034      2E256400 
 1035              		.align	2
 1036              	.LC35:
 1037 01b4 0A0D5772 		.ascii	"\012\015WrEE Err\000"
 1037      45452045 
 1037      727200
 1038 01bf 00       		.align	2
 1039              	.LC36:
 1040 01c0 3F3F3F3F 		.ascii	"????\012\015\000"
 1040      0A0D00
 1041 01c7 00       		.align	2
 1042              	.LC37:
 1043 01c8 4741523A 		.ascii	"GAR: %d.%d.%d.%d\000"
 1043      2025642E 
 1043      25642E25 
 1043      642E2564 
 1043      00
 1044 01d9 000000   		.align	2
 1045              	.LC38:
 1046 01dc 534E3A20 		.ascii	"SN: %d.%d.%d.%d\000"
 1046      25642E25 
 1046      642E2564 
 1046      2E256400 
 1047              		.align	2
 1048              	.LC39:
 1049 01ec 4D41433A 		.ascii	"MAC: %02x:%02x:%02x:%02x:%02x:%02x\000"
 1049      20253032 
 1049      783A2530 
 1049      32783A25 
 1049      3032783A 
 1050 020f 00       		.align	2
 1051              	.LC40:
 1052 0210 4E657720 		.ascii	"New htPort = %d\000"
 1052      6874506F 
 1052      7274203D 
 1052      20256400 
 1053              		.align	2
 1054              	.LC41:
 1055 0220 2A436D64 		.ascii	"*CmdErr\012\015\000"
 1055      4572720A 
 1055      0D00
 1056 022a 0000     		.align	2
 1057              	.LC13:
 1058 022c 42726F77 		.ascii	"BrownAB Fox123 jumpsABC 1234\015\012\015\012\000"
 1058      6E414220 
 1058      466F7831 
 1058      3233206A 
 1058      756D7073 
 1059 024d 000000   		.text
 1060              		.align	2
 1061              		.global	CheckCmd
 1063              	CheckCmd:
 1064              	.LFB2:
 1065              		.loc 1 70 0
 1066              		@ Function supports interworking.
 1067              		@ args = 0, pretend = 0, frame = 68
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069 074c F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 1070              	.LCFI10:
 1071              		.loc 1 76 0
 1072 0750 94449FE5 		ldr	r4, .L185
 1073 0754 003094E5 		ldr	r3, [r4, #0]
 1074 0758 000053E3 		cmp	r3, #0
 1075              		.loc 1 70 0
 1076 075c 50D04DE2 		sub	sp, sp, #80
 1077              	.LCFI11:
 1078              		.loc 1 76 0
 1079              		.loc 1 77 0
 1080 0760 0030A013 		movne	r3, #0
 1081              		.loc 1 78 0
 1082 0764 84049F15 		ldrne	r0, .L185+4
 1083              		.loc 1 77 0
 1084 0768 00308415 		strne	r3, [r4, #0]
 1085              		.loc 1 78 0
 1086 076c FEFFFF1B 		blne	printf
 1087              	.L134:
 1088              		.loc 1 81 0
 1089 0770 FEFFFFEB 		bl	GetCmdLine
 1090 0774 000050E3 		cmp	r0, #0
 1091 0778 1801000A 		beq	.L177
 1092 077c 70349FE5 		ldr	r3, .L185+8
 1093 0780 003093E5 		ldr	r3, [r3, #0]
 1094 0784 000053E3 		cmp	r3, #0
 1095 0788 140100DA 		ble	.L177
 1096              		.loc 1 83 0
 1097 078c 64349FE5 		ldr	r3, .L185+12
 1098 0790 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1099              		.loc 1 84 0
 1100 0794 613042E2 		sub	r3, r2, #97
 1101              		.loc 1 83 0
 1102 0798 5C049FE5 		ldr	r0, .L185+16
 1103              		.loc 1 84 0
 1104 079c 190053E3 		cmp	r3, #25
 1105              		.loc 1 82 0
 1106 07a0 0130A0E3 		mov	r3, #1
 1107 07a4 003084E5 		str	r3, [r4, #0]
 1108              		.loc 1 85 0
 1109 07a8 20304292 		subls	r3, r2, #32
 1110              		.loc 1 83 0
 1111 07ac 0020C0E5 		strb	r2, [r0, #0]
 1112              		.loc 1 87 0
 1113 07b0 48149FE5 		ldr	r1, .L185+20
 1114              		.loc 1 85 0
 1115 07b4 0030C095 		strlsb	r3, [r0, #0]
 1116              		.loc 1 87 0
 1117 07b8 003091E5 		ldr	r3, [r1, #0]
 1118              		.loc 1 89 0
 1119 07bc 0020D0E5 		ldrb	r2, [r0, #0]	@ zero_extendqisi2
 1120              		.loc 1 87 0
 1121 07c0 013043E2 		sub	r3, r3, #1
 1122              		.loc 1 89 0
 1123 07c4 452042E2 		sub	r2, r2, #69
 1124              		.loc 1 87 0
 1125 07c8 003081E5 		str	r3, [r1, #0]
 1126              		.loc 1 89 0
 1127 07cc 070052E3 		cmp	r2, #7
 1128 07d0 02F19F97 		ldrls	pc, [pc, r2, asl #2]
 1129 07d4 FC0000EA 		b	.L141
 1130              		.p2align 2
 1131              	.L147:
 1132 07d8 04090000 		.word	.L142
 1133 07dc 30080000 		.word	.L143
 1134 07e0 CC0B0000 		.word	.L141
 1135 07e4 AC080000 		.word	.L144
 1136 07e8 00080000 		.word	.L145
 1137 07ec CC0B0000 		.word	.L141
 1138 07f0 CC0B0000 		.word	.L141
 1139 07f4 F8070000 		.word	.L146
 1140              	.L146:
 1141              		.loc 1 91 0
 1142 07f8 FEFFFFEB 		bl	LogDisplay
 1143 07fc F40000EA 		b	.L148
 1144              	.L145:
 1145              		.loc 1 96 0
 1146 0800 FC139FE5 		ldr	r1, .L185+24
 1147 0804 FC039FE5 		ldr	r0, .L185+28
 1148 0808 FEFFFFEB 		bl	printf
 1149              		.loc 1 97 0
 1150 080c F8039FE5 		ldr	r0, .L185+32
 1151 0810 FEFFFFEB 		bl	printf
 1152              		.loc 1 98 0
 1153 0814 3010A0E3 		mov	r1, #48
 1154 0818 0000A0E3 		mov	r0, #0
 1155 081c FEFFFFEB 		bl	DumpEE
 1156 0820 E8039FE5 		ldr	r0, .L185+36
 1157 0824 FEFFFFEB 		bl	printf
 1158              		.loc 1 100 0
 1159 0828 FEFFFFEB 		bl	ShowIPs
 1160 082c E80000EA 		b	.L148
 1161              	.L143:
 1162              	.LBB4:
 1163              		.loc 1 104 0
 1164 0830 0D408DE2 		add	r4, sp, #13
 1165 0834 0400A0E1 		mov	r0, r4
 1166 0838 D4139FE5 		ldr	r1, .L185+40
 1167 083c 2120A0E3 		mov	r2, #33
 1168 0840 FEFFFFEB 		bl	memcpy
 1169              		.loc 1 106 0
 1170 0844 0A20A0E3 		mov	r2, #10
 1171 0848 0D10A0E3 		mov	r1, #13
 1172 084c C4039FE5 		ldr	r0, .L185+44
 1173 0850 FEFFFFEB 		bl	printf
 1174              		.loc 1 107 0
 1175 0854 0400A0E1 		mov	r0, r4
 1176 0858 BC139FE5 		ldr	r1, .L185+48
 1177 085c FEFFFFEB 		bl	findstr
 1178              		.loc 1 108 0
 1179 0860 0400A0E1 		mov	r0, r4
 1180 0864 B4139FE5 		ldr	r1, .L185+52
 1181 0868 FEFFFFEB 		bl	findstr
 1182              		.loc 1 109 0
 1183 086c 0400A0E1 		mov	r0, r4
 1184 0870 AC139FE5 		ldr	r1, .L185+56
 1185 0874 FEFFFFEB 		bl	findstr
 1186              		.loc 1 110 0
 1187 0878 0400A0E1 		mov	r0, r4
 1188 087c A4139FE5 		ldr	r1, .L185+60
 1189 0880 FEFFFFEB 		bl	findstr
 1190              		.loc 1 111 0
 1191 0884 0400A0E1 		mov	r0, r4
 1192 0888 9C139FE5 		ldr	r1, .L185+64
 1193 088c FEFFFFEB 		bl	findstr
 1194              		.loc 1 112 0
 1195 0890 0400A0E1 		mov	r0, r4
 1196 0894 94139FE5 		ldr	r1, .L185+68
 1197 0898 FEFFFFEB 		bl	findstr
 1198              		.loc 1 113 0
 1199 089c 0400A0E1 		mov	r0, r4
 1200 08a0 8C139FE5 		ldr	r1, .L185+72
 1201 08a4 FEFFFFEB 		bl	findstr
 1202 08a8 C90000EA 		b	.L148
 1203              	.L144:
 1204              	.LBE4:
 1205              		.loc 1 119 0
 1206 08ac 84039FE5 		ldr	r0, .L185+76
 1207 08b0 FEFFFFEB 		bl	printf
 1208              		.loc 1 120 0
 1209 08b4 80039FE5 		ldr	r0, .L185+80
 1210 08b8 FEFFFFEB 		bl	printf
 1211              		.loc 1 121 0
 1212 08bc 7C039FE5 		ldr	r0, .L185+84
 1213 08c0 FEFFFFEB 		bl	printf
 1214              		.loc 1 122 0
 1215 08c4 78039FE5 		ldr	r0, .L185+88
 1216 08c8 FEFFFFEB 		bl	printf
 1217              		.loc 1 123 0
 1218 08cc 74039FE5 		ldr	r0, .L185+92
 1219 08d0 FEFFFFEB 		bl	printf
 1220              		.loc 1 124 0
 1221 08d4 70039FE5 		ldr	r0, .L185+96
 1222 08d8 FEFFFFEB 		bl	printf
 1223              		.loc 1 125 0
 1224 08dc 6C039FE5 		ldr	r0, .L185+100
 1225 08e0 FEFFFFEB 		bl	printf
 1226              		.loc 1 126 0
 1227 08e4 68039FE5 		ldr	r0, .L185+104
 1228 08e8 FEFFFFEB 		bl	printf
 1229              		.loc 1 127 0
 1230 08ec 64039FE5 		ldr	r0, .L185+108
 1231 08f0 FEFFFFEB 		bl	printf
 1232              		.loc 1 128 0
 1233 08f4 60039FE5 		ldr	r0, .L185+112
 1234 08f8 FEFFFFEB 		bl	printf
 1235              		.loc 1 129 0
 1236 08fc 5C039FE5 		ldr	r0, .L185+116
 1237 0900 B20000EA 		b	.L181
 1238              	.L142:
 1239              		.loc 1 134 0
 1240 0904 EC329FE5 		ldr	r3, .L185+12
 1241 0908 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1242 090c 000052E3 		cmp	r2, #0
 1243              		.loc 1 135 0
 1244 0910 4C039F05 		ldreq	r0, .L185+120
 1245              		.loc 1 134 0
 1246 0914 AD00000A 		beq	.L181
 1247              		.loc 1 135 0
 1248 0918 0070A0E3 		mov	r7, #0
 1249              	.LVL78:
 1250 091c 0100A0E3 		mov	r0, #1
 1251              	.LVL79:
 1252              	.LVL80:
 1253              	.L151:
 1254              		.loc 1 140 0
 1255 0920 613042E2 		sub	r3, r2, #97
 1256              		.loc 1 139 0
 1257 0924 3C139FE5 		ldr	r1, .L185+124
 1258              		.loc 1 140 0
 1259 0928 190053E3 		cmp	r3, #25
 1260              		.loc 1 141 0
 1261 092c 20304292 		subls	r3, r2, #32
 1262              		.loc 1 139 0
 1263 0930 0020C1E5 		strb	r2, [r1, #0]
 1264              		.loc 1 141 0
 1265 0934 0030C195 		strlsb	r3, [r1, #0]
 1266              		.loc 1 145 0
 1267 0938 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 1268 093c 433043E2 		sub	r3, r3, #67
 1269              		.loc 1 143 0
 1270 0940 016080E2 		add	r6, r0, #1
 1271 0944 AC229FE5 		ldr	r2, .L185+12
 1272              		.loc 1 145 0
 1273 0948 100053E3 		cmp	r3, #16
 1274 094c 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1275 0950 970000EA 		b	.L154
 1276              		.p2align 2
 1277              	.L163:
 1278 0954 98090000 		.word	.L155
 1279 0958 AC090000 		.word	.L179
 1280 095c B40B0000 		.word	.L154
 1281 0960 B40B0000 		.word	.L154
 1282 0964 240A0000 		.word	.L157
 1283 0968 B40B0000 		.word	.L154
 1284 096c BC090000 		.word	.L158
 1285 0970 B40B0000 		.word	.L154
 1286 0974 B40B0000 		.word	.L154
 1287 0978 A0090000 		.word	.L159
 1288 097c E80A0000 		.word	.L160
 1289 0980 B40B0000 		.word	.L154
 1290 0984 B40B0000 		.word	.L154
 1291 0988 600B0000 		.word	.L161
 1292 098c B40B0000 		.word	.L154
 1293 0990 B40B0000 		.word	.L154
 1294 0994 880A0000 		.word	.L162
 1295              	.L155:
 1296              		.loc 1 153 0
 1297 0998 FEFFFFEB 		bl	ClearEE
 1298              	.LVL81:
 1299 099c 840000EA 		b	.L154
 1300              	.LVL82:
 1301              	.L159:
 1302              		.loc 1 158 0
 1303 09a0 FEFFFFEB 		bl	InitEE_IP
 1304              	.LVL83:
 1305              		.loc 1 159 0
 1306 09a4 C0029FE5 		ldr	r0, .L185+128
 1307 09a8 FEFFFFEB 		bl	delay
 1308              	.LVL84:
 1309              	.L179:
 1310              		.loc 1 160 0
 1311 09ac 0000A0E3 		mov	r0, #0
 1312              	.LVL85:
 1313 09b0 6010A0E3 		mov	r1, #96
 1314 09b4 FEFFFFEB 		bl	DumpEE
 1315 09b8 7D0000EA 		b	.L154
 1316              	.LVL86:
 1317              	.L158:
 1318              		.loc 1 165 0
 1319 09bc AC529FE5 		ldr	r5, .L185+132
 1320 09c0 020086E0 		add	r0, r6, r2
 1321              	.LVL87:
 1322 09c4 0410A0E3 		mov	r1, #4
 1323 09c8 0520A0E1 		mov	r2, r5
 1324 09cc FEFFFFEB 		bl	RdUi8Seq
 1325              		.loc 1 166 0
 1326 09d0 007050E2 		subs	r7, r0, #0
 1327 09d4 100000DA 		ble	.L164
 1328              		.loc 1 167 0
 1329 09d8 03C0D5E5 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 1330 09dc 0010D5E5 		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 1331 09e0 0120D5E5 		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 1332 09e4 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1333 09e8 84029FE5 		ldr	r0, .L185+136
 1334 09ec 00C08DE5 		str	ip, [sp, #0]
 1335              		.loc 1 169 0
 1336 09f0 2E408DE2 		add	r4, sp, #46
 1337              		.loc 1 167 0
 1338 09f4 FEFFFFEB 		bl	printf
 1339              		.loc 1 168 0
 1340 09f8 0500A0E1 		mov	r0, r5
 1341 09fc FEFFFFEB 		bl	setSIPR
 1342              		.loc 1 169 0
 1343 0a00 0510A0E1 		mov	r1, r5
 1344 0a04 0420A0E3 		mov	r2, #4
 1345 0a08 020084E2 		add	r0, r4, #2
 1346 0a0c FEFFFFEB 		bl	memcpy
 1347              		.loc 1 170 0
 1348 0a10 0410A0E1 		mov	r1, r4
 1349 0a14 0800A0E3 		mov	r0, #8
 1350 0a18 180000EA 		b	.L184
 1351              	.L164:
 1352              		.loc 1 172 0
 1353 0a1c 54029FE5 		ldr	r0, .L185+140
 1354 0a20 620000EA 		b	.L180
 1355              	.LVL88:
 1356              	.L157:
 1357              		.loc 1 177 0
 1358 0a24 50529FE5 		ldr	r5, .L185+144
 1359 0a28 020086E0 		add	r0, r6, r2
 1360              	.LVL89:
 1361 0a2c 0410A0E3 		mov	r1, #4
 1362 0a30 0520A0E1 		mov	r2, r5
 1363 0a34 FEFFFFEB 		bl	RdUi8Seq
 1364              		.loc 1 178 0
 1365 0a38 007050E2 		subs	r7, r0, #0
 1366 0a3c 450000DA 		ble	.L173
 1367              		.loc 1 179 0
 1368 0a40 03C0D5E5 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 1369 0a44 0010D5E5 		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 1370 0a48 0120D5E5 		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 1371 0a4c 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1372 0a50 28029FE5 		ldr	r0, .L185+148
 1373 0a54 00C08DE5 		str	ip, [sp, #0]
 1374              		.loc 1 181 0
 1375 0a58 2E408DE2 		add	r4, sp, #46
 1376              		.loc 1 179 0
 1377 0a5c FEFFFFEB 		bl	printf
 1378              		.loc 1 180 0
 1379 0a60 0500A0E1 		mov	r0, r5
 1380 0a64 FEFFFFEB 		bl	setGAR
 1381              		.loc 1 181 0
 1382 0a68 0510A0E1 		mov	r1, r5
 1383 0a6c 0420A0E3 		mov	r2, #4
 1384 0a70 020084E2 		add	r0, r4, #2
 1385 0a74 FEFFFFEB 		bl	memcpy
 1386              		.loc 1 182 0
 1387 0a78 0410A0E1 		mov	r1, r4
 1388 0a7c 1000A0E3 		mov	r0, #16
 1389              	.L184:
 1390 0a80 0420A0E3 		mov	r2, #4
 1391 0a84 450000EA 		b	.L183
 1392              	.LVL90:
 1393              	.L162:
 1394              		.loc 1 189 0
 1395 0a88 F4519FE5 		ldr	r5, .L185+152
 1396 0a8c 020086E0 		add	r0, r6, r2
 1397              	.LVL91:
 1398 0a90 0410A0E3 		mov	r1, #4
 1399 0a94 0520A0E1 		mov	r2, r5
 1400 0a98 FEFFFFEB 		bl	RdUi8Seq
 1401              		.loc 1 190 0
 1402 0a9c 007050E2 		subs	r7, r0, #0
 1403 0aa0 2C0000DA 		ble	.L173
 1404              		.loc 1 191 0
 1405 0aa4 03C0D5E5 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 1406 0aa8 0010D5E5 		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 1407 0aac 0120D5E5 		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 1408 0ab0 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1409 0ab4 CC019FE5 		ldr	r0, .L185+156
 1410 0ab8 00C08DE5 		str	ip, [sp, #0]
 1411              		.loc 1 193 0
 1412 0abc 2E408DE2 		add	r4, sp, #46
 1413              		.loc 1 191 0
 1414 0ac0 FEFFFFEB 		bl	printf
 1415              		.loc 1 192 0
 1416 0ac4 0500A0E1 		mov	r0, r5
 1417 0ac8 FEFFFFEB 		bl	setSUBR
 1418              		.loc 1 193 0
 1419 0acc 0510A0E1 		mov	r1, r5
 1420 0ad0 0420A0E3 		mov	r2, #4
 1421 0ad4 020084E2 		add	r0, r4, #2
 1422 0ad8 FEFFFFEB 		bl	memcpy
 1423              		.loc 1 194 0
 1424 0adc 0410A0E1 		mov	r1, r4
 1425 0ae0 1800A0E3 		mov	r0, #24
 1426 0ae4 E5FFFFEA 		b	.L184
 1427              	.LVL92:
 1428              	.L160:
 1429              		.loc 1 201 0
 1430 0ae8 9C519FE5 		ldr	r5, .L185+160
 1431 0aec 020086E0 		add	r0, r6, r2
 1432              	.LVL93:
 1433 0af0 0610A0E3 		mov	r1, #6
 1434 0af4 0520A0E1 		mov	r2, r5
 1435 0af8 FEFFFFEB 		bl	RdUi8Seq
 1436              		.loc 1 202 0
 1437 0afc 007050E2 		subs	r7, r0, #0
 1438 0b00 140000DA 		ble	.L173
 1439              		.loc 1 203 0
 1440 0b04 03C0D5E5 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 1441 0b08 04E0D5E5 		ldrb	lr, [r5, #4]	@ zero_extendqisi2
 1442 0b0c 0540D5E5 		ldrb	r4, [r5, #5]	@ zero_extendqisi2
 1443 0b10 0010D5E5 		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 1444 0b14 0120D5E5 		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 1445 0b18 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1446 0b1c 6C019FE5 		ldr	r0, .L185+164
 1447 0b20 00508DE8 		stmia	sp, {ip, lr}	@ phole stm
 1448 0b24 08408DE5 		str	r4, [sp, #8]
 1449 0b28 FEFFFFEB 		bl	printf
 1450              		.loc 1 206 0
 1451 0b2c 2E408DE2 		add	r4, sp, #46
 1452              		.loc 1 205 0
 1453 0b30 0500A0E1 		mov	r0, r5
 1454 0b34 FEFFFFEB 		bl	setSHAR
 1455              		.loc 1 206 0
 1456 0b38 0510A0E1 		mov	r1, r5
 1457 0b3c 0620A0E3 		mov	r2, #6
 1458 0b40 020084E2 		add	r0, r4, #2
 1459 0b44 FEFFFFEB 		bl	memcpy
 1460              		.loc 1 207 0
 1461 0b48 0410A0E1 		mov	r1, r4
 1462 0b4c 0000A0E3 		mov	r0, #0
 1463 0b50 0620A0E3 		mov	r2, #6
 1464 0b54 110000EA 		b	.L183
 1465              	.L173:
 1466              		.loc 1 209 0
 1467 0b58 04019FE5 		ldr	r0, .L185+120
 1468 0b5c 130000EA 		b	.L180
 1469              	.LVL94:
 1470              	.L161:
 1471              		.loc 1 214 0
 1472 0b60 4C508DE2 		add	r5, sp, #76
 1473 0b64 020086E0 		add	r0, r6, r2
 1474              	.LVL95:
 1475 0b68 0510A0E3 		mov	r1, #5
 1476 0b6c 0520A0E1 		mov	r2, r5
 1477 0b70 FEFFFFEB 		bl	scanDecNumber
 1478              		.loc 1 215 0
 1479 0b74 4C109DE5 		ldr	r1, [sp, #76]
 1480 0b78 14019FE5 		ldr	r0, .L185+168
 1481 0b7c FEFFFFEB 		bl	printf
 1482              		.loc 1 216 0
 1483 0b80 2E408DE2 		add	r4, sp, #46
 1484 0b84 0220A0E3 		mov	r2, #2
 1485 0b88 0510A0E1 		mov	r1, r5
 1486 0b8c 020084E0 		add	r0, r4, r2
 1487 0b90 FEFFFFEB 		bl	memcpy
 1488              		.loc 1 217 0
 1489 0b94 0410A0E1 		mov	r1, r4
 1490 0b98 2000A0E3 		mov	r0, #32
 1491 0b9c 0220A0E3 		mov	r2, #2
 1492              	.L183:
 1493 0ba0 FEFFFFEB 		bl	eepromWrite
 1494 0ba4 000050E3 		cmp	r0, #0
 1495 0ba8 0100000A 		beq	.L154
 1496 0bac E4009FE5 		ldr	r0, .L185+172
 1497              	.L180:
 1498 0bb0 FEFFFFEB 		bl	printf
 1499              	.LVL96:
 1500              	.L154:
 1501              		.loc 1 138 0
 1502 0bb4 3C309FE5 		ldr	r3, .L185+12
 1503              		.loc 1 223 0
 1504 0bb8 070086E0 		add	r0, r6, r7
 1505              		.loc 1 138 0
 1506 0bbc 0020D3E7 		ldrb	r2, [r3, r0]	@ zero_extendqisi2
 1507 0bc0 000052E3 		cmp	r2, #0
 1508 0bc4 0200000A 		beq	.L148
 1509 0bc8 54FFFFEA 		b	.L151
 1510              	.LVL97:
 1511              	.L141:
 1512              		.loc 1 229 0
 1513 0bcc C8009FE5 		ldr	r0, .L185+176
 1514              	.L181:
 1515 0bd0 FEFFFFEB 		bl	printf
 1516              	.LVL98:
 1517              	.L148:
 1518              		.loc 1 232 0
 1519 0bd4 18309FE5 		ldr	r3, .L185+8
 1520 0bd8 0020A0E3 		mov	r2, #0
 1521 0bdc 002083E5 		str	r2, [r3, #0]
 1522              	.L177:
 1523              		.loc 1 234 0
 1524 0be0 50D08DE2 		add	sp, sp, #80
 1525 0be4 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 1526 0be8 1EFF2FE1 		bx	lr
 1527              	.L186:
 1528              		.align	2
 1529              	.L185:
 1530 0bec 00000000 		.word	CmdDone
 1531 0bf0 68000000 		.word	.LC10
 1532 0bf4 00000000 		.word	CmdLen
 1533 0bf8 00000000 		.word	CmdStr
 1534 0bfc 00000000 		.word	cmd
 1535 0c00 00000000 		.word	CmdRest
 1536 0c04 00000000 		.word	RevDate
 1537 0c08 6C000000 		.word	.LC11
 1538 0c0c 8C000000 		.word	.LC12
 1539 0c10 18000000 		.word	.LC1
 1540 0c14 2C020000 		.word	.LC13
 1541 0c18 98000000 		.word	.LC14
 1542 0c1c A4000000 		.word	.LC15
 1543 0c20 A8000000 		.word	.LC16
 1544 0c24 AC000000 		.word	.LC17
 1545 0c28 B4000000 		.word	.LC18
 1546 0c2c B8000000 		.word	.LC19
 1547 0c30 BC000000 		.word	.LC20
 1548 0c34 C0000000 		.word	.LC21
 1549 0c38 C8000000 		.word	.LC22
 1550 0c3c D4000000 		.word	.LC23
 1551 0c40 E8000000 		.word	.LC24
 1552 0c44 F8000000 		.word	.LC25
 1553 0c48 0C010000 		.word	.LC26
 1554 0c4c 1C010000 		.word	.LC27
 1555 0c50 38010000 		.word	.LC28
 1556 0c54 4C010000 		.word	.LC29
 1557 0c58 60010000 		.word	.LC30
 1558 0c5c 74010000 		.word	.LC31
 1559 0c60 88010000 		.word	.LC32
 1560 0c64 9C010000 		.word	.LC33
 1561 0c68 00000000 		.word	scmd
 1562 0c6c A0860100 		.word	100000
 1563 0c70 00000000 		.word	ip_a
 1564 0c74 A4010000 		.word	.LC34
 1565 0c78 C0010000 		.word	.LC36
 1566 0c7c 08000000 		.word	gar_a
 1567 0c80 C8010000 		.word	.LC37
 1568 0c84 04000000 		.word	sn_a
 1569 0c88 DC010000 		.word	.LC38
 1570 0c8c 0E000000 		.word	mac_a
 1571 0c90 EC010000 		.word	.LC39
 1572 0c94 10020000 		.word	.LC40
 1573 0c98 B4010000 		.word	.LC35
 1574 0c9c 20020000 		.word	.LC41
 1575              	.LFE2:
 1577              		.global	LogRMark
 1578              		.data
 1579              		.align	1
 1582              	LogRMark:
 1583 0000 1100     		.short	17
 1584 0002 2000     		.short	32
 1585 0004 2100     		.short	33
 1586 0006 2200     		.short	34
 1587 0008 2300     		.short	35
 1588 000a 2400     		.short	36
 1589 000c 2500     		.short	37
 1590 000e 2600     		.short	38
 1591 0010 2700     		.short	39
 1592 0012 2800     		.short	40
 1593 0014 2900     		.short	41
 1594 0016 3100     		.short	49
 1595 0018 3200     		.short	50
 1596 001a 3300     		.short	51
 1597 001c 3500     		.short	53
 1598 001e 4100     		.short	65
 1599 0020 4200     		.short	66
 1600 0022 4500     		.short	69
 1601 0024 4700     		.short	71
 1602 0026 4800     		.short	72
 1603 0028 4900     		.short	73
 1604 002a 5000     		.short	80
 1605 002c 5100     		.short	81
 1606 002e 5600     		.short	86
 1607 0030 7000     		.short	112
 1608 0032 7100     		.short	113
 1609 0034 7700     		.short	119
 1610 0036 7800     		.short	120
 1611 0038 8800     		.short	136
 1612 003a 5105     		.short	1361
 1613 003c 5505     		.short	1365
 1614 003e 7107     		.short	1905
 1615 0040 7207     		.short	1906
 1616 0042 7307     		.short	1907
 1617 0044 7407     		.short	1908
 1618 0046 0000     		.short	0
 1619              		.global	LogRLen
 1620              		.align	2
 1623              	LogRLen:
 1624 0048 03000000 		.word	3
 1625 004c 03000000 		.word	3
 1626 0050 03000000 		.word	3
 1627 0054 03000000 		.word	3
 1628 0058 03000000 		.word	3
 1629 005c 03000000 		.word	3
 1630 0060 03000000 		.word	3
 1631 0064 03000000 		.word	3
 1632 0068 03000000 		.word	3
 1633 006c 04000000 		.word	4
 1634 0070 04000000 		.word	4
 1635 0074 04000000 		.word	4
 1636 0078 05000000 		.word	5
 1637 007c 04000000 		.word	4
 1638 0080 03000000 		.word	3
 1639 0084 03000000 		.word	3
 1640 0088 04000000 		.word	4
 1641 008c 03000000 		.word	3
 1642 0090 03000000 		.word	3
 1643 0094 03000000 		.word	3
 1644 0098 02000000 		.word	2
 1645 009c 03000000 		.word	3
 1646 00a0 03000000 		.word	3
 1647 00a4 02000000 		.word	2
 1648 00a8 03000000 		.word	3
 1649 00ac 03000000 		.word	3
 1650 00b0 03000000 		.word	3
 1651 00b4 05000000 		.word	5
 1652 00b8 03000000 		.word	3
 1653 00bc 06000000 		.word	6
 1654 00c0 03000000 		.word	3
 1655 00c4 05000000 		.word	5
 1656 00c8 01000000 		.word	1
 1657 00cc 01000000 		.word	1
 1658 00d0 05000000 		.word	5
 1659              		.section	.rodata
 1662              	C.23.2628:
 1663 0000 50       		.byte	80
 1664 0001 00       		.byte	0
 1667              	C.22.2627:
 1668 0002 FF       		.byte	-1
 1669 0003 FF       		.byte	-1
 1670 0004 FF       		.byte	-1
 1671 0005 01       		.byte	1
 1672 0006 00       		.byte	0
 1673 0007 00       		.byte	0
 1674 0008 00       		.byte	0
 1675 0009 00       		.byte	0
 1678              	C.21.2626:
 1679 000a C0       		.byte	-64
 1680 000b A8       		.byte	-88
 1681 000c 00       		.byte	0
 1682 000d 01       		.byte	1
 1683 000e 00       		.byte	0
 1684 000f 00       		.byte	0
 1685 0010 00       		.byte	0
 1686 0011 00       		.byte	0
 1689              	C.20.2625:
 1690 0012 C0       		.byte	-64
 1691 0013 A8       		.byte	-88
 1692 0014 00       		.byte	0
 1693 0015 29       		.byte	41
 1694 0016 00       		.byte	0
 1695 0017 00       		.byte	0
 1696 0018 00       		.byte	0
 1697 0019 00       		.byte	0
 1700              	C.19.2624:
 1701 001a 06       		.byte	6
 1702 001b 44       		.byte	68
 1703 001c 53       		.byte	83
 1704 001d 01       		.byte	1
 1705 001e 01       		.byte	1
 1706 001f 02       		.byte	2
 1707 0020 00       		.byte	0
 1708 0021 00       		.byte	0
 1709              		.bss
 1710              	ip_a:
 1711 0000 00000000 		.space	4
 1712              	sn_a:
 1713 0004 00000000 		.space	4
 1714              	gar_a:
 1715 0008 00000000 		.space	6
 1715      0000
 1716              	mac_a:
 1717 000e 00000000 		.space	6
 1717      0000
 1718              		.comm	CmdLen,4,4
 1719              		.comm	CmdRest,4,4
 1720              		.comm	CmdDone,4,4
 1721              		.comm	CmdStr,30,1
 1722              		.comm	cmd,1,1
 1723              		.comm	scmd,1,1
 1724              		.comm	CmdPtr,4,4
 1725              		.comm	tmp,4,4
 1726              		.comm	LogCnt,4,4
 1727              		.comm	LogData,2410,2
 1965              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 cmdint.c
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:13     .text:00000000 Get4cDecNum
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:21     .text:00000000 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:111    .text:000000a4 $d
                            *COM*:00000004 CmdRest
                            *COM*:00000004 CmdPtr
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:118    .text:000000ac scanDecNumber
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:125    .text:000000ac $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:185    .text:00000138 RdUi8Seq
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:270    .text:000001d0 LogInit
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:296    .text:000001f8 $d
                            *COM*:0000096a LogData
                            *COM*:00000004 LogCnt
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:305    .text:00000208 LogWr
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:314    .text:00000208 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:349    .text:00000254 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:358    .text:00000264 LogWrTim
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:366    .text:00000264 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:396    .text:000002a8 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:428    .text:000002b8 LogDisplay
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:435    .text:000002b8 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:628    .text:0000047c $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1582   .data:00000000 LogRMark
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1623   .data:00000048 LogRLen
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:645    .text:000004ac ClearEE
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:651    .text:000004ac $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:678    .text:000004f0 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:697    .text:000004fc DumpEE
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:704    .text:000004fc $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:771    .text:000005a0 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:786    .text:000005b4 InitEE_IP
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:792    .text:000005b4 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:879    .text:000006a8 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1700   .rodata:0000001a C.19.2624
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1689   .rodata:00000012 C.20.2625
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1678   .rodata:0000000a C.21.2626
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1667   .rodata:00000002 C.22.2627
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1662   .rodata:00000000 C.23.2628
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:896    .text:000006d8 GetCmdLine
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:902    .text:000006d8 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:957    .text:00000740 $d
                            *COM*:00000004 CmdLen
                            *COM*:0000001e CmdStr
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1063   .text:0000074c CheckCmd
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1069   .text:0000074c $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1132   .text:000007d8 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1142   .text:000007f8 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1278   .text:00000954 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1297   .text:00000998 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1530   .text:00000bec $d
                            *COM*:00000004 CmdDone
                            *COM*:00000001 cmd
                            *COM*:00000001 scmd
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1710   .bss:00000000 ip_a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1714   .bss:00000008 gar_a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1712   .bss:00000004 sn_a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1716   .bss:0000000e mac_a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/cccnQOwo.s:1624   .data:00000048 $d
                             .bss:00000000 $d
                            *COM*:00000004 tmp

UNDEFINED SYMBOLS
miliSec
LogTim0
__udivsi3
__umodsi3
printf
memset
eepromWrite
delay
outBuf
eepromRead
putchar
memcpy
my_getchar
ShowIPs
findstr
setSIPR
setGAR
setSUBR
setSHAR
RevDate
