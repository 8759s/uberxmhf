   1              		.file	"printf.c"
   9              	.Ltext0:
  10              		.align	2
  12              	printchar:
  13              	.LFB2:
  14              		.file 1 "utils/printf.c"
   1:utils/printf.c **** /*
   2:utils/printf.c **** 	Copyright 2001, 2002 Georges Menie (www.menie.org)
   3:utils/printf.c **** 	stdarg version contributed by Christian Ettinger
   4:utils/printf.c **** 
   5:utils/printf.c ****     This program is free software; you can redistribute it and/or modify
   6:utils/printf.c ****     it under the terms of the GNU Lesser General Public License as published by
   7:utils/printf.c ****     the Free Software Foundation; either version 2 of the License, or
   8:utils/printf.c ****     (at your option) any later version.
   9:utils/printf.c **** 
  10:utils/printf.c ****     This program is distributed in the hope that it will be useful,
  11:utils/printf.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:utils/printf.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:utils/printf.c ****     GNU Lesser General Public License for more details.
  14:utils/printf.c **** 
  15:utils/printf.c ****     You should have received a copy of the GNU Lesser General Public License
  16:utils/printf.c ****     along with this program; if not, write to the Free Software
  17:utils/printf.c ****     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  18:utils/printf.c **** */
  19:utils/printf.c **** 
  20:utils/printf.c **** /*
  21:utils/printf.c **** 	putchar is the only external dependency for this file,
  22:utils/printf.c **** 	if you have a working putchar, leave it commented out.
  23:utils/printf.c **** 	If not, uncomment the define below and
  24:utils/printf.c **** 	replace outbyte(c) by your own function call.
  25:utils/printf.c **** 
  26:utils/printf.c **** #define putchar(c) outbyte(c)
  27:utils/printf.c **** */
  28:utils/printf.c **** 
  29:utils/printf.c **** #include <stdarg.h>
  30:utils/printf.c **** #include "console.h"
  31:utils/printf.c **** 
  32:utils/printf.c **** int printf(const char *format, ...);
  33:utils/printf.c **** int sprintf(char *out, const char *format, ...);
  34:utils/printf.c **** 
  35:utils/printf.c **** 
  36:utils/printf.c **** static void printchar(char **str, int c)
  37:utils/printf.c **** {
  15              		.loc 1 37 0
  16              		@ Function supports interworking.
  17              		@ args = 0, pretend = 0, frame = 0
  18              		@ frame_needed = 0, uses_anonymous_args = 0
  19              	.LVL0:
  38:utils/printf.c **** 	if (str) {
  20              		.loc 1 38 0
  21 0000 002050E2 		subs	r2, r0, #0
  22              		.loc 1 37 0
  23 0004 04E02DE5 		str	lr, [sp, #-4]!
  24              	.LCFI0:
  39:utils/printf.c **** 		**str = c;
  40:utils/printf.c **** 		++(*str);
  41:utils/printf.c **** 	}
  42:utils/printf.c **** 	else {
  43:utils/printf.c **** 		putchar(c);
  25              		.loc 1 43 0
  26 0008 0100A0E1 		mov	r0, r1
  27              	.LVL1:
  28              		.loc 1 38 0
  29 000c 0500000A 		beq	.L2
  30              	.LVL2:
  31              		.loc 1 39 0
  32 0010 003092E5 		ldr	r3, [r2, #0]
  33 0014 0010C3E5 		strb	r1, [r3, #0]
  34              		.loc 1 40 0
  35 0018 003092E5 		ldr	r3, [r2, #0]
  36 001c 013083E2 		add	r3, r3, #1
  37 0020 003082E5 		str	r3, [r2, #0]
  38 0024 000000EA 		b	.L5
  39              	.L2:
  40              		.loc 1 43 0
  41 0028 FEFFFFEB 		bl	putchar
  42              	.LVL3:
  43              	.LVL4:
  44              	.L5:
  44:utils/printf.c **** 	}
  45:utils/printf.c **** }
  45              		.loc 1 45 0
  46 002c 04E09DE4 		ldr	lr, [sp], #4
  47 0030 1EFF2FE1 		bx	lr
  48              	.LFE2:
  50              		.align	2
  52              	prints:
  53              	.LFB3:
  46:utils/printf.c **** 
  47:utils/printf.c **** 
  48:utils/printf.c **** #define PAD_RIGHT 1
  49:utils/printf.c **** #define PAD_ZERO 2
  50:utils/printf.c **** 
  51:utils/printf.c **** static int prints(char **out, const char *string, int width, int pad)
  52:utils/printf.c **** {
  54              		.loc 1 52 0
  55              		@ Function supports interworking.
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              	.LVL5:
  59 0034 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
  60              	.LCFI1:
  53:utils/printf.c **** 	register int pc = 0, padchar = ' ';
  54:utils/printf.c **** 
  55:utils/printf.c **** 	if (width > 0) {
  61              		.loc 1 55 0
  62 0038 004052E2 		subs	r4, r2, #0
  63              		.loc 1 52 0
  64 003c 0070A0E1 		mov	r7, r0
  65 0040 0150A0E1 		mov	r5, r1
  66              		.loc 1 55 0
  67 0044 0020A0C3 		movgt	r2, #0
  68              	.LVL6:
  69 0048 010000CA 		bgt	.L9
  70              	.LVL7:
  71 004c 090000EA 		b	.L7
  72              	.LVL8:
  73              	.L10:
  74              	.LBB2:
  56:utils/printf.c **** 		register int len = 0;
  57:utils/printf.c **** 		register const char *ptr;
  58:utils/printf.c **** 		for (ptr = string; *ptr; ++ptr) ++len;
  75              		.loc 1 58 0
  76 0050 012082E2 		add	r2, r2, #1
  77              	.LVL9:
  78              	.L9:
  79 0054 0510D2E7 		ldrb	r1, [r2, r5]	@ zero_extendqisi2
  80 0058 000051E3 		cmp	r1, #0
  81 005c FBFFFF1A 		bne	.L10
  59:utils/printf.c **** 		if (len >= width) width = 0;
  82              		.loc 1 59 0
  83 0060 040052E1 		cmp	r2, r4
  84 0064 0140A0A1 		movge	r4, r1
  60:utils/printf.c **** 		else width -= len;
  85              		.loc 1 60 0
  86 0068 044062B0 		rsblt	r4, r2, r4
  61:utils/printf.c **** 		if (pad & PAD_ZERO) padchar = '0';
  87              		.loc 1 61 0
  88 006c 020013E3 		tst	r3, #2
  89 0070 3080A013 		movne	r8, #48
  90              	.LVL10:
  91 0074 0000001A 		bne	.L16
  92              	.LVL11:
  93              	.L7:
  94 0078 2080A0E3 		mov	r8, #32
  95              	.L16:
  96              	.LBE2:
  62:utils/printf.c **** 	}
  63:utils/printf.c **** 	if (!(pad & PAD_RIGHT)) {
  97              		.loc 1 63 0
  98 007c 010013E2 		ands	r0, r3, #1
  99 0080 0060A013 		movne	r6, #0
 100              	.LVL12:
 101 0084 0060A001 		moveq	r6, r0
 102 0088 0300000A 		beq	.L20
 103 008c 090000EA 		b	.L27
 104              	.LVL13:
 105              	.L21:
  64:utils/printf.c **** 		for ( ; width > 0; --width) {
  65:utils/printf.c **** 			printchar (out, padchar);
 106              		.loc 1 65 0
 107 0090 DAFFFFEB 		bl	printchar
 108              	.LVL14:
  66:utils/printf.c **** 			++pc;
 109              		.loc 1 66 0
 110 0094 016086E2 		add	r6, r6, #1
 111              		.loc 1 64 0
 112 0098 014044E2 		sub	r4, r4, #1
 113              	.LVL15:
 114              	.L20:
 115 009c 000054E3 		cmp	r4, #0
 116              		.loc 1 65 0
 117 00a0 0700A0E1 		mov	r0, r7
 118 00a4 0810A0E1 		mov	r1, r8
 119              		.loc 1 64 0
 120 00a8 F8FFFFCA 		bgt	.L21
 121              	.LVL16:
 122 00ac 010000EA 		b	.L27
 123              	.LVL17:
 124              	.L22:
  67:utils/printf.c **** 		}
  68:utils/printf.c **** 	}
  69:utils/printf.c **** 	for ( ; *string ; ++string) {
  70:utils/printf.c **** 		printchar (out, *string);
 125              		.loc 1 70 0
 126 00b0 D2FFFFEB 		bl	printchar
 127              	.LVL18:
  71:utils/printf.c **** 		++pc;
 128              		.loc 1 71 0
 129 00b4 016086E2 		add	r6, r6, #1
 130              	.LVL19:
 131              	.L27:
 132              		.loc 1 69 0
 133 00b8 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 134              	.LVL20:
 135 00bc 001053E2 		subs	r1, r3, #0
 136              		.loc 1 70 0
 137 00c0 0700A0E1 		mov	r0, r7
 138              		.loc 1 69 0
 139 00c4 015085E2 		add	r5, r5, #1
 140 00c8 F8FFFF1A 		bne	.L22
 141              	.LVL21:
 142 00cc 010000EA 		b	.L28
 143              	.LVL22:
 144              	.L24:
  72:utils/printf.c **** 	}
  73:utils/printf.c **** 	for ( ; width > 0; --width) {
  74:utils/printf.c **** 		printchar (out, padchar);
 145              		.loc 1 74 0
 146 00d0 CAFFFFEB 		bl	printchar
 147              	.LVL23:
  75:utils/printf.c **** 		++pc;
 148              		.loc 1 75 0
 149 00d4 016086E2 		add	r6, r6, #1
 150              	.LVL24:
 151              	.L28:
 152              		.loc 1 73 0
 153 00d8 000054E3 		cmp	r4, #0
 154              		.loc 1 74 0
 155 00dc 0700A0E1 		mov	r0, r7
 156 00e0 0810A0E1 		mov	r1, r8
 157              		.loc 1 73 0
 158 00e4 014044E2 		sub	r4, r4, #1
 159 00e8 F8FFFFCA 		bgt	.L24
 160              	.LVL25:
  76:utils/printf.c **** 	}
  77:utils/printf.c **** 
  78:utils/printf.c **** 	return pc;
  79:utils/printf.c **** }
 161              		.loc 1 79 0
 162 00ec 0600A0E1 		mov	r0, r6
 163              	.LVL26:
 164 00f0 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 165 00f4 1EFF2FE1 		bx	lr
 166              	.LFE3:
 168              		.global	__umodsi3
 169              		.global	__udivsi3
 170              		.align	2
 172              	printi:
 173              	.LFB4:
  80:utils/printf.c **** 
  81:utils/printf.c **** /* the following should be enough for 32 bit int */
  82:utils/printf.c **** #define PRINT_BUF_LEN 12
  83:utils/printf.c **** 
  84:utils/printf.c **** static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
  85:utils/printf.c **** {
 174              		.loc 1 85 0
 175              		@ Function supports interworking.
 176              		@ args = 12, pretend = 0, frame = 12
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              	.LVL27:
 179 00f8 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 180              	.LCFI2:
  86:utils/printf.c **** 	char print_buf[PRINT_BUF_LEN];
  87:utils/printf.c **** 	register char *s;
  88:utils/printf.c **** 	register int t, neg = 0, pc = 0;
  89:utils/printf.c **** 	register unsigned int u = i;
  90:utils/printf.c **** 
  91:utils/printf.c **** 	if (i == 0) {
 181              		.loc 1 91 0
 182 00fc 004051E2 		subs	r4, r1, #0
 183              	.LVL28:
 184              		.loc 1 85 0
 185 0100 0CD04DE2 		sub	sp, sp, #12
 186              	.LCFI3:
 187              		.loc 1 85 0
 188 0104 0250A0E1 		mov	r5, r2
 189 0108 0090A0E1 		mov	r9, r0
 190 010c 30608DE2 		add	r6, sp, #48
 191 0110 400C96E8 		ldmia	r6, {r6, sl, fp}	@ phole ldm
 192              		.loc 1 91 0
 193 0114 0700001A 		bne	.L30
 194              	.LVL29:
  92:utils/printf.c **** 		print_buf[0] = '0';
 195              		.loc 1 92 0
 196 0118 30C0A0E3 		mov	ip, #48
  93:utils/printf.c **** 		print_buf[1] = '\0';
  94:utils/printf.c **** 		return prints (out, print_buf, width, pad);
 197              		.loc 1 94 0
 198 011c 0620A0E1 		mov	r2, r6
 199 0120 0A30A0E1 		mov	r3, sl
 200              	.LVL30:
 201 0124 0D10A0E1 		mov	r1, sp
 202              	.LVL31:
 203              		.loc 1 92 0
 204 0128 00C0CDE5 		strb	ip, [sp, #0]
 205              		.loc 1 93 0
 206 012c 0140CDE5 		strb	r4, [sp, #1]
 207              		.loc 1 94 0
 208 0130 BFFFFFEB 		bl	prints
 209 0134 350000EA 		b	.L32
 210              	.LVL32:
 211              	.L30:
  95:utils/printf.c **** 	}
  96:utils/printf.c **** 
  97:utils/printf.c **** 	if (sg && b == 10 && i < 0) {
 212              		.loc 1 97 0
 213 0138 003053E2 		subs	r3, r3, #0
 214 013c 0130A013 		movne	r3, #1
 215              	.LVL33:
 216 0140 0A0052E3 		cmp	r2, #10
 217 0144 0030A013 		movne	r3, #0
 218 0148 000053E3 		cmp	r3, #0
 219 014c 0300000A 		beq	.L33
 220              	.LVL34:
 221 0150 000054E3 		cmp	r4, #0
  98:utils/printf.c **** 		neg = 1;
  99:utils/printf.c **** 		u = -i;
 222              		.loc 1 99 0
 223 0154 004064B2 		rsblt	r4, r4, #0
 224 0158 0180A0B3 		movlt	r8, #1
 225              	.LVL35:
 226              		.loc 1 97 0
 227 015c 000000BA 		blt	.L36
 228              	.L33:
 229              		.loc 1 99 0
 230 0160 0080A0E3 		mov	r8, #0
 231              	.L36:
 100:utils/printf.c **** 	}
 101:utils/printf.c **** 
 102:utils/printf.c **** 	s = print_buf + PRINT_BUF_LEN-1;
 103:utils/printf.c **** 	*s = '\0';
 232              		.loc 1 103 0
 233 0164 0030A0E3 		mov	r3, #0
 234 0168 0B708DE2 		add	r7, sp, #11
 235 016c 0B30CDE5 		strb	r3, [sp, #11]
 236 0170 0A0000EA 		b	.L37
 237              	.LVL36:
 238              	.L38:
 104:utils/printf.c **** 
 105:utils/printf.c **** 	while (u) {
 106:utils/printf.c **** 		t = u % b;
 239              		.loc 1 106 0
 240 0174 FEFFFFEB 		bl	__umodsi3
 241              	.LVL37:
 242 0178 0030A0E1 		mov	r3, r0
 243              	.LVL38:
 107:utils/printf.c **** 		if( t >= 10 )
 244              		.loc 1 107 0
 245 017c 090053E3 		cmp	r3, #9
 108:utils/printf.c **** 			t += letbase - '0' - 10;
 246              		.loc 1 108 0
 247 0180 0B2083E0 		add	r2, r3, fp
 248 0184 3A3042C2 		subgt	r3, r2, #58
 109:utils/printf.c **** 		*--s = t + '0';
 110:utils/printf.c **** 		u /= b;
 249              		.loc 1 110 0
 250 0188 0400A0E1 		mov	r0, r4
 251              		.loc 1 109 0
 252 018c 303083E2 		add	r3, r3, #48
 253              	.LVL39:
 254              		.loc 1 110 0
 255 0190 0510A0E1 		mov	r1, r5
 256              		.loc 1 109 0
 257 0194 013067E5 		strb	r3, [r7, #-1]!
 258              		.loc 1 110 0
 259 0198 FEFFFFEB 		bl	__udivsi3
 260 019c 0040A0E1 		mov	r4, r0
 261              	.LVL40:
 262              	.L37:
 263              		.loc 1 105 0
 264 01a0 000054E3 		cmp	r4, #0
 265              		.loc 1 106 0
 266 01a4 0400A0E1 		mov	r0, r4
 267 01a8 0510A0E1 		mov	r1, r5
 268              	.LVL41:
 269              		.loc 1 105 0
 270 01ac F0FFFF1A 		bne	.L38
 271              	.LVL42:
 111:utils/printf.c **** 	}
 112:utils/printf.c **** 
 113:utils/printf.c **** 	if (neg) {
 272              		.loc 1 113 0
 273 01b0 000058E3 		cmp	r8, #0
 274              		.loc 1 105 0
 275 01b4 0750A0E1 		mov	r5, r7
 276              	.LVL43:
 277              		.loc 1 113 0
 278 01b8 0840A001 		moveq	r4, r8
 279              	.LVL44:
 280 01bc 0D00000A 		beq	.L44
 114:utils/printf.c **** 		if( width && (pad & PAD_ZERO) ) {
 281              		.loc 1 114 0
 282 01c0 000056E3 		cmp	r6, #0
 283 01c4 0700000A 		beq	.L45
 284 01c8 02001AE3 		tst	sl, #2
 285 01cc 0500000A 		beq	.L45
 115:utils/printf.c **** 			printchar (out, '-');
 286              		.loc 1 115 0
 287 01d0 0900A0E1 		mov	r0, r9
 288              	.LVL45:
 289 01d4 2D10A0E3 		mov	r1, #45
 290 01d8 88FFFFEB 		bl	printchar
 291              	.LVL46:
 116:utils/printf.c **** 			++pc;
 117:utils/printf.c **** 			--width;
 292              		.loc 1 117 0
 293 01dc 016046E2 		sub	r6, r6, #1
 294 01e0 0140A0E3 		mov	r4, #1
 295 01e4 030000EA 		b	.L44
 296              	.LVL47:
 297              	.L45:
 118:utils/printf.c **** 		}
 119:utils/printf.c **** 		else {
 120:utils/printf.c **** 			*--s = '-';
 298              		.loc 1 120 0
 299 01e8 2D30A0E3 		mov	r3, #45
 300 01ec 013047E5 		strb	r3, [r7, #-1]
 301 01f0 015047E2 		sub	r5, r7, #1
 302 01f4 0040A0E3 		mov	r4, #0
 303              	.L44:
 121:utils/printf.c **** 		}
 122:utils/printf.c **** 	}
 123:utils/printf.c **** 
 124:utils/printf.c **** 	return pc + prints (out, s, width, pad);
 304              		.loc 1 124 0
 305 01f8 0900A0E1 		mov	r0, r9
 306              	.LVL48:
 307 01fc 0510A0E1 		mov	r1, r5
 308 0200 0620A0E1 		mov	r2, r6
 309              	.LVL49:
 310 0204 0A30A0E1 		mov	r3, sl
 311 0208 89FFFFEB 		bl	prints
 312 020c 000084E0 		add	r0, r4, r0
 313              	.LVL50:
 314              	.L32:
 125:utils/printf.c **** }
 315              		.loc 1 125 0
 316 0210 0CD08DE2 		add	sp, sp, #12
 317 0214 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 318 0218 1EFF2FE1 		bx	lr
 319              	.LFE4:
 321              		.section	.rodata.str1.4,"aMS",%progbits,1
 322              		.align	2
 323              	.LC0:
 324 0000 286E756C 		.ascii	"(null)\000"
 324      6C2900
 325 0007 00       		.text
 326              		.align	2
 328              	print:
 329              	.LFB5:
 126:utils/printf.c **** 
 127:utils/printf.c **** static int print(char **out, const char *format, va_list args )
 128:utils/printf.c **** {
 330              		.loc 1 128 0
 331              		@ Function supports interworking.
 332              		@ args = 0, pretend = 0, frame = 8
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              	.LVL51:
 335 021c F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 336              	.LCFI4:
 337 0220 0070A0E1 		mov	r7, r0
 338 0224 14D04DE2 		sub	sp, sp, #20
 339              	.LCFI5:
 340              		.loc 1 128 0
 341 0228 0140A0E1 		mov	r4, r1
 342 022c 0060A0E3 		mov	r6, #0
 343              	.LVL52:
 344 0230 0C208DE5 		str	r2, [sp, #12]
 345 0234 670000EA 		b	.L50
 346              	.LVL53:
 347              	.L51:
 129:utils/printf.c **** 	register int width, pad;
 130:utils/printf.c **** 	register int pc = 0;
 131:utils/printf.c **** 	char scr[2];
 132:utils/printf.c **** 
 133:utils/printf.c **** 	for (; *format != 0; ++format) {
 134:utils/printf.c **** 		if (*format == '%') {
 348              		.loc 1 134 0
 349 0238 250053E3 		cmp	r3, #37
 350 023c 6000001A 		bne	.L52
 135:utils/printf.c **** 			++format;
 136:utils/printf.c **** 			width = pad = 0;
 137:utils/printf.c **** 			if (*format == '\0') break;
 351              		.loc 1 137 0
 352 0240 0130F4E5 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 353 0244 000053E3 		cmp	r3, #0
 354 0248 6500000A 		beq	.L54
 138:utils/printf.c **** 			if (*format == '%') goto out;
 355              		.loc 1 138 0
 356 024c 250053E3 		cmp	r3, #37
 357 0250 5B00000A 		beq	.L52
 139:utils/printf.c **** 			if (*format == '-') {
 358              		.loc 1 139 0
 359 0254 2D0053E3 		cmp	r3, #45
 360 0258 0050A013 		movne	r5, #0
 140:utils/printf.c **** 				++format;
 361              		.loc 1 140 0
 362 025c 01408402 		addeq	r4, r4, #1
 363 0260 0150A003 		moveq	r5, #1
 364 0264 010000EA 		b	.L83
 365              	.L60:
 141:utils/printf.c **** 				pad = PAD_RIGHT;
 142:utils/printf.c **** 			}
 143:utils/printf.c **** 			while (*format == '0') {
 144:utils/printf.c **** 				++format;
 366              		.loc 1 144 0
 367 0268 014084E2 		add	r4, r4, #1
 145:utils/printf.c **** 				pad |= PAD_ZERO;
 368              		.loc 1 145 0
 369 026c 025085E3 		orr	r5, r5, #2
 370              	.L83:
 371              		.loc 1 143 0
 372 0270 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 373 0274 300053E3 		cmp	r3, #48
 374 0278 FAFFFF0A 		beq	.L60
 375 027c 0000A0E3 		mov	r0, #0
 376 0280 030000EA 		b	.L62
 377              	.LVL54:
 378              	.L63:
 146:utils/printf.c **** 			}
 147:utils/printf.c **** 			for ( ; *format >= '0' && *format <= '9'; ++format) {
 148:utils/printf.c **** 				width *= 10;
 149:utils/printf.c **** 				width += *format - '0';
 379              		.loc 1 149 0
 380 0284 0A30A0E3 		mov	r3, #10
 381 0288 902323E0 		mla	r3, r0, r3, r2
 382              		.loc 1 147 0
 383 028c 014084E2 		add	r4, r4, #1
 384              		.loc 1 149 0
 385 0290 300043E2 		sub	r0, r3, #48
 386              	.LVL55:
 387              	.L62:
 388              		.loc 1 147 0
 389 0294 0020D4E5 		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 390 0298 303042E2 		sub	r3, r2, #48
 391 029c 090053E3 		cmp	r3, #9
 392 02a0 F7FFFF9A 		bls	.L63
 150:utils/printf.c **** 			}
 151:utils/printf.c **** 			if( *format == 's' ) {
 393              		.loc 1 151 0
 394 02a4 730052E3 		cmp	r2, #115
 395 02a8 0900001A 		bne	.L65
 396              	.LBB3:
 152:utils/printf.c **** 				register char *s = (char *)va_arg( args, int );
 397              		.loc 1 152 0
 398 02ac 0CC09DE5 		ldr	ip, [sp, #12]
 399 02b0 04309CE4 		ldr	r3, [ip], #4
 153:utils/printf.c **** 				pc += prints (out, s?s:"(null)", width, pad);
 400              		.loc 1 153 0
 401 02b4 48119FE5 		ldr	r1, .L89
 402 02b8 000053E3 		cmp	r3, #0
 403 02bc 0310A011 		movne	r1, r3
 404              	.LVL56:
 405 02c0 0020A0E1 		mov	r2, r0
 406 02c4 0530A0E1 		mov	r3, r5
 407 02c8 0700A0E1 		mov	r0, r7
 408              	.LVL57:
 409              		.loc 1 152 0
 410 02cc 0CC08DE5 		str	ip, [sp, #12]
 411 02d0 390000EA 		b	.L85
 412              	.LVL58:
 413              	.L65:
 414              	.LBE3:
 154:utils/printf.c **** 				continue;
 155:utils/printf.c **** 			}
 156:utils/printf.c **** 			if( *format == 'd' ) {
 415              		.loc 1 156 0
 416 02d4 640052E3 		cmp	r2, #100
 417 02d8 0D00001A 		bne	.L71
 157:utils/printf.c **** 				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 418              		.loc 1 157 0
 419 02dc 6130A0E3 		mov	r3, #97
 420 02e0 00008DE5 		str	r0, [sp, #0]
 421 02e4 08308DE5 		str	r3, [sp, #8]
 422 02e8 0CC09DE5 		ldr	ip, [sp, #12]
 423 02ec 04508DE5 		str	r5, [sp, #4]
 424 02f0 0700A0E1 		mov	r0, r7
 425              	.LVL59:
 426 02f4 00109CE5 		ldr	r1, [ip, #0]
 427 02f8 0A20A0E3 		mov	r2, #10
 428 02fc 04C08CE2 		add	ip, ip, #4
 429 0300 0130A0E3 		mov	r3, #1
 430              	.LVL60:
 431              	.L86:
 432 0304 0CC08DE5 		str	ip, [sp, #12]
 433 0308 7AFFFFEB 		bl	printi
 434              	.LVL61:
 435              	.L84:
 436 030c 006086E0 		add	r6, r6, r0
 437 0310 2F0000EA 		b	.L70
 438              	.LVL62:
 439              	.L71:
 158:utils/printf.c **** 				continue;
 159:utils/printf.c **** 			}
 160:utils/printf.c **** 			if( *format == 'x' ) {
 440              		.loc 1 160 0
 441 0314 780052E3 		cmp	r2, #120
 161:utils/printf.c **** 				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 442              		.loc 1 161 0
 443 0318 00008D05 		streq	r0, [sp, #0]
 444 031c 04508D05 		streq	r5, [sp, #4]
 445 0320 6130A003 		moveq	r3, #97
 446              		.loc 1 160 0
 447 0324 0300000A 		beq	.L88
 162:utils/printf.c **** 				continue;
 163:utils/printf.c **** 			}
 164:utils/printf.c **** 			if( *format == 'X' ) {
 448              		.loc 1 164 0
 449 0328 580052E3 		cmp	r2, #88
 450 032c 0800001A 		bne	.L75
 165:utils/printf.c **** 				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 451              		.loc 1 165 0
 452 0330 21008DE8 		stmia	sp, {r0, r5}	@ phole stm
 453 0334 4130A0E3 		mov	r3, #65
 454              	.L88:
 455 0338 0CC09DE5 		ldr	ip, [sp, #12]
 456 033c 08308DE5 		str	r3, [sp, #8]
 457 0340 00109CE5 		ldr	r1, [ip, #0]
 458 0344 0700A0E1 		mov	r0, r7
 459              	.LVL63:
 460 0348 04C08CE2 		add	ip, ip, #4
 461 034c 1020A0E3 		mov	r2, #16
 462 0350 0A0000EA 		b	.L87
 463              	.LVL64:
 464              	.L75:
 166:utils/printf.c **** 				continue;
 167:utils/printf.c **** 			}
 168:utils/printf.c **** 			if( *format == 'u' ) {
 465              		.loc 1 168 0
 466 0354 750052E3 		cmp	r2, #117
 467 0358 0A00001A 		bne	.L77
 169:utils/printf.c **** 				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 468              		.loc 1 169 0
 469 035c 6130A0E3 		mov	r3, #97
 470 0360 00008DE5 		str	r0, [sp, #0]
 471 0364 0CC09DE5 		ldr	ip, [sp, #12]
 472 0368 04508DE5 		str	r5, [sp, #4]
 473 036c 08308DE5 		str	r3, [sp, #8]
 474 0370 0700A0E1 		mov	r0, r7
 475              	.LVL65:
 476 0374 00109CE5 		ldr	r1, [ip, #0]
 477 0378 0A20A0E3 		mov	r2, #10
 478 037c 04C08CE2 		add	ip, ip, #4
 479              	.LVL66:
 480              	.L87:
 481 0380 0030A0E3 		mov	r3, #0
 482 0384 DEFFFFEA 		b	.L86
 483              	.LVL67:
 484              	.L77:
 170:utils/printf.c **** 				continue;
 171:utils/printf.c **** 			}
 172:utils/printf.c **** 			if( *format == 'c' ) {
 485              		.loc 1 172 0
 486 0388 630052E3 		cmp	r2, #99
 487 038c 1000001A 		bne	.L70
 173:utils/printf.c **** 				/* char are converted to int then pushed on the stack */
 174:utils/printf.c **** 				scr[0] = (char)va_arg( args, int );
 488              		.loc 1 174 0
 489 0390 0CC09DE5 		ldr	ip, [sp, #12]
 490 0394 00E09CE5 		ldr	lr, [ip, #0]
 491 0398 04C08CE2 		add	ip, ip, #4
 492 039c 0CC08DE5 		str	ip, [sp, #12]
 175:utils/printf.c **** 				scr[1] = '\0';
 493              		.loc 1 175 0
 494 03a0 00C0A0E3 		mov	ip, #0
 495              		.loc 1 174 0
 496 03a4 12E0CDE5 		strb	lr, [sp, #18]
 497              		.loc 1 175 0
 498 03a8 13C0CDE5 		strb	ip, [sp, #19]
 176:utils/printf.c **** 				pc += prints (out, scr, width, pad);
 499              		.loc 1 176 0
 500 03ac 0020A0E1 		mov	r2, r0
 501 03b0 0530A0E1 		mov	r3, r5
 502 03b4 0700A0E1 		mov	r0, r7
 503              	.LVL68:
 504 03b8 12108DE2 		add	r1, sp, #18
 505              	.LVL69:
 506              	.L85:
 507 03bc 1CFFFFEB 		bl	prints
 508              	.LVL70:
 509 03c0 D1FFFFEA 		b	.L84
 510              	.LVL71:
 511              	.L52:
 177:utils/printf.c **** 				continue;
 178:utils/printf.c **** 			}
 179:utils/printf.c **** 		}
 180:utils/printf.c **** 		else {
 181:utils/printf.c **** 		out:
 182:utils/printf.c **** 			printchar (out, *format);
 512              		.loc 1 182 0
 513 03c4 0700A0E1 		mov	r0, r7
 514              	.LVL72:
 515 03c8 0010D4E5 		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 516 03cc 0BFFFFEB 		bl	printchar
 183:utils/printf.c **** 			++pc;
 517              		.loc 1 183 0
 518 03d0 016086E2 		add	r6, r6, #1
 519              	.LVL73:
 520              	.L70:
 521              		.loc 1 133 0
 522 03d4 014084E2 		add	r4, r4, #1
 523              	.LVL74:
 524              	.L50:
 525 03d8 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 526 03dc 000053E3 		cmp	r3, #0
 527 03e0 94FFFF1A 		bne	.L51
 528              	.L54:
 184:utils/printf.c **** 		}
 185:utils/printf.c **** 	}
 186:utils/printf.c **** 	if (out) **out = '\0';
 529              		.loc 1 186 0
 530 03e4 000057E3 		cmp	r7, #0
 531 03e8 00209715 		ldrne	r2, [r7, #0]
 532 03ec 0030A013 		movne	r3, #0
 187:utils/printf.c **** 	va_end( args );
 188:utils/printf.c **** 	return pc;
 189:utils/printf.c **** }
 533              		.loc 1 189 0
 534 03f0 0600A0E1 		mov	r0, r6
 535              	.LVL75:
 536              		.loc 1 186 0
 537 03f4 0030C215 		strneb	r3, [r2, #0]
 538              		.loc 1 189 0
 539 03f8 14D08DE2 		add	sp, sp, #20
 540 03fc F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 541 0400 1EFF2FE1 		bx	lr
 542              	.L90:
 543              		.align	2
 544              	.L89:
 545 0404 00000000 		.word	.LC0
 546              	.LFE5:
 548              		.align	2
 549              		.global	sprintf
 551              	sprintf:
 552              	.LFB7:
 190:utils/printf.c **** 
 191:utils/printf.c **** int printf(const char *format, ...)
 192:utils/printf.c **** {
 193:utils/printf.c ****         va_list args;
 194:utils/printf.c ****         
 195:utils/printf.c ****         va_start( args, format );
 196:utils/printf.c ****         return print( 0, format, args );
 197:utils/printf.c **** }
 198:utils/printf.c **** 
 199:utils/printf.c **** int sprintf(char *out, const char *format, ...)
 200:utils/printf.c **** {
 553              		.loc 1 200 0
 554              		@ Function supports interworking.
 555              		@ args = 4, pretend = 12, frame = 8
 556              		@ frame_needed = 0, uses_anonymous_args = 1
 557              	.LVL76:
 558 0408 0E002DE9 		stmfd	sp!, {r1, r2, r3}
 559              	.LCFI6:
 560 040c 04E02DE5 		str	lr, [sp, #-4]!
 561              	.LCFI7:
 562 0410 08D04DE2 		sub	sp, sp, #8
 563              	.LCFI8:
 201:utils/printf.c ****         va_list args;
 202:utils/printf.c ****         
 203:utils/printf.c ****         va_start( args, format );
 564              		.loc 1 203 0
 565 0414 10308DE2 		add	r3, sp, #16
 566              		.loc 1 200 0
 567 0418 00008DE5 		str	r0, [sp, #0]
 204:utils/printf.c ****         return print( &out, format, args );
 568              		.loc 1 204 0
 569 041c 0320A0E1 		mov	r2, r3
 570              	.LVL77:
 571 0420 0D00A0E1 		mov	r0, sp
 572              	.LVL78:
 573 0424 0C109DE5 		ldr	r1, [sp, #12]
 574              		.loc 1 203 0
 575 0428 04308DE5 		str	r3, [sp, #4]
 576              		.loc 1 204 0
 577 042c 7AFFFFEB 		bl	print
 578              	.LVL79:
 205:utils/printf.c **** }
 579              		.loc 1 205 0
 580 0430 08D08DE2 		add	sp, sp, #8
 581 0434 04E09DE4 		ldr	lr, [sp], #4
 582 0438 0CD08DE2 		add	sp, sp, #12
 583 043c 1EFF2FE1 		bx	lr
 584              	.LFE7:
 586              		.align	2
 587              		.global	printf
 589              	printf:
 590              	.LFB6:
 591              		.loc 1 192 0
 592              		@ Function supports interworking.
 593              		@ args = 4, pretend = 16, frame = 4
 594              		@ frame_needed = 0, uses_anonymous_args = 1
 595              	.LVL80:
 596 0440 0F002DE9 		stmfd	sp!, {r0, r1, r2, r3}
 597              	.LCFI9:
 598 0444 04E02DE5 		str	lr, [sp, #-4]!
 599              	.LCFI10:
 600 0448 04D04DE2 		sub	sp, sp, #4
 601              	.LCFI11:
 602              		.loc 1 195 0
 603 044c 0C308DE2 		add	r3, sp, #12
 604              		.loc 1 196 0
 605 0450 0320A0E1 		mov	r2, r3
 606              	.LVL81:
 607 0454 08109DE5 		ldr	r1, [sp, #8]
 608 0458 0000A0E3 		mov	r0, #0
 609              		.loc 1 195 0
 610 045c 00308DE5 		str	r3, [sp, #0]
 611              		.loc 1 196 0
 612 0460 6DFFFFEB 		bl	print
 613              	.LVL82:
 614              		.loc 1 197 0
 615 0464 04D08DE2 		add	sp, sp, #4
 616 0468 04E09DE4 		ldr	lr, [sp], #4
 617 046c 10D08DE2 		add	sp, sp, #16
 618 0470 1EFF2FE1 		bx	lr
 619              	.LFE6:
 794              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 printf.c
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:12     .text:00000000 printchar
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:21     .text:00000000 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:52     .text:00000034 prints
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:172    .text:000000f8 printi
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:328    .text:0000021c print
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:545    .text:00000404 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:551    .text:00000408 sprintf
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:558    .text:00000408 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccPSr47a.s:589    .text:00000440 printf

UNDEFINED SYMBOLS
putchar
__umodsi3
__udivsi3
