   1              		.file	"w5300.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	getIINCHIP_TxMAX
  13              	getIINCHIP_TxMAX:
  14              	.LFB67:
  15              		.file 1 "Wiznet/w5300.c"
   1:Wiznet/w5300.c **** /**
   2:Wiznet/w5300.c ****  * \file    w5300.c
   3:Wiznet/w5300.c ****  * Implementation of W5300 I/O fucntions
   4:Wiznet/w5300.c ****  *
   5:Wiznet/w5300.c ****  * This file implements the basic I/O fucntions that access a register of W5300( IINCHIP_REG).
   6:Wiznet/w5300.c ****  * 
   7:Wiznet/w5300.c ****  * Revision History :
   8:Wiznet/w5300.c ****  * ----------  -------  -----------  ----------------------------
   9:Wiznet/w5300.c ****  * Date        Version  Author       Description
  10:Wiznet/w5300.c ****  * ----------  -------  -----------  ----------------------------
  11:Wiznet/w5300.c ****  * 24/03/2008  1.0.0    MidnigthCow  Release with W5300 launching
  12:Wiznet/w5300.c ****  * ----------  -------  -----------  ----------------------------
  13:Wiznet/w5300.c ****  */
  14:Wiznet/w5300.c **** #include "w5300.h"
  15:Wiznet/w5300.c **** #include "DigiShort/ds5300.h"
  16:Wiznet/w5300.c **** 
  17:Wiznet/w5300.c **** #include <string.h>
  18:Wiznet/w5300.c **** 
  19:Wiznet/w5300.c **** extern	int 		W53ErFlg, sCRcnt, CRdyMax;
  20:Wiznet/w5300.c **** extern	uint8   socState[];
  21:Wiznet/w5300.c **** extern	int			ssrErr[];
  22:Wiznet/w5300.c **** 
  23:Wiznet/w5300.c **** extern	void		delay(unsigned long d);
  24:Wiznet/w5300.c **** 
  25:Wiznet/w5300.c **** int printf(const char *format, ...);
  26:Wiznet/w5300.c **** 
  27:Wiznet/w5300.c **** /** 
  28:Wiznet/w5300.c ****  * TX memory size variables
  29:Wiznet/w5300.c ****  */
  30:Wiznet/w5300.c **** uint32 TXMEM_SIZE[MAX_SOCK_NUM];
  31:Wiznet/w5300.c **** 
  32:Wiznet/w5300.c **** /** 
  33:Wiznet/w5300.c ****  * RX memory size variables
  34:Wiznet/w5300.c ****  */
  35:Wiznet/w5300.c **** uint32 RXMEM_SIZE[MAX_SOCK_NUM];
  36:Wiznet/w5300.c **** 
  37:Wiznet/w5300.c **** 
  38:Wiznet/w5300.c **** 
  39:Wiznet/w5300.c **** /***********************************
  40:Wiznet/w5300.c ****  * COMMON Register Access Function *
  41:Wiznet/w5300.c ****  ***********************************/
  42:Wiznet/w5300.c **** 
  43:Wiznet/w5300.c **** /* Interrupt */ 
  44:Wiznet/w5300.c **** 
  45:Wiznet/w5300.c **** uint16   getIR(void)
  46:Wiznet/w5300.c **** {
  47:Wiznet/w5300.c ****    return IINCHIP_READ(IR);
  48:Wiznet/w5300.c **** }
  49:Wiznet/w5300.c **** void     setIR(uint16 val)
  50:Wiznet/w5300.c **** {
  51:Wiznet/w5300.c ****    IINCHIP_WRITE(IR, val);   
  52:Wiznet/w5300.c **** }
  53:Wiznet/w5300.c **** 
  54:Wiznet/w5300.c **** uint16   getIMR(void)
  55:Wiznet/w5300.c **** {
  56:Wiznet/w5300.c ****    return IINCHIP_READ(IMR);
  57:Wiznet/w5300.c **** }
  58:Wiznet/w5300.c **** void     setIMR(uint16 mask)
  59:Wiznet/w5300.c **** {
  60:Wiznet/w5300.c ****    IINCHIP_WRITE(IMR, mask);
  61:Wiznet/w5300.c **** }
  62:Wiznet/w5300.c **** 
  63:Wiznet/w5300.c **** 
  64:Wiznet/w5300.c **** /* Network Information */
  65:Wiznet/w5300.c **** 
  66:Wiznet/w5300.c **** void     getSHAR(uint8 * addr)
  67:Wiznet/w5300.c **** {
  68:Wiznet/w5300.c ****    addr[0] = (uint8)(IINCHIP_READ(SHAR)>>8);
  69:Wiznet/w5300.c ****    addr[1] = (uint8)IINCHIP_READ(SHAR);
  70:Wiznet/w5300.c ****    addr[2] = (uint8)(IINCHIP_READ(SHAR2)>>8);
  71:Wiznet/w5300.c ****    addr[3] = (uint8)IINCHIP_READ(SHAR2);
  72:Wiznet/w5300.c ****    addr[4] = (uint8)(IINCHIP_READ(SHAR4)>>8);
  73:Wiznet/w5300.c ****    addr[5] = (uint8)IINCHIP_READ(SHAR4);
  74:Wiznet/w5300.c **** }
  75:Wiznet/w5300.c **** void     setSHAR(uint8 * addr)
  76:Wiznet/w5300.c **** {
  77:Wiznet/w5300.c ****    IINCHIP_WRITE(SHAR,(((uint16)addr[0])<<8)+addr[1]);
  78:Wiznet/w5300.c ****    IINCHIP_WRITE(SHAR2,((uint16)addr[2]<<8)+addr[3]);
  79:Wiznet/w5300.c ****    IINCHIP_WRITE(SHAR4,((uint16)addr[4]<<8)+addr[5]);
  80:Wiznet/w5300.c **** }
  81:Wiznet/w5300.c **** 
  82:Wiznet/w5300.c **** void     getGAR(uint8 * addr)
  83:Wiznet/w5300.c **** {
  84:Wiznet/w5300.c **** 	addr[0] = (uint8)(IINCHIP_READ(GAR)>>8);
  85:Wiznet/w5300.c **** 	addr[1] = (uint8)IINCHIP_READ(GAR);
  86:Wiznet/w5300.c **** 	addr[2] = (uint8)(IINCHIP_READ(GAR2)>>8);
  87:Wiznet/w5300.c **** 	addr[3] = (uint8)IINCHIP_READ(GAR2);   
  88:Wiznet/w5300.c **** }
  89:Wiznet/w5300.c **** void     setGAR(uint8 * addr)
  90:Wiznet/w5300.c **** {
  91:Wiznet/w5300.c **** 	IINCHIP_WRITE(GAR, ((uint16)addr[0]<<8)+(uint16)addr[1]);
  92:Wiznet/w5300.c **** 	IINCHIP_WRITE(GAR2,((uint16)addr[2]<<8)+(uint16)addr[3]);   
  93:Wiznet/w5300.c **** }
  94:Wiznet/w5300.c **** 
  95:Wiznet/w5300.c **** void     getSUBR(uint8 * addr)
  96:Wiznet/w5300.c **** {
  97:Wiznet/w5300.c **** 	addr[0] = (uint8)(IINCHIP_READ(SUBR)>>8);
  98:Wiznet/w5300.c **** 	addr[1] = (uint8)IINCHIP_READ(SUBR);
  99:Wiznet/w5300.c **** 	addr[2] = (uint8)(IINCHIP_READ(SUBR2)>>8);
 100:Wiznet/w5300.c **** 	addr[3] = (uint8)IINCHIP_READ(SUBR2);   
 101:Wiznet/w5300.c **** }
 102:Wiznet/w5300.c **** void     setSUBR(uint8 * addr)
 103:Wiznet/w5300.c **** {
 104:Wiznet/w5300.c **** 	IINCHIP_WRITE(SUBR, ((uint16)addr[0]<<8)+(uint16)addr[1]);
 105:Wiznet/w5300.c **** 	IINCHIP_WRITE(SUBR2,((uint16)addr[2]<<8)+(uint16)addr[3]);   
 106:Wiznet/w5300.c **** }
 107:Wiznet/w5300.c **** 
 108:Wiznet/w5300.c **** void     getSIPR(uint8 * addr)
 109:Wiznet/w5300.c **** {
 110:Wiznet/w5300.c **** 	addr[0] = (uint8)(IINCHIP_READ(SIPR)>>8);
 111:Wiznet/w5300.c **** 	addr[1] = (uint8)IINCHIP_READ(SIPR);
 112:Wiznet/w5300.c **** 	addr[2] = (uint8)(IINCHIP_READ(SIPR2)>>8);
 113:Wiznet/w5300.c **** 	addr[3] = (uint8)IINCHIP_READ(SIPR2);	
 114:Wiznet/w5300.c **** }
 115:Wiznet/w5300.c **** void     setSIPR(uint8 * addr)
 116:Wiznet/w5300.c **** {
 117:Wiznet/w5300.c **** 	IINCHIP_WRITE(SIPR,((uint16)addr[0]<<8)+(uint16)addr[1]);
 118:Wiznet/w5300.c **** 	IINCHIP_WRITE(SIPR2,((uint16)addr[2]<<8)+(uint16)addr[3]);   
 119:Wiznet/w5300.c **** }
 120:Wiznet/w5300.c **** 
 121:Wiznet/w5300.c **** 
 122:Wiznet/w5300.c **** /* Retransmittion */
 123:Wiznet/w5300.c **** 
 124:Wiznet/w5300.c **** uint16   getRTR(void)
 125:Wiznet/w5300.c **** {
 126:Wiznet/w5300.c ****    return IINCHIP_READ(RTR);
 127:Wiznet/w5300.c **** }
 128:Wiznet/w5300.c **** void     setRTR(uint16 timeout)
 129:Wiznet/w5300.c **** {
 130:Wiznet/w5300.c **** 	IINCHIP_WRITE(RTR,timeout);   
 131:Wiznet/w5300.c **** }
 132:Wiznet/w5300.c **** 
 133:Wiznet/w5300.c **** uint8    getRCR(void)
 134:Wiznet/w5300.c **** {
 135:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(RCR);
 136:Wiznet/w5300.c **** }
 137:Wiznet/w5300.c **** void     setRCR(uint8 retry)
 138:Wiznet/w5300.c **** {
 139:Wiznet/w5300.c ****    IINCHIP_WRITE(RCR,retry);
 140:Wiznet/w5300.c **** }
 141:Wiznet/w5300.c **** 
 142:Wiznet/w5300.c **** /* PPPoE */
 143:Wiznet/w5300.c **** uint16   getPATR(void)
 144:Wiznet/w5300.c **** {
 145:Wiznet/w5300.c ****    return IINCHIP_READ(PATR);
 146:Wiznet/w5300.c **** }
 147:Wiznet/w5300.c **** 
 148:Wiznet/w5300.c **** uint8    getPTIMER(void)
 149:Wiznet/w5300.c **** {
 150:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(PTIMER);
 151:Wiznet/w5300.c **** }
 152:Wiznet/w5300.c **** void     setPTIMER(uint8 time)
 153:Wiznet/w5300.c **** {
 154:Wiznet/w5300.c ****    IINCHIP_WRITE(PTIMER,time);
 155:Wiznet/w5300.c **** }
 156:Wiznet/w5300.c **** 
 157:Wiznet/w5300.c **** uint8    getPMAGICR(void)
 158:Wiznet/w5300.c **** {
 159:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(PMAGICR);
 160:Wiznet/w5300.c **** }
 161:Wiznet/w5300.c **** void     setPMAGICR(uint8 magic)
 162:Wiznet/w5300.c **** {
 163:Wiznet/w5300.c ****    IINCHIP_WRITE(PMAGICR,magic);
 164:Wiznet/w5300.c **** }
 165:Wiznet/w5300.c **** 
 166:Wiznet/w5300.c **** uint16   getPSIDR(void)
 167:Wiznet/w5300.c **** {
 168:Wiznet/w5300.c ****    return IINCHIP_READ(PSIDR);
 169:Wiznet/w5300.c **** }
 170:Wiznet/w5300.c **** 
 171:Wiznet/w5300.c **** void     getPDHAR(uint8* addr)
 172:Wiznet/w5300.c **** {
 173:Wiznet/w5300.c ****    addr[0] = (uint8)(IINCHIP_READ(PDHAR) >> 8);
 174:Wiznet/w5300.c ****    addr[1] = (uint8)IINCHIP_READ(PDHAR);
 175:Wiznet/w5300.c ****    addr[2] = (uint8)(IINCHIP_READ(PDHAR2) >> 8);
 176:Wiznet/w5300.c ****    addr[3] = (uint8)IINCHIP_READ(PDHAR2);
 177:Wiznet/w5300.c ****    addr[4] = (uint8)(IINCHIP_READ(PDHAR4) >> 8);
 178:Wiznet/w5300.c ****    addr[5] = (uint8)IINCHIP_READ(PDHAR4);
 179:Wiznet/w5300.c **** }
 180:Wiznet/w5300.c **** 
 181:Wiznet/w5300.c **** 
 182:Wiznet/w5300.c **** /* ICMP packets */
 183:Wiznet/w5300.c **** 
 184:Wiznet/w5300.c **** void     getUIPR(uint8* addr)
 185:Wiznet/w5300.c **** {
 186:Wiznet/w5300.c ****    addr[0] = (uint8)(IINCHIP_READ(UIPR) >> 8);
 187:Wiznet/w5300.c ****    addr[1] = (uint8)IINCHIP_READ(UIPR);
 188:Wiznet/w5300.c ****    addr[2] = (uint8)(IINCHIP_READ(UIPR2) >> 8);
 189:Wiznet/w5300.c ****    addr[3] = (uint8)IINCHIP_READ(UIPR2);   
 190:Wiznet/w5300.c **** }
 191:Wiznet/w5300.c **** 
 192:Wiznet/w5300.c **** uint16   getUPORTR(void)
 193:Wiznet/w5300.c **** {
 194:Wiznet/w5300.c ****    return IINCHIP_READ(UPORTR);
 195:Wiznet/w5300.c **** }
 196:Wiznet/w5300.c **** 
 197:Wiznet/w5300.c **** uint16   getFMTUR(void)
 198:Wiznet/w5300.c **** {
 199:Wiznet/w5300.c ****    return IINCHIP_READ(FMTUR);
 200:Wiznet/w5300.c **** }
 201:Wiznet/w5300.c **** 
 202:Wiznet/w5300.c **** 
 203:Wiznet/w5300.c **** /* PIN "BRYDn" */
 204:Wiznet/w5300.c **** 
 205:Wiznet/w5300.c **** uint8    getPn_BRDYR(uint8 p)
 206:Wiznet/w5300.c **** {
 207:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(Pn_BRDYR(p));
 208:Wiznet/w5300.c **** }
 209:Wiznet/w5300.c **** void     setPn_BRDYR(uint8 p, uint8 cfg)
 210:Wiznet/w5300.c **** {
 211:Wiznet/w5300.c ****    IINCHIP_WRITE(Pn_BRDYR(p),cfg);   
 212:Wiznet/w5300.c **** }
 213:Wiznet/w5300.c **** 
 214:Wiznet/w5300.c **** 
 215:Wiznet/w5300.c **** uint16   getPn_BDPTHR(uint8 p)
 216:Wiznet/w5300.c **** {
 217:Wiznet/w5300.c ****    return IINCHIP_READ(Pn_BDPTHR(p));   
 218:Wiznet/w5300.c **** }
 219:Wiznet/w5300.c **** void     setPn_BDPTHR(uint8 p, uint16 depth)
 220:Wiznet/w5300.c **** {
 221:Wiznet/w5300.c ****    IINCHIP_WRITE(Pn_BDPTHR(p),depth);
 222:Wiznet/w5300.c **** }
 223:Wiznet/w5300.c **** 
 224:Wiznet/w5300.c **** 
 225:Wiznet/w5300.c **** /* IINCHIP ID */
 226:Wiznet/w5300.c **** uint16   getIDR(void)
 227:Wiznet/w5300.c **** {
 228:Wiznet/w5300.c ****    return IINCHIP_READ(IDR);
 229:Wiznet/w5300.c **** }
 230:Wiznet/w5300.c **** 
 231:Wiznet/w5300.c **** 
 232:Wiznet/w5300.c **** /***********************************
 233:Wiznet/w5300.c ****  * SOCKET Register Access Function *
 234:Wiznet/w5300.c ****  ***********************************/
 235:Wiznet/w5300.c **** 
 236:Wiznet/w5300.c **** /* SOCKET control */
 237:Wiznet/w5300.c **** 
 238:Wiznet/w5300.c **** uint16   getSn_MR(SOCKET s)
 239:Wiznet/w5300.c **** {
 240:Wiznet/w5300.c ****    return IINCHIP_READ(Sn_MR(s));
 241:Wiznet/w5300.c **** }
 242:Wiznet/w5300.c **** void     setSn_MR(SOCKET s, uint16 mode)
 243:Wiznet/w5300.c **** {
 244:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_MR(s),mode);
 245:Wiznet/w5300.c **** }
 246:Wiznet/w5300.c **** 
 247:Wiznet/w5300.c **** uint8    getSn_CR(SOCKET s)
 248:Wiznet/w5300.c **** {
 249:Wiznet/w5300.c ****    return IINCHIP_READ(Sn_CR(s));
 250:Wiznet/w5300.c **** }
 251:Wiznet/w5300.c **** 
 252:Wiznet/w5300.c **** void     setSn_CR(SOCKET s, uint16 com)
 253:Wiznet/w5300.c **** {
 254:Wiznet/w5300.c **** 	int cnt=0;
 255:Wiznet/w5300.c **** 	uint16 v1, v2, v3;
 256:Wiznet/w5300.c **** 	
 257:Wiznet/w5300.c **** 	sCRcnt++;
 258:Wiznet/w5300.c **** 	
 259:Wiznet/w5300.c **** 	
 260:Wiznet/w5300.c ****   IINCHIP_WRITE(Sn_CR(s),com);
 261:Wiznet/w5300.c ****   while(IINCHIP_READ(Sn_CR(s))) { // wait until Sn_CR is cleared.
 262:Wiznet/w5300.c ****   	cnt++;
 263:Wiznet/w5300.c ****   	if ( cnt>CRdyMax ) CRdyMax = cnt;
 264:Wiznet/w5300.c ****   	if ( cnt>20000 ) {
 265:Wiznet/w5300.c **** 	  	v1 = IINCHIP_READ(Sn_CR(s));
 266:Wiznet/w5300.c **** 	  	v2 = getSn_IR(s);
 267:Wiznet/w5300.c **** 	  	v3 = getSn_SSR(s);
 268:Wiznet/w5300.c **** 	  	printf("\n\r##CmdRdy Timeout CRcnt=%d cmd=%04x  S(%d)_CR=%04x  ", 
 269:Wiznet/w5300.c **** 	  					 sCRcnt, com, s, v1 );
 270:Wiznet/w5300.c **** 	  	printf("Sn_IR=%02x  ", v2);
 271:Wiznet/w5300.c **** 	  	printf("Sn_SSR=%02x  ", v3);
 272:Wiznet/w5300.c **** 	  	
 273:Wiznet/w5300.c **** 	  	
 274:Wiznet/w5300.c **** 	  	W53ErFlg = 1;
 275:Wiznet/w5300.c **** 	  	break;
 276:Wiznet/w5300.c ****   	}
 277:Wiznet/w5300.c **** 	}
 278:Wiznet/w5300.c **** }
 279:Wiznet/w5300.c **** 
 280:Wiznet/w5300.c **** uint8    getSn_IMR(SOCKET s)
 281:Wiznet/w5300.c **** {
 282:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(Sn_IMR(s));
 283:Wiznet/w5300.c **** }
 284:Wiznet/w5300.c **** 
 285:Wiznet/w5300.c **** void     setSn_IMR(SOCKET s, uint8 mask)
 286:Wiznet/w5300.c **** {
 287:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_IMR(s),mask);
 288:Wiznet/w5300.c **** }
 289:Wiznet/w5300.c **** 
 290:Wiznet/w5300.c **** uint8    getSn_IR(SOCKET s)
 291:Wiznet/w5300.c **** {
 292:Wiznet/w5300.c **** 	uint8 v1;
 293:Wiznet/w5300.c **** 
 294:Wiznet/w5300.c **** 	v1 = (uint8)IINCHIP_READ(Sn_IR(s)); 
 295:Wiznet/w5300.c **** 	return v1;
 296:Wiznet/w5300.c **** }
 297:Wiznet/w5300.c **** 
 298:Wiznet/w5300.c **** void     setSn_IR(SOCKET s, uint8 ir)
 299:Wiznet/w5300.c **** {
 300:Wiznet/w5300.c **** 	IINCHIP_WRITE(Sn_IR(s),ir);   
 301:Wiznet/w5300.c **** }
 302:Wiznet/w5300.c **** 
 303:Wiznet/w5300.c **** 
 304:Wiznet/w5300.c **** /* SOCKET information */
 305:Wiznet/w5300.c **** 
 306:Wiznet/w5300.c **** uint8    getSn_SSR(SOCKET s)
 307:Wiznet/w5300.c **** {
 308:Wiznet/w5300.c ****   uint8 ssr, ssr1, ssr2;
 309:Wiznet/w5300.c ****   ssr = (uint8)IINCHIP_READ(Sn_SSR(s));     // first read
 310:Wiznet/w5300.c ****   
 311:Wiznet/w5300.c ****   while(1) {
 312:Wiznet/w5300.c **** 		//delay(5);
 313:Wiznet/w5300.c **** 		ssr1 = (uint8)IINCHIP_READ(Sn_SSR(s)); // second read
 314:Wiznet/w5300.c **** 		if(ssr == ssr1) break;                 // if first == sencond, Sn_SSR value is valid.
 315:Wiznet/w5300.c **** 		ssr2 = (uint8)IINCHIP_READ(Sn_SSR(s));
 316:Wiznet/w5300.c **** 		
 317:Wiznet/w5300.c **** 		ssr2 = (uint8)IINCHIP_READ(Sn_SSR(s));
 318:Wiznet/w5300.c ****       
 319:Wiznet/w5300.c **** 		ssr = ssr1;                            // if first <> second, save second value into first.
 320:Wiznet/w5300.c **** 	}
 321:Wiznet/w5300.c **** 	if ( (ssr==SOCK_CLOSED) && (ssr != socState[s]) ) {
 322:Wiznet/w5300.c **** 		ssrErr[s]++;
 323:Wiznet/w5300.c **** 		if ( ssrErr[s] < 3 ) {
 324:Wiznet/w5300.c **** 			ssr2 = (uint8)IINCHIP_READ(Sn_SSR(s));
 325:Wiznet/w5300.c **** 		}
 326:Wiznet/w5300.c **** 	} 
 327:Wiznet/w5300.c **** 	return ssr;
 328:Wiznet/w5300.c **** }
 329:Wiznet/w5300.c **** 
 330:Wiznet/w5300.c **** void     getSn_DHAR(SOCKET s, uint8* addr)
 331:Wiznet/w5300.c **** {
 332:Wiznet/w5300.c ****    addr[0] = (uint8)(IINCHIP_READ(Sn_DHAR(s))>>8);
 333:Wiznet/w5300.c ****    addr[1] = (uint8)IINCHIP_READ(Sn_DHAR(s));
 334:Wiznet/w5300.c ****    addr[2] = (uint8)(IINCHIP_READ(Sn_DHAR2(s))>>8);
 335:Wiznet/w5300.c ****    addr[3] = (uint8)IINCHIP_READ(Sn_DHAR2(s));
 336:Wiznet/w5300.c ****    addr[4] = (uint8)(IINCHIP_READ(Sn_DHAR4(s))>>8);
 337:Wiznet/w5300.c ****    addr[5] = (uint8)IINCHIP_READ(Sn_DHAR4(s));
 338:Wiznet/w5300.c **** }
 339:Wiznet/w5300.c **** 
 340:Wiznet/w5300.c **** void     setSn_DHAR(SOCKET s, uint8* addr)
 341:Wiznet/w5300.c **** {
 342:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_DHAR(s),  ((uint16)(addr[0]<<8)) + addr[1]);
 343:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_DHAR2(s), ((uint16)(addr[2]<<8)) + addr[3]);
 344:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_DHAR4(s), ((uint16)(addr[4]<<8)) + addr[5]);
 345:Wiznet/w5300.c **** }
 346:Wiznet/w5300.c **** 
 347:Wiznet/w5300.c **** uint16   getSn_DPORTR(SOCKET s)
 348:Wiznet/w5300.c **** {
 349:Wiznet/w5300.c ****    return IINCHIP_READ(Sn_DPORTR(s));
 350:Wiznet/w5300.c **** }
 351:Wiznet/w5300.c **** 
 352:Wiznet/w5300.c **** void     setSn_DPORTR(SOCKET s, uint16 port)
 353:Wiznet/w5300.c **** {
 354:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_DPORTR(s),port);
 355:Wiznet/w5300.c **** }
 356:Wiznet/w5300.c **** 
 357:Wiznet/w5300.c **** void     getSn_DIPR(SOCKET s, uint8* addr)
 358:Wiznet/w5300.c **** {
 359:Wiznet/w5300.c ****    addr[0] = (uint8)(IINCHIP_READ(Sn_DIPR(s))>>8);
 360:Wiznet/w5300.c ****    addr[1] = (uint8)IINCHIP_READ(Sn_DIPR(s));
 361:Wiznet/w5300.c ****    addr[2] = (uint8)(IINCHIP_READ(Sn_DIPR2(s))>>8);
 362:Wiznet/w5300.c ****    addr[3] = (uint8)IINCHIP_READ(Sn_DHAR2(s));   
 363:Wiznet/w5300.c **** }
 364:Wiznet/w5300.c **** void     setSn_DIPR(SOCKET s, uint8* addr)
 365:Wiznet/w5300.c **** {
 366:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_DIPR(s),  ((uint16)(addr[0]<<8)) + addr[1]);
 367:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_DIPR2(s), ((uint16)(addr[2]<<8)) + addr[3]);  
 368:Wiznet/w5300.c **** }
 369:Wiznet/w5300.c **** 
 370:Wiznet/w5300.c **** uint16   getSn_MSSR(SOCKET s)
 371:Wiznet/w5300.c **** {
 372:Wiznet/w5300.c ****    return IINCHIP_READ(Sn_MSSR(s));
 373:Wiznet/w5300.c **** }
 374:Wiznet/w5300.c **** 
 375:Wiznet/w5300.c **** void     setSn_MSSR(SOCKET s, uint16 mss)
 376:Wiznet/w5300.c **** {
 377:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_MSSR(s),mss);
 378:Wiznet/w5300.c **** }
 379:Wiznet/w5300.c **** 
 380:Wiznet/w5300.c **** 
 381:Wiznet/w5300.c **** /* SOCKET communication */
 382:Wiznet/w5300.c **** 
 383:Wiznet/w5300.c **** uint8    getSn_KPALVTR(SOCKET s)
 384:Wiznet/w5300.c **** {
 385:Wiznet/w5300.c ****    return (uint8)(IINCHIP_READ(Sn_KPALVTR(s)) >> 8);
 386:Wiznet/w5300.c **** }
 387:Wiznet/w5300.c **** 
 388:Wiznet/w5300.c **** void     setSn_KPALVTR(SOCKET s, uint8 time)
 389:Wiznet/w5300.c **** {
 390:Wiznet/w5300.c ****    uint16 keepalive=0;
 391:Wiznet/w5300.c ****    keepalive = (IINCHIP_READ(Sn_KPALVTR(s)) & 0x00FF) + ((uint16)time<<8);
 392:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_KPALVTR(s),keepalive);
 393:Wiznet/w5300.c **** }
 394:Wiznet/w5300.c **** 
 395:Wiznet/w5300.c **** uint32   getSn_TX_WRSR(SOCKET s)
 396:Wiznet/w5300.c **** {
 397:Wiznet/w5300.c ****    uint32 tx_write_size=0;
 398:Wiznet/w5300.c ****    tx_write_size = IINCHIP_READ(Sn_TX_WRSR(s));
 399:Wiznet/w5300.c ****    tx_write_size = (tx_write_size << 16) + IINCHIP_READ(Sn_TX_WRSR2(s));
 400:Wiznet/w5300.c ****    return tx_write_size;
 401:Wiznet/w5300.c **** }
 402:Wiznet/w5300.c **** 
 403:Wiznet/w5300.c **** void     setSn_TX_WRSR(SOCKET s, uint32 size)
 404:Wiznet/w5300.c **** {
 405:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_TX_WRSR(s), (uint16)(size >> 16));
 406:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_TX_WRSR2(s), (uint16)size);
 407:Wiznet/w5300.c **** }
 408:Wiznet/w5300.c **** 
 409:Wiznet/w5300.c **** uint32   getSn_TX_FSR(SOCKET s)
 410:Wiznet/w5300.c **** {
 411:Wiznet/w5300.c ****    uint32 free_tx_size=0;
 412:Wiznet/w5300.c ****    uint32 free_tx_size1=0;
 413:Wiznet/w5300.c ****    while(1)
 414:Wiznet/w5300.c ****    {
 415:Wiznet/w5300.c ****       free_tx_size = IINCHIP_READ(Sn_TX_FSR(s));                           // read                 
 416:Wiznet/w5300.c ****       free_tx_size = (free_tx_size << 16) + IINCHIP_READ(Sn_TX_FSR2(s));                           
 417:Wiznet/w5300.c ****       if(free_tx_size == free_tx_size1) break;                             // if first == sencond, 
 418:Wiznet/w5300.c ****       free_tx_size1 = free_tx_size;                                        // save second value int
 419:Wiznet/w5300.c ****    }                                                                       
 420:Wiznet/w5300.c ****    return free_tx_size;                                                    
 421:Wiznet/w5300.c **** }                                                                          
 422:Wiznet/w5300.c **** 
 423:Wiznet/w5300.c **** uint32   getSn_RX_RSR(SOCKET s)
 424:Wiznet/w5300.c **** {
 425:Wiznet/w5300.c ****    uint32 received_rx_size=0;
 426:Wiznet/w5300.c ****    uint32 received_rx_size1=1;
 427:Wiznet/w5300.c ****    while(1)
 428:Wiznet/w5300.c ****    {
 429:Wiznet/w5300.c ****       received_rx_size = IINCHIP_READ(Sn_RX_RSR(s));
 430:Wiznet/w5300.c ****       received_rx_size = (received_rx_size << 16) + IINCHIP_READ(Sn_RX_RSR2(s)); // read           
 431:Wiznet/w5300.c ****       if(received_rx_size == received_rx_size1) break;                                             
 432:Wiznet/w5300.c ****       received_rx_size1 = received_rx_size;                                      // if first == sen
 433:Wiznet/w5300.c ****    }                                                                             // save second val
 434:Wiznet/w5300.c ****    return received_rx_size;   
 435:Wiznet/w5300.c **** }
 436:Wiznet/w5300.c **** 
 437:Wiznet/w5300.c **** 
 438:Wiznet/w5300.c **** void     setSn_TX_FIFOR(SOCKET s, uint16 data)
 439:Wiznet/w5300.c **** {
 440:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_TX_FIFOR(s),data);
 441:Wiznet/w5300.c **** }
 442:Wiznet/w5300.c **** 
 443:Wiznet/w5300.c **** uint16   getSn_RX_FIFOR(SOCKET s)
 444:Wiznet/w5300.c **** {
 445:Wiznet/w5300.c ****    return IINCHIP_READ(Sn_RX_FIFOR(s));
 446:Wiznet/w5300.c **** }
 447:Wiznet/w5300.c **** 
 448:Wiznet/w5300.c **** 
 449:Wiznet/w5300.c **** /* IP header field */
 450:Wiznet/w5300.c **** 
 451:Wiznet/w5300.c **** uint8    getSn_PROTOR(SOCKET s)
 452:Wiznet/w5300.c **** {
 453:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(Sn_PROTOR(s));
 454:Wiznet/w5300.c **** }
 455:Wiznet/w5300.c **** void     setSn_PROTOR(SOCKET s, uint8 pronum)
 456:Wiznet/w5300.c **** {
 457:Wiznet/w5300.c ****    uint16 protocolnum;
 458:Wiznet/w5300.c ****    protocolnum = (IINCHIP_READ(Sn_PROTOR(s)) & 0xFF00) + pronum;
 459:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_PROTOR(s),protocolnum);
 460:Wiznet/w5300.c **** }
 461:Wiznet/w5300.c **** 
 462:Wiznet/w5300.c **** uint8    getSn_TOSR(SOCKET s)
 463:Wiznet/w5300.c **** {
 464:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(Sn_TOSR(s));
 465:Wiznet/w5300.c **** }
 466:Wiznet/w5300.c **** void     setSn_TOSR(SOCKET s, uint8 tos)
 467:Wiznet/w5300.c **** {
 468:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_TOSR(s),tos);
 469:Wiznet/w5300.c **** }
 470:Wiznet/w5300.c **** 
 471:Wiznet/w5300.c **** uint8    getSn_TTLR(SOCKET s)
 472:Wiznet/w5300.c **** {
 473:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(Sn_TTLR(s));
 474:Wiznet/w5300.c **** }
 475:Wiznet/w5300.c **** void     setSn_TTLR(SOCKET s, uint8 ttl)
 476:Wiznet/w5300.c **** {
 477:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_TTLR(s),ttl);
 478:Wiznet/w5300.c **** }
 479:Wiznet/w5300.c **** 
 480:Wiznet/w5300.c **** uint8    getSn_FRAGR(SOCKET s)
 481:Wiznet/w5300.c **** {
 482:Wiznet/w5300.c ****    return (uint8)IINCHIP_READ(Sn_FRAGR(s));
 483:Wiznet/w5300.c **** }
 484:Wiznet/w5300.c **** 
 485:Wiznet/w5300.c **** void     setSn_FRAGR(SOCKET s, uint8 frag)
 486:Wiznet/w5300.c **** {
 487:Wiznet/w5300.c ****    IINCHIP_WRITE(Sn_FRAGR(s),frag);
 488:Wiznet/w5300.c **** }
 489:Wiznet/w5300.c **** 
 490:Wiznet/w5300.c **** 
 491:Wiznet/w5300.c **** /*******
 492:Wiznet/w5300.c ****  * ETC *
 493:Wiznet/w5300.c ****  *******/
 494:Wiznet/w5300.c **** 
 495:Wiznet/w5300.c **** 
 496:Wiznet/w5300.c **** /* Internal memory operation */
 497:Wiznet/w5300.c ****  
 498:Wiznet/w5300.c **** uint8    sysinit(uint8* tx_size, uint8* rx_size)
 499:Wiznet/w5300.c **** {
 500:Wiznet/w5300.c ****    uint16 i;
 501:Wiznet/w5300.c ****    uint16 ssum=0,rsum=0;
 502:Wiznet/w5300.c ****    uint mem_cfg = 0;
 503:Wiznet/w5300.c ****    
 504:Wiznet/w5300.c ****    for(i=0; i < MAX_SOCK_NUM; i++)
 505:Wiznet/w5300.c ****    {
 506:Wiznet/w5300.c ****       if(tx_size[i] > 64)
 507:Wiznet/w5300.c ****       {
 508:Wiznet/w5300.c ****       #ifdef __DEF_IINCHIP_DBG__
 509:Wiznet/w5300.c ****          printf("Illegal Channel(%d) TX Memory Size.\n\r",i);
 510:Wiznet/w5300.c ****       #endif
 511:Wiznet/w5300.c ****          return 0;
 512:Wiznet/w5300.c ****       }
 513:Wiznet/w5300.c ****       if(rx_size[i] > 64)
 514:Wiznet/w5300.c ****       {
 515:Wiznet/w5300.c ****       #ifdef __DEF_IINCHIP_DBG__         
 516:Wiznet/w5300.c ****          printf("Illegal Channel(%d) RX Memory Size.\n\r",i);
 517:Wiznet/w5300.c ****       #endif
 518:Wiznet/w5300.c ****          return 0;
 519:Wiznet/w5300.c ****       }
 520:Wiznet/w5300.c ****       ssum += (uint16)tx_size[i];
 521:Wiznet/w5300.c ****       rsum += (uint16)rx_size[i];
 522:Wiznet/w5300.c ****       TXMEM_SIZE[i] = ((uint32)tx_size[i]) << 10;
 523:Wiznet/w5300.c ****       RXMEM_SIZE[i] = ((uint32)rx_size[i]) << 10;
 524:Wiznet/w5300.c ****    }
 525:Wiznet/w5300.c ****    if( (ssum % 8) || ((ssum + rsum) != 128) )
 526:Wiznet/w5300.c ****    {
 527:Wiznet/w5300.c ****    #ifdef __DEF_IINCHIP_DBG__
 528:Wiznet/w5300.c ****       printf("Illegal Memory Allocation\n\r");
 529:Wiznet/w5300.c ****    #endif
 530:Wiznet/w5300.c ****       return 0;
 531:Wiznet/w5300.c ****       //return 1;
 532:Wiznet/w5300.c ****    }
 533:Wiznet/w5300.c ****    
 534:Wiznet/w5300.c ****    IINCHIP_WRITE(TMS01R,((uint16)tx_size[0] << 8) + (uint16)tx_size[1]);
 535:Wiznet/w5300.c ****    IINCHIP_WRITE(TMS23R,((uint16)tx_size[2] << 8) + (uint16)tx_size[3]);
 536:Wiznet/w5300.c ****    IINCHIP_WRITE(TMS45R,((uint16)tx_size[4] << 8) + (uint16)tx_size[5]);
 537:Wiznet/w5300.c ****    IINCHIP_WRITE(TMS67R,((uint16)tx_size[6] << 8) + (uint16)tx_size[7]);
 538:Wiznet/w5300.c ****    
 539:Wiznet/w5300.c ****    IINCHIP_WRITE(RMS01R,((uint16)rx_size[0] << 8) + (uint16)rx_size[1]);
 540:Wiznet/w5300.c ****    IINCHIP_WRITE(RMS23R,((uint16)rx_size[2] << 8) + (uint16)rx_size[3]);
 541:Wiznet/w5300.c ****    IINCHIP_WRITE(RMS45R,((uint16)rx_size[4] << 8) + (uint16)rx_size[5]);
 542:Wiznet/w5300.c ****    IINCHIP_WRITE(RMS67R,((uint16)rx_size[6] << 8) + (uint16)rx_size[7]);
 543:Wiznet/w5300.c ****    
 544:Wiznet/w5300.c ****    for(i=0; i <ssum/8 ; i++)
 545:Wiznet/w5300.c ****    {
 546:Wiznet/w5300.c ****       mem_cfg <<= 1;
 547:Wiznet/w5300.c ****       mem_cfg |= 1;
 548:Wiznet/w5300.c ****    }
 549:Wiznet/w5300.c ****    
 550:Wiznet/w5300.c ****    IINCHIP_WRITE(MTYPER,mem_cfg);
 551:Wiznet/w5300.c ****    
 552:Wiznet/w5300.c ****    #ifdef __DEF_IINCHIP_DBG_
 553:Wiznet/w5300.c ****    	/***
 554:Wiznet/w5300.c **** 			printf("Total TX Memory Size = %dKB\n\r",ssum);
 555:Wiznet/w5300.c ****       printf("Total RX Memory Size = %dKB\n\r",rsum);
 556:Wiznet/w5300.c ****       printf("Ch : TX SIZE : RECV SIZE\n\r");
 557:Wiznet/w5300.c ****       printf("%02d : %07dKB : %07dKB \n\r", 0, (uint8)(IINCHIP_READ(TMS01R)>>8),(uint8)(IINCHIP_REA
 558:Wiznet/w5300.c ****       printf("%02d : %07dKB : %07dKB \n\r", 1, (uint8)IINCHIP_READ(TMS01R),(uint8)IINCHIP_READ(RMS0
 559:Wiznet/w5300.c ****       printf("%02d : %07dKB : %07dKB \n\r", 2, (uint8)(IINCHIP_READ(TMS23R)>>8),(uint8)(IINCHIP_REA
 560:Wiznet/w5300.c ****       printf("%02d : %07dKB : %07dKB \n\r", 3, (uint8)IINCHIP_READ(TMS23R),(uint8)IINCHIP_READ(RMS2
 561:Wiznet/w5300.c ****       printf("%02d : %07dKB : %07dKB \n\r", 4, (uint8)(IINCHIP_READ(TMS45R)>>8),(uint8)(IINCHIP_REA
 562:Wiznet/w5300.c ****       printf("%02d : %07dKB : %07dKB \n\r", 5, (uint8)IINCHIP_READ(TMS45R),(uint8)IINCHIP_READ(RMS4
 563:Wiznet/w5300.c ****       printf("%02d : %07dKB : %07dKB \n\r", 6, (uint8)(IINCHIP_READ(TMS67R)>>8),(uint8)(IINCHIP_REA
 564:Wiznet/w5300.c ****       printf("%02d : %07dKB : %07dKB \n\r", 7, (uint8)IINCHIP_READ(TMS67R),(uint8)IINCHIP_READ(RMS6
 565:Wiznet/w5300.c ****       printf("\n\rMTYPER=%04x\n\r",IINCHIP_READ(MTYPER));
 566:Wiznet/w5300.c ****     ****/
 567:Wiznet/w5300.c ****    #endif
 568:Wiznet/w5300.c ****    
 569:Wiznet/w5300.c ****    return 1;
 570:Wiznet/w5300.c **** }
 571:Wiznet/w5300.c **** 
 572:Wiznet/w5300.c **** uint32   getIINCHIP_TxMAX(SOCKET s)
 573:Wiznet/w5300.c **** {
  16              		.loc 1 573 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 574:Wiznet/w5300.c ****    return TXMEM_SIZE[s];
 575:Wiznet/w5300.c **** }
  22              		.loc 1 575 0
  23 0000 08309FE5 		ldr	r3, .L3
  24              		.loc 1 573 0
  25 0004 FF0000E2 		and	r0, r0, #255
  26              		.loc 1 575 0
  27 0008 000193E7 		ldr	r0, [r3, r0, asl #2]
  28              	.LVL1:
  29              		.loc 1 573 0
  30              		@ lr needed for prologue
  31              		.loc 1 575 0
  32 000c 1EFF2FE1 		bx	lr
  33              	.L4:
  34              		.align	2
  35              	.L3:
  36 0010 00000000 		.word	TXMEM_SIZE
  37              	.LFE67:
  39              		.align	2
  40              		.global	getIINCHIP_RxMAX
  42              	getIINCHIP_RxMAX:
  43              	.LFB68:
 576:Wiznet/w5300.c **** 
 577:Wiznet/w5300.c **** uint32   getIINCHIP_RxMAX(SOCKET s)
 578:Wiznet/w5300.c **** {
  44              		.loc 1 578 0
  45              		@ Function supports interworking.
  46              		@ args = 0, pretend = 0, frame = 0
  47              		@ frame_needed = 0, uses_anonymous_args = 0
  48              		@ link register save eliminated.
  49              	.LVL2:
 579:Wiznet/w5300.c ****    return RXMEM_SIZE[s];
 580:Wiznet/w5300.c **** }
  50              		.loc 1 580 0
  51 0014 08309FE5 		ldr	r3, .L7
  52              		.loc 1 578 0
  53 0018 FF0000E2 		and	r0, r0, #255
  54              		.loc 1 580 0
  55 001c 000193E7 		ldr	r0, [r3, r0, asl #2]
  56              	.LVL3:
  57              		.loc 1 578 0
  58              		@ lr needed for prologue
  59              		.loc 1 580 0
  60 0020 1EFF2FE1 		bx	lr
  61              	.L8:
  62              		.align	2
  63              	.L7:
  64 0024 00000000 		.word	RXMEM_SIZE
  65              	.LFE68:
  67              		.align	2
  68              		.global	wait_1us
  70              	wait_1us:
  71              	.LFB69:
 581:Wiznet/w5300.c **** 
 582:Wiznet/w5300.c **** 
 583:Wiznet/w5300.c **** void  wait_1us(uint32 us)
 584:Wiznet/w5300.c **** {
  72              		.loc 1 584 0
  73              		@ Function supports interworking.
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77              	.LVL4:
  78              		@ lr needed for prologue
 585:Wiznet/w5300.c ****    uint32 i,j;
 586:Wiznet/w5300.c ****    for(i = 0; i < us ; i++)
 587:Wiznet/w5300.c ****    {
 588:Wiznet/w5300.c ****       for(j = 0; j < 100; j++);
 589:Wiznet/w5300.c ****    }
 590:Wiznet/w5300.c **** }
  79              		.loc 1 590 0
  80 0028 1EFF2FE1 		bx	lr
  81              	.LFE69:
  83              		.align	2
  84              		.global	wait_1ms
  86              	wait_1ms:
  87              	.LFB70:
 591:Wiznet/w5300.c **** 
 592:Wiznet/w5300.c **** void  wait_1ms(uint32 ms)
 593:Wiznet/w5300.c **** {
  88              		.loc 1 593 0
  89              		@ Function supports interworking.
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              	.LVL5:
  93 002c 30402DE9 		stmfd	sp!, {r4, r5, lr}
  94              	.LCFI0:
  95              		.loc 1 593 0
  96 0030 0050A0E1 		mov	r5, r0
  97 0034 0040A0E3 		mov	r4, #0
  98              	.LVL6:
  99 0038 000000EA 		b	.L12
 100              	.LVL7:
 101              	.L13:
 594:Wiznet/w5300.c ****    uint32 i;
 595:Wiznet/w5300.c ****    for(i = 0; i < ms ; i++)
 596:Wiznet/w5300.c ****    {
 597:Wiznet/w5300.c ****      wait_1us(1000);
 102              		.loc 1 597 0
 103 003c FEFFFFEB 		bl	wait_1us
 104              	.LVL8:
 105              	.L12:
 106              		.loc 1 595 0
 107 0040 050054E1 		cmp	r4, r5
 108              		.loc 1 597 0
 109 0044 FA0FA0E3 		mov	r0, #1000
 110              		.loc 1 595 0
 111 0048 014084E2 		add	r4, r4, #1
 112 004c FAFFFF1A 		bne	.L13
 598:Wiznet/w5300.c ****    }
 599:Wiznet/w5300.c ****    
 600:Wiznet/w5300.c **** }
 113              		.loc 1 600 0
 114 0050 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 115 0054 1EFF2FE1 		bx	lr
 116              	.LFE70:
 118              		.align	2
 119              		.global	wait_10ms
 121              	wait_10ms:
 122              	.LFB71:
 601:Wiznet/w5300.c **** 
 602:Wiznet/w5300.c **** void  wait_10ms(uint32 ms)
 603:Wiznet/w5300.c **** {
 123              		.loc 1 603 0
 124              		@ Function supports interworking.
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              	.LVL9:
 128 0058 30402DE9 		stmfd	sp!, {r4, r5, lr}
 129              	.LCFI1:
 130              		.loc 1 603 0
 131 005c 0050A0E1 		mov	r5, r0
 132 0060 0040A0E3 		mov	r4, #0
 133              	.LVL10:
 134 0064 000000EA 		b	.L17
 135              	.LVL11:
 136              	.L18:
 604:Wiznet/w5300.c ****    uint32 i;
 605:Wiznet/w5300.c ****    for(i = 0; i < ms ; i++)
 606:Wiznet/w5300.c ****    {
 607:Wiznet/w5300.c ****      wait_1ms(10);
 137              		.loc 1 607 0
 138 0068 FEFFFFEB 		bl	wait_1ms
 139              	.LVL12:
 140              	.L17:
 141              		.loc 1 605 0
 142 006c 050054E1 		cmp	r4, r5
 143              		.loc 1 607 0
 144 0070 0A00A0E3 		mov	r0, #10
 145              		.loc 1 605 0
 146 0074 014084E2 		add	r4, r4, #1
 147 0078 FAFFFF1A 		bne	.L18
 608:Wiznet/w5300.c ****    }
 609:Wiznet/w5300.c **** }
 148              		.loc 1 609 0
 149 007c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 150 0080 1EFF2FE1 		bx	lr
 151              	.LFE71:
 153              		.section	.rodata.str1.4,"aMS",%progbits,1
 154              		.align	2
 155              	.LC0:
 156 0000 496C6C65 		.ascii	"Illegal Channel(%d) TX Memory Size.\012\015\000"
 156      67616C20 
 156      4368616E 
 156      6E656C28 
 156      25642920 
 157 0026 0000     		.align	2
 158              	.LC1:
 159 0028 496C6C65 		.ascii	"Illegal Channel(%d) RX Memory Size.\012\015\000"
 159      67616C20 
 159      4368616E 
 159      6E656C28 
 159      25642920 
 160 004e 0000     		.align	2
 161              	.LC2:
 162 0050 496C6C65 		.ascii	"Illegal Memory Allocation\012\015\000"
 162      67616C20 
 162      4D656D6F 
 162      72792041 
 162      6C6C6F63 
 163              		.text
 164              		.align	2
 165              		.global	sysinit
 167              	sysinit:
 168              	.LFB66:
 169              		.loc 1 499 0
 170              		@ Function supports interworking.
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              	.LVL13:
 174 0084 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 175              	.LCFI2:
 176              		.loc 1 499 0
 177 0088 0060A0E3 		mov	r6, #0
 178              	.LVL14:
 179 008c C4819FE5 		ldr	r8, .L42
 180 0090 C4719FE5 		ldr	r7, .L42+4
 181 0094 0040A0E1 		mov	r4, r0
 182 0098 0150A0E1 		mov	r5, r1
 183 009c 06C0A0E1 		mov	ip, r6
 184              	.LVL15:
 185 00a0 0600A0E1 		mov	r0, r6
 186              	.LVL16:
 187              	.LVL17:
 188              	.L22:
 189              		.loc 1 506 0
 190 00a4 0430D0E7 		ldrb	r3, [r0, r4]	@ zero_extendqisi2
 191              		.loc 1 520 0
 192 00a8 032086E0 		add	r2, r6, r3
 193              		.loc 1 522 0
 194 00ac 03E5A0E1 		mov	lr, r3, asl #10
 195              		.loc 1 520 0
 196 00b0 0228A0E1 		mov	r2, r2, asl #16
 197              		.loc 1 506 0
 198 00b4 400053E3 		cmp	r3, #64
 199              		.loc 1 499 0
 200 00b8 0038A0E1 		mov	r3, r0, asl #16
 201              		.loc 1 520 0
 202 00bc 2268A0E1 		mov	r6, r2, lsr #16
 203              		.loc 1 499 0
 204 00c0 2318A0E1 		mov	r1, r3, lsr #16
 205              		.loc 1 506 0
 206 00c4 1400008A 		bhi	.L36
 207              		.loc 1 513 0
 208 00c8 0520D0E7 		ldrb	r2, [r0, r5]	@ zero_extendqisi2
 209              		.loc 1 521 0
 210 00cc 02308CE0 		add	r3, ip, r2
 211 00d0 0338A0E1 		mov	r3, r3, asl #16
 212              		.loc 1 513 0
 213 00d4 400052E3 		cmp	r2, #64
 214              		.loc 1 521 0
 215 00d8 23C8A0E1 		mov	ip, r3, lsr #16
 216              		.loc 1 513 0
 217 00dc 1200008A 		bhi	.L37
 218              		.loc 1 522 0
 219 00e0 04E088E4 		str	lr, [r8], #4
 220              		.loc 1 523 0
 221 00e4 0530D0E7 		ldrb	r3, [r0, r5]	@ zero_extendqisi2
 222 00e8 010080E2 		add	r0, r0, #1
 223 00ec 0335A0E1 		mov	r3, r3, asl #10
 224              		.loc 1 504 0
 225 00f0 080050E3 		cmp	r0, #8
 226              		.loc 1 523 0
 227 00f4 043087E4 		str	r3, [r7], #4
 228              		.loc 1 504 0
 229 00f8 E9FFFF1A 		bne	.L22
 230              		.loc 1 525 0
 231 00fc 077016E2 		ands	r7, r6, #7
 232 0100 0200001A 		bne	.L29
 233 0104 0C3086E0 		add	r3, r6, ip
 234 0108 800053E3 		cmp	r3, #128
 235 010c 0800000A 		beq	.L31
 236              	.L29:
 237              		.loc 1 528 0
 238 0110 48019FE5 		ldr	r0, .L42+8
 239 0114 FEFFFFEB 		bl	printf
 240              	.LVL18:
 241 0118 010000EA 		b	.L40
 242              	.LVL19:
 243              	.L36:
 244              		.loc 1 509 0
 245 011c 40019FE5 		ldr	r0, .L42+12
 246              	.L41:
 247 0120 FEFFFFEB 		bl	printf
 248              	.LVL20:
 249              	.L40:
 250 0124 0000A0E3 		mov	r0, #0
 251 0128 480000EA 		b	.L25
 252              	.LVL21:
 253              	.L37:
 254              		.loc 1 516 0
 255 012c 34019FE5 		ldr	r0, .L42+16
 256 0130 FAFFFFEA 		b	.L41
 257              	.L31:
 258              		.loc 1 534 0
 259 0134 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 260 0138 0110D4E5 		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 261              	.LVL22:
 262 013c 031481E0 		add	r1, r1, r3, asl #8
 263 0140 0118A0E1 		mov	r1, r1, asl #16
 264 0144 2118A0E1 		mov	r1, r1, lsr #16
 265 0148 2000A0E3 		mov	r0, #32
 266 014c FEFFFFEB 		bl	IINCHIP_WRITE
 267              	.LVL23:
 268              		.loc 1 535 0
 269 0150 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 270 0154 0310D4E5 		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 271 0158 031481E0 		add	r1, r1, r3, asl #8
 272 015c 0118A0E1 		mov	r1, r1, asl #16
 273 0160 2118A0E1 		mov	r1, r1, lsr #16
 274 0164 2200A0E3 		mov	r0, #34
 275 0168 FEFFFFEB 		bl	IINCHIP_WRITE
 276              		.loc 1 536 0
 277 016c 0430D4E5 		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 278 0170 0510D4E5 		ldrb	r1, [r4, #5]	@ zero_extendqisi2
 279 0174 031481E0 		add	r1, r1, r3, asl #8
 280 0178 0118A0E1 		mov	r1, r1, asl #16
 281 017c 2118A0E1 		mov	r1, r1, lsr #16
 282 0180 2400A0E3 		mov	r0, #36
 283 0184 FEFFFFEB 		bl	IINCHIP_WRITE
 284              		.loc 1 537 0
 285 0188 0630D4E5 		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 286 018c 0710D4E5 		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 287 0190 031481E0 		add	r1, r1, r3, asl #8
 288 0194 0118A0E1 		mov	r1, r1, asl #16
 289 0198 2118A0E1 		mov	r1, r1, lsr #16
 290 019c 2600A0E3 		mov	r0, #38
 291 01a0 FEFFFFEB 		bl	IINCHIP_WRITE
 292              		.loc 1 539 0
 293 01a4 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 294 01a8 0110D5E5 		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 295 01ac 031481E0 		add	r1, r1, r3, asl #8
 296 01b0 0118A0E1 		mov	r1, r1, asl #16
 297 01b4 2118A0E1 		mov	r1, r1, lsr #16
 298 01b8 2800A0E3 		mov	r0, #40
 299 01bc FEFFFFEB 		bl	IINCHIP_WRITE
 300              		.loc 1 540 0
 301 01c0 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 302 01c4 0310D5E5 		ldrb	r1, [r5, #3]	@ zero_extendqisi2
 303 01c8 031481E0 		add	r1, r1, r3, asl #8
 304 01cc 0118A0E1 		mov	r1, r1, asl #16
 305 01d0 2118A0E1 		mov	r1, r1, lsr #16
 306 01d4 2A00A0E3 		mov	r0, #42
 307 01d8 FEFFFFEB 		bl	IINCHIP_WRITE
 308              		.loc 1 541 0
 309 01dc 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 310 01e0 0510D5E5 		ldrb	r1, [r5, #5]	@ zero_extendqisi2
 311 01e4 031481E0 		add	r1, r1, r3, asl #8
 312 01e8 0118A0E1 		mov	r1, r1, asl #16
 313 01ec 2118A0E1 		mov	r1, r1, lsr #16
 314 01f0 2C00A0E3 		mov	r0, #44
 315 01f4 FEFFFFEB 		bl	IINCHIP_WRITE
 316              		.loc 1 542 0
 317 01f8 0710D5E5 		ldrb	r1, [r5, #7]	@ zero_extendqisi2
 318 01fc 0630D5E5 		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 319 0200 031481E0 		add	r1, r1, r3, asl #8
 320 0204 0118A0E1 		mov	r1, r1, asl #16
 321 0208 2118A0E1 		mov	r1, r1, lsr #16
 322 020c 2E00A0E3 		mov	r0, #46
 323 0210 FEFFFFEB 		bl	IINCHIP_WRITE
 324 0214 0710A0E1 		mov	r1, r7
 325              	.LVL24:
 326 0218 0700A0E1 		mov	r0, r7
 327 021c 010000EA 		b	.L32
 328              	.LVL25:
 329              	.L33:
 330              		.loc 1 546 0
 331 0220 8130A0E1 		mov	r3, r1, asl #1
 332              	.LVL26:
 333              		.loc 1 547 0
 334 0224 011083E3 		orr	r1, r3, #1
 335              	.LVL27:
 336              	.L32:
 337 0228 0028A0E1 		mov	r2, r0, asl #16
 338              		.loc 1 544 0
 339 022c A631A0E1 		mov	r3, r6, lsr #3
 340              	.LVL28:
 341 0230 220853E1 		cmp	r3, r2, lsr #16
 342              		.loc 1 547 0
 343 0234 010080E2 		add	r0, r0, #1
 344              		.loc 1 544 0
 345 0238 F8FFFF8A 		bhi	.L33
 346              	.LVL29:
 347              		.loc 1 550 0
 348 023c 0118A0E1 		mov	r1, r1, asl #16
 349 0240 3000A0E3 		mov	r0, #48
 350 0244 2118A0E1 		mov	r1, r1, lsr #16
 351 0248 FEFFFFEB 		bl	IINCHIP_WRITE
 352 024c 0100A0E3 		mov	r0, #1
 353              	.L25:
 354              		.loc 1 570 0
 355 0250 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 356 0254 1EFF2FE1 		bx	lr
 357              	.L43:
 358              		.align	2
 359              	.L42:
 360 0258 00000000 		.word	TXMEM_SIZE
 361 025c 00000000 		.word	RXMEM_SIZE
 362 0260 50000000 		.word	.LC2
 363 0264 00000000 		.word	.LC0
 364 0268 28000000 		.word	.LC1
 365              	.LFE66:
 367              		.align	2
 368              		.global	setSn_FRAGR
 370              	setSn_FRAGR:
 371              	.LFB65:
 372              		.loc 1 486 0
 373              		@ Function supports interworking.
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              	.LVL30:
 377 026c 0003A0E1 		mov	r0, r0, asl #6
 378              		.loc 1 487 0
 379 0270 FF0D00E2 		and	r0, r0, #16320
 380              	.LVL31:
 381              		.loc 1 486 0
 382 0274 04E02DE5 		str	lr, [sp, #-4]!
 383              	.LCFI3:
 384              		.loc 1 486 0
 385 0278 FF1001E2 		and	r1, r1, #255
 386              		.loc 1 487 0
 387 027c 8B0F80E2 		add	r0, r0, #556
 388 0280 FEFFFFEB 		bl	IINCHIP_WRITE
 389              	.LVL32:
 390              		.loc 1 488 0
 391 0284 04E09DE4 		ldr	lr, [sp], #4
 392 0288 1EFF2FE1 		bx	lr
 393              	.LFE65:
 395              		.align	2
 396              		.global	setSn_TTLR
 398              	setSn_TTLR:
 399              	.LFB63:
 400              		.loc 1 476 0
 401              		@ Function supports interworking.
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404              	.LVL33:
 405 028c 0003A0E1 		mov	r0, r0, asl #6
 406              		.loc 1 477 0
 407 0290 FF0D00E2 		and	r0, r0, #16320
 408              	.LVL34:
 409 0294 870F80E2 		add	r0, r0, #540
 410              		.loc 1 476 0
 411 0298 04E02DE5 		str	lr, [sp, #-4]!
 412              	.LCFI4:
 413              		.loc 1 476 0
 414 029c FF1001E2 		and	r1, r1, #255
 415              		.loc 1 477 0
 416 02a0 020080E2 		add	r0, r0, #2
 417 02a4 FEFFFFEB 		bl	IINCHIP_WRITE
 418              	.LVL35:
 419              		.loc 1 478 0
 420 02a8 04E09DE4 		ldr	lr, [sp], #4
 421 02ac 1EFF2FE1 		bx	lr
 422              	.LFE63:
 424              		.align	2
 425              		.global	setSn_TOSR
 427              	setSn_TOSR:
 428              	.LFB61:
 429              		.loc 1 467 0
 430              		@ Function supports interworking.
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              	.LVL36:
 434 02b0 0003A0E1 		mov	r0, r0, asl #6
 435              		.loc 1 468 0
 436 02b4 FF0D00E2 		and	r0, r0, #16320
 437              	.LVL37:
 438              		.loc 1 467 0
 439 02b8 04E02DE5 		str	lr, [sp, #-4]!
 440              	.LCFI5:
 441              		.loc 1 467 0
 442 02bc FF1001E2 		and	r1, r1, #255
 443              		.loc 1 468 0
 444 02c0 870F80E2 		add	r0, r0, #540
 445 02c4 FEFFFFEB 		bl	IINCHIP_WRITE
 446              	.LVL38:
 447              		.loc 1 469 0
 448 02c8 04E09DE4 		ldr	lr, [sp], #4
 449 02cc 1EFF2FE1 		bx	lr
 450              	.LFE61:
 452              		.align	2
 453              		.global	setSn_TX_FIFOR
 455              	setSn_TX_FIFOR:
 456              	.LFB56:
 457              		.loc 1 439 0
 458              		@ Function supports interworking.
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              	.LVL39:
 462 02d0 0003A0E1 		mov	r0, r0, asl #6
 463              		.loc 1 440 0
 464 02d4 FF0D00E2 		and	r0, r0, #16320
 465              	.LVL40:
 466              		.loc 1 439 0
 467 02d8 0118A0E1 		mov	r1, r1, asl #16
 468              	.LVL41:
 469              		.loc 1 440 0
 470 02dc 8B0F80E2 		add	r0, r0, #556
 471              		.loc 1 439 0
 472 02e0 04E02DE5 		str	lr, [sp, #-4]!
 473              	.LCFI6:
 474              		.loc 1 440 0
 475 02e4 020080E2 		add	r0, r0, #2
 476 02e8 2118A0E1 		mov	r1, r1, lsr #16
 477              	.LVL42:
 478 02ec FEFFFFEB 		bl	IINCHIP_WRITE
 479              	.LVL43:
 480              		.loc 1 441 0
 481 02f0 04E09DE4 		ldr	lr, [sp], #4
 482 02f4 1EFF2FE1 		bx	lr
 483              	.LFE56:
 485              		.align	2
 486              		.global	setSn_TX_WRSR
 488              	setSn_TX_WRSR:
 489              	.LFB53:
 490              		.loc 1 404 0
 491              		@ Function supports interworking.
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL44:
 495 02f8 30402DE9 		stmfd	sp!, {r4, r5, lr}
 496              	.LCFI7:
 497              		.loc 1 404 0
 498 02fc 0043A0E1 		mov	r4, r0, asl #6
 499              		.loc 1 405 0
 500 0300 FF4D04E2 		and	r4, r4, #16320
 501 0304 220E84E2 		add	r0, r4, #544
 502              	.LVL45:
 503              		.loc 1 404 0
 504 0308 0150A0E1 		mov	r5, r1
 505              		.loc 1 405 0
 506 030c 2118A0E1 		mov	r1, r1, lsr #16
 507              	.LVL46:
 508 0310 FEFFFFEB 		bl	IINCHIP_WRITE
 509              		.loc 1 406 0
 510 0314 0558A0E1 		mov	r5, r5, asl #16
 511              	.LVL47:
 512 0318 220E84E2 		add	r0, r4, #544
 513 031c 020080E2 		add	r0, r0, #2
 514 0320 2518A0E1 		mov	r1, r5, lsr #16
 515 0324 FEFFFFEB 		bl	IINCHIP_WRITE
 516              		.loc 1 407 0
 517 0328 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 518 032c 1EFF2FE1 		bx	lr
 519              	.LFE53:
 521              		.align	2
 522              		.global	setSn_MSSR
 524              	setSn_MSSR:
 525              	.LFB49:
 526              		.loc 1 376 0
 527              		@ Function supports interworking.
 528              		@ args = 0, pretend = 0, frame = 0
 529              		@ frame_needed = 0, uses_anonymous_args = 0
 530              	.LVL48:
 531 0330 0003A0E1 		mov	r0, r0, asl #6
 532 0334 0118A0E1 		mov	r1, r1, asl #16
 533              	.LVL49:
 534              		.loc 1 377 0
 535 0338 FF0D00E2 		and	r0, r0, #16320
 536              	.LVL50:
 537              		.loc 1 376 0
 538 033c 04E02DE5 		str	lr, [sp, #-4]!
 539              	.LCFI8:
 540              		.loc 1 377 0
 541 0340 860F80E2 		add	r0, r0, #536
 542 0344 2118A0E1 		mov	r1, r1, lsr #16
 543              	.LVL51:
 544 0348 FEFFFFEB 		bl	IINCHIP_WRITE
 545              	.LVL52:
 546              		.loc 1 378 0
 547 034c 04E09DE4 		ldr	lr, [sp], #4
 548 0350 1EFF2FE1 		bx	lr
 549              	.LFE49:
 551              		.align	2
 552              		.global	setSn_DIPR
 554              	setSn_DIPR:
 555              	.LFB47:
 556              		.loc 1 365 0
 557              		@ Function supports interworking.
 558              		@ args = 0, pretend = 0, frame = 0
 559              		@ frame_needed = 0, uses_anonymous_args = 0
 560              	.LVL53:
 561 0354 30402DE9 		stmfd	sp!, {r4, r5, lr}
 562              	.LCFI9:
 563              		.loc 1 365 0
 564 0358 0150A0E1 		mov	r5, r1
 565              		.loc 1 366 0
 566 035c 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 567 0360 0110D1E5 		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 568              	.LVL54:
 569              		.loc 1 365 0
 570 0364 0043A0E1 		mov	r4, r0, asl #6
 571              		.loc 1 366 0
 572 0368 031481E0 		add	r1, r1, r3, asl #8
 573 036c FF4D04E2 		and	r4, r4, #16320
 574 0370 0118A0E1 		mov	r1, r1, asl #16
 575 0374 850F84E2 		add	r0, r4, #532
 576              	.LVL55:
 577 0378 2118A0E1 		mov	r1, r1, lsr #16
 578 037c FEFFFFEB 		bl	IINCHIP_WRITE
 579              		.loc 1 367 0
 580 0380 0310D5E5 		ldrb	r1, [r5, #3]	@ zero_extendqisi2
 581 0384 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 582 0388 031481E0 		add	r1, r1, r3, asl #8
 583 038c 850F84E2 		add	r0, r4, #532
 584 0390 0118A0E1 		mov	r1, r1, asl #16
 585 0394 020080E2 		add	r0, r0, #2
 586 0398 2118A0E1 		mov	r1, r1, lsr #16
 587 039c FEFFFFEB 		bl	IINCHIP_WRITE
 588              		.loc 1 368 0
 589 03a0 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 590 03a4 1EFF2FE1 		bx	lr
 591              	.LFE47:
 593              		.align	2
 594              		.global	setSn_DPORTR
 596              	setSn_DPORTR:
 597              	.LFB45:
 598              		.loc 1 353 0
 599              		@ Function supports interworking.
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602              	.LVL56:
 603 03a8 0003A0E1 		mov	r0, r0, asl #6
 604              		.loc 1 354 0
 605 03ac FF0D00E2 		and	r0, r0, #16320
 606              	.LVL57:
 607              		.loc 1 353 0
 608 03b0 0118A0E1 		mov	r1, r1, asl #16
 609              	.LVL58:
 610              		.loc 1 354 0
 611 03b4 210E80E2 		add	r0, r0, #528
 612              		.loc 1 353 0
 613 03b8 04E02DE5 		str	lr, [sp, #-4]!
 614              	.LCFI10:
 615              		.loc 1 354 0
 616 03bc 020080E2 		add	r0, r0, #2
 617 03c0 2118A0E1 		mov	r1, r1, lsr #16
 618              	.LVL59:
 619 03c4 FEFFFFEB 		bl	IINCHIP_WRITE
 620              	.LVL60:
 621              		.loc 1 355 0
 622 03c8 04E09DE4 		ldr	lr, [sp], #4
 623 03cc 1EFF2FE1 		bx	lr
 624              	.LFE45:
 626              		.align	2
 627              		.global	setSn_DHAR
 629              	setSn_DHAR:
 630              	.LFB43:
 631              		.loc 1 341 0
 632              		@ Function supports interworking.
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              	.LVL61:
 636 03d0 30402DE9 		stmfd	sp!, {r4, r5, lr}
 637              	.LCFI11:
 638              		.loc 1 341 0
 639 03d4 0140A0E1 		mov	r4, r1
 640              		.loc 1 342 0
 641 03d8 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 642 03dc 0110D1E5 		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 643              	.LVL62:
 644              		.loc 1 341 0
 645 03e0 0053A0E1 		mov	r5, r0, asl #6
 646              		.loc 1 342 0
 647 03e4 031481E0 		add	r1, r1, r3, asl #8
 648 03e8 FF5D05E2 		and	r5, r5, #16320
 649 03ec 0118A0E1 		mov	r1, r1, asl #16
 650 03f0 830F85E2 		add	r0, r5, #524
 651              	.LVL63:
 652 03f4 2118A0E1 		mov	r1, r1, lsr #16
 653 03f8 FEFFFFEB 		bl	IINCHIP_WRITE
 654              		.loc 1 343 0
 655 03fc 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 656 0400 0310D4E5 		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 657 0404 031481E0 		add	r1, r1, r3, asl #8
 658 0408 830F85E2 		add	r0, r5, #524
 659 040c 0118A0E1 		mov	r1, r1, asl #16
 660 0410 020080E2 		add	r0, r0, #2
 661 0414 2118A0E1 		mov	r1, r1, lsr #16
 662 0418 FEFFFFEB 		bl	IINCHIP_WRITE
 663              		.loc 1 344 0
 664 041c 0510D4E5 		ldrb	r1, [r4, #5]	@ zero_extendqisi2
 665 0420 0430D4E5 		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 666 0424 031481E0 		add	r1, r1, r3, asl #8
 667 0428 0118A0E1 		mov	r1, r1, asl #16
 668 042c 210E85E2 		add	r0, r5, #528
 669 0430 2118A0E1 		mov	r1, r1, lsr #16
 670 0434 FEFFFFEB 		bl	IINCHIP_WRITE
 671              		.loc 1 345 0
 672 0438 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 673 043c 1EFF2FE1 		bx	lr
 674              	.LFE43:
 676              		.align	2
 677              		.global	setSn_IR
 679              	setSn_IR:
 680              	.LFB40:
 681              		.loc 1 299 0
 682              		@ Function supports interworking.
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              	.LVL64:
 686 0440 0003A0E1 		mov	r0, r0, asl #6
 687              		.loc 1 300 0
 688 0444 FF0D00E2 		and	r0, r0, #16320
 689              	.LVL65:
 690 0448 810F80E2 		add	r0, r0, #516
 691              		.loc 1 299 0
 692 044c 04E02DE5 		str	lr, [sp, #-4]!
 693              	.LCFI12:
 694              		.loc 1 299 0
 695 0450 FF1001E2 		and	r1, r1, #255
 696              		.loc 1 300 0
 697 0454 020080E2 		add	r0, r0, #2
 698 0458 FEFFFFEB 		bl	IINCHIP_WRITE
 699              	.LVL66:
 700              		.loc 1 301 0
 701 045c 04E09DE4 		ldr	lr, [sp], #4
 702 0460 1EFF2FE1 		bx	lr
 703              	.LFE40:
 705              		.align	2
 706              		.global	setSn_IMR
 708              	setSn_IMR:
 709              	.LFB38:
 710              		.loc 1 286 0
 711              		@ Function supports interworking.
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              	.LVL67:
 715 0464 0003A0E1 		mov	r0, r0, asl #6
 716              		.loc 1 287 0
 717 0468 FF0D00E2 		and	r0, r0, #16320
 718              	.LVL68:
 719              		.loc 1 286 0
 720 046c 04E02DE5 		str	lr, [sp, #-4]!
 721              	.LCFI13:
 722              		.loc 1 286 0
 723 0470 FF1001E2 		and	r1, r1, #255
 724              		.loc 1 287 0
 725 0474 810F80E2 		add	r0, r0, #516
 726 0478 FEFFFFEB 		bl	IINCHIP_WRITE
 727              	.LVL69:
 728              		.loc 1 288 0
 729 047c 04E09DE4 		ldr	lr, [sp], #4
 730 0480 1EFF2FE1 		bx	lr
 731              	.LFE38:
 733              		.align	2
 734              		.global	setSn_MR
 736              	setSn_MR:
 737              	.LFB34:
 738              		.loc 1 243 0
 739              		@ Function supports interworking.
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              	.LVL70:
 743 0484 0003A0E1 		mov	r0, r0, asl #6
 744 0488 0118A0E1 		mov	r1, r1, asl #16
 745              	.LVL71:
 746              		.loc 1 244 0
 747 048c FF0D00E2 		and	r0, r0, #16320
 748              	.LVL72:
 749              		.loc 1 243 0
 750 0490 04E02DE5 		str	lr, [sp, #-4]!
 751              	.LCFI14:
 752              		.loc 1 244 0
 753 0494 020C80E2 		add	r0, r0, #512
 754 0498 2118A0E1 		mov	r1, r1, lsr #16
 755              	.LVL73:
 756 049c FEFFFFEB 		bl	IINCHIP_WRITE
 757              	.LVL74:
 758              		.loc 1 245 0
 759 04a0 04E09DE4 		ldr	lr, [sp], #4
 760 04a4 1EFF2FE1 		bx	lr
 761              	.LFE34:
 763              		.align	2
 764              		.global	setPn_BDPTHR
 766              	setPn_BDPTHR:
 767              	.LFB31:
 768              		.loc 1 220 0
 769              		@ Function supports interworking.
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772              	.LVL75:
 773 04a8 0001A0E1 		mov	r0, r0, asl #2
 774 04ac 0118A0E1 		mov	r1, r1, asl #16
 775              	.LVL76:
 776              		.loc 1 221 0
 777 04b0 FF0F00E2 		and	r0, r0, #1020
 778              	.LVL77:
 779              		.loc 1 220 0
 780 04b4 04E02DE5 		str	lr, [sp, #-4]!
 781              	.LCFI15:
 782              		.loc 1 221 0
 783 04b8 620080E2 		add	r0, r0, #98
 784 04bc 2118A0E1 		mov	r1, r1, lsr #16
 785              	.LVL78:
 786 04c0 FEFFFFEB 		bl	IINCHIP_WRITE
 787              	.LVL79:
 788              		.loc 1 222 0
 789 04c4 04E09DE4 		ldr	lr, [sp], #4
 790 04c8 1EFF2FE1 		bx	lr
 791              	.LFE31:
 793              		.align	2
 794              		.global	setPn_BRDYR
 796              	setPn_BRDYR:
 797              	.LFB29:
 798              		.loc 1 210 0
 799              		@ Function supports interworking.
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              	.LVL80:
 803 04cc 0001A0E1 		mov	r0, r0, asl #2
 804              		.loc 1 211 0
 805 04d0 FF0F00E2 		and	r0, r0, #1020
 806              	.LVL81:
 807              		.loc 1 210 0
 808 04d4 04E02DE5 		str	lr, [sp, #-4]!
 809              	.LCFI16:
 810              		.loc 1 210 0
 811 04d8 FF1001E2 		and	r1, r1, #255
 812              		.loc 1 211 0
 813 04dc 600080E2 		add	r0, r0, #96
 814 04e0 FEFFFFEB 		bl	IINCHIP_WRITE
 815              	.LVL82:
 816              		.loc 1 212 0
 817 04e4 04E09DE4 		ldr	lr, [sp], #4
 818 04e8 1EFF2FE1 		bx	lr
 819              	.LFE29:
 821              		.align	2
 822              		.global	setPMAGICR
 824              	setPMAGICR:
 825              	.LFB22:
 826              		.loc 1 162 0
 827              		@ Function supports interworking.
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              	.LVL83:
 831 04ec FF1000E2 		and	r1, r0, #255
 832 04f0 04E02DE5 		str	lr, [sp, #-4]!
 833              	.LCFI17:
 834              		.loc 1 163 0
 835 04f4 3800A0E3 		mov	r0, #56
 836              	.LVL84:
 837 04f8 FEFFFFEB 		bl	IINCHIP_WRITE
 838              	.LVL85:
 839              		.loc 1 164 0
 840 04fc 04E09DE4 		ldr	lr, [sp], #4
 841 0500 1EFF2FE1 		bx	lr
 842              	.LFE22:
 844              		.align	2
 845              		.global	setPTIMER
 847              	setPTIMER:
 848              	.LFB20:
 849              		.loc 1 153 0
 850              		@ Function supports interworking.
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 0, uses_anonymous_args = 0
 853              	.LVL86:
 854 0504 FF1000E2 		and	r1, r0, #255
 855 0508 04E02DE5 		str	lr, [sp, #-4]!
 856              	.LCFI18:
 857              		.loc 1 154 0
 858 050c 3600A0E3 		mov	r0, #54
 859              	.LVL87:
 860 0510 FEFFFFEB 		bl	IINCHIP_WRITE
 861              	.LVL88:
 862              		.loc 1 155 0
 863 0514 04E09DE4 		ldr	lr, [sp], #4
 864 0518 1EFF2FE1 		bx	lr
 865              	.LFE20:
 867              		.align	2
 868              		.global	setRCR
 870              	setRCR:
 871              	.LFB17:
 872              		.loc 1 138 0
 873              		@ Function supports interworking.
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876              	.LVL89:
 877 051c FF1000E2 		and	r1, r0, #255
 878 0520 04E02DE5 		str	lr, [sp, #-4]!
 879              	.LCFI19:
 880              		.loc 1 139 0
 881 0524 1E00A0E3 		mov	r0, #30
 882              	.LVL90:
 883 0528 FEFFFFEB 		bl	IINCHIP_WRITE
 884              	.LVL91:
 885              		.loc 1 140 0
 886 052c 04E09DE4 		ldr	lr, [sp], #4
 887 0530 1EFF2FE1 		bx	lr
 888              	.LFE17:
 890              		.align	2
 891              		.global	setRTR
 893              	setRTR:
 894              	.LFB15:
 895              		.loc 1 129 0
 896              		@ Function supports interworking.
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899              	.LVL92:
 900 0534 0018A0E1 		mov	r1, r0, asl #16
 901 0538 04E02DE5 		str	lr, [sp, #-4]!
 902              	.LCFI20:
 903              		.loc 1 130 0
 904 053c 2118A0E1 		mov	r1, r1, lsr #16
 905 0540 1C00A0E3 		mov	r0, #28
 906              	.LVL93:
 907 0544 FEFFFFEB 		bl	IINCHIP_WRITE
 908              	.LVL94:
 909              		.loc 1 131 0
 910 0548 04E09DE4 		ldr	lr, [sp], #4
 911 054c 1EFF2FE1 		bx	lr
 912              	.LFE15:
 914              		.align	2
 915              		.global	setSIPR
 917              	setSIPR:
 918              	.LFB13:
 919              		.loc 1 116 0
 920              		@ Function supports interworking.
 921              		@ args = 0, pretend = 0, frame = 0
 922              		@ frame_needed = 0, uses_anonymous_args = 0
 923              	.LVL95:
 924 0550 10402DE9 		stmfd	sp!, {r4, lr}
 925              	.LCFI21:
 926              		.loc 1 117 0
 927 0554 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 928 0558 0110D0E5 		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 929 055c 031481E0 		add	r1, r1, r3, asl #8
 930 0560 0118A0E1 		mov	r1, r1, asl #16
 931              		.loc 1 116 0
 932 0564 0040A0E1 		mov	r4, r0
 933              		.loc 1 117 0
 934 0568 2118A0E1 		mov	r1, r1, lsr #16
 935 056c 1800A0E3 		mov	r0, #24
 936              	.LVL96:
 937 0570 FEFFFFEB 		bl	IINCHIP_WRITE
 938              		.loc 1 118 0
 939 0574 0310D4E5 		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 940 0578 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 941 057c 031481E0 		add	r1, r1, r3, asl #8
 942 0580 0118A0E1 		mov	r1, r1, asl #16
 943 0584 2118A0E1 		mov	r1, r1, lsr #16
 944 0588 1A00A0E3 		mov	r0, #26
 945 058c FEFFFFEB 		bl	IINCHIP_WRITE
 946              		.loc 1 119 0
 947 0590 1040BDE8 		ldmfd	sp!, {r4, lr}
 948 0594 1EFF2FE1 		bx	lr
 949              	.LFE13:
 951              		.align	2
 952              		.global	setSUBR
 954              	setSUBR:
 955              	.LFB11:
 956              		.loc 1 103 0
 957              		@ Function supports interworking.
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              	.LVL97:
 961 0598 10402DE9 		stmfd	sp!, {r4, lr}
 962              	.LCFI22:
 963              		.loc 1 104 0
 964 059c 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 965 05a0 0110D0E5 		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 966 05a4 031481E0 		add	r1, r1, r3, asl #8
 967 05a8 0118A0E1 		mov	r1, r1, asl #16
 968              		.loc 1 103 0
 969 05ac 0040A0E1 		mov	r4, r0
 970              		.loc 1 104 0
 971 05b0 2118A0E1 		mov	r1, r1, lsr #16
 972 05b4 1400A0E3 		mov	r0, #20
 973              	.LVL98:
 974 05b8 FEFFFFEB 		bl	IINCHIP_WRITE
 975              		.loc 1 105 0
 976 05bc 0310D4E5 		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 977 05c0 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 978 05c4 031481E0 		add	r1, r1, r3, asl #8
 979 05c8 0118A0E1 		mov	r1, r1, asl #16
 980 05cc 2118A0E1 		mov	r1, r1, lsr #16
 981 05d0 1600A0E3 		mov	r0, #22
 982 05d4 FEFFFFEB 		bl	IINCHIP_WRITE
 983              		.loc 1 106 0
 984 05d8 1040BDE8 		ldmfd	sp!, {r4, lr}
 985 05dc 1EFF2FE1 		bx	lr
 986              	.LFE11:
 988              		.align	2
 989              		.global	setGAR
 991              	setGAR:
 992              	.LFB9:
 993              		.loc 1 90 0
 994              		@ Function supports interworking.
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 997              	.LVL99:
 998 05e0 10402DE9 		stmfd	sp!, {r4, lr}
 999              	.LCFI23:
 1000              		.loc 1 91 0
 1001 05e4 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1002 05e8 0110D0E5 		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 1003 05ec 031481E0 		add	r1, r1, r3, asl #8
 1004 05f0 0118A0E1 		mov	r1, r1, asl #16
 1005              		.loc 1 90 0
 1006 05f4 0040A0E1 		mov	r4, r0
 1007              		.loc 1 91 0
 1008 05f8 2118A0E1 		mov	r1, r1, lsr #16
 1009 05fc 1000A0E3 		mov	r0, #16
 1010              	.LVL100:
 1011 0600 FEFFFFEB 		bl	IINCHIP_WRITE
 1012              		.loc 1 92 0
 1013 0604 0310D4E5 		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 1014 0608 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1015 060c 031481E0 		add	r1, r1, r3, asl #8
 1016 0610 0118A0E1 		mov	r1, r1, asl #16
 1017 0614 2118A0E1 		mov	r1, r1, lsr #16
 1018 0618 1200A0E3 		mov	r0, #18
 1019 061c FEFFFFEB 		bl	IINCHIP_WRITE
 1020              		.loc 1 93 0
 1021 0620 1040BDE8 		ldmfd	sp!, {r4, lr}
 1022 0624 1EFF2FE1 		bx	lr
 1023              	.LFE9:
 1025              		.align	2
 1026              		.global	setSHAR
 1028              	setSHAR:
 1029              	.LFB7:
 1030              		.loc 1 76 0
 1031              		@ Function supports interworking.
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              	.LVL101:
 1035 0628 10402DE9 		stmfd	sp!, {r4, lr}
 1036              	.LCFI24:
 1037              		.loc 1 77 0
 1038 062c 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1039 0630 0110D0E5 		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 1040 0634 031481E0 		add	r1, r1, r3, asl #8
 1041 0638 0118A0E1 		mov	r1, r1, asl #16
 1042              		.loc 1 76 0
 1043 063c 0040A0E1 		mov	r4, r0
 1044              		.loc 1 77 0
 1045 0640 2118A0E1 		mov	r1, r1, lsr #16
 1046 0644 0800A0E3 		mov	r0, #8
 1047              	.LVL102:
 1048 0648 FEFFFFEB 		bl	IINCHIP_WRITE
 1049              		.loc 1 78 0
 1050 064c 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1051 0650 0310D4E5 		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 1052 0654 031481E0 		add	r1, r1, r3, asl #8
 1053 0658 0118A0E1 		mov	r1, r1, asl #16
 1054 065c 2118A0E1 		mov	r1, r1, lsr #16
 1055 0660 0A00A0E3 		mov	r0, #10
 1056 0664 FEFFFFEB 		bl	IINCHIP_WRITE
 1057              		.loc 1 79 0
 1058 0668 0510D4E5 		ldrb	r1, [r4, #5]	@ zero_extendqisi2
 1059 066c 0430D4E5 		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1060 0670 031481E0 		add	r1, r1, r3, asl #8
 1061 0674 0118A0E1 		mov	r1, r1, asl #16
 1062 0678 2118A0E1 		mov	r1, r1, lsr #16
 1063 067c 0C00A0E3 		mov	r0, #12
 1064 0680 FEFFFFEB 		bl	IINCHIP_WRITE
 1065              		.loc 1 80 0
 1066 0684 1040BDE8 		ldmfd	sp!, {r4, lr}
 1067 0688 1EFF2FE1 		bx	lr
 1068              	.LFE7:
 1070              		.align	2
 1071              		.global	setIMR
 1073              	setIMR:
 1074              	.LFB5:
 1075              		.loc 1 59 0
 1076              		@ Function supports interworking.
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              	.LVL103:
 1080 068c 0018A0E1 		mov	r1, r0, asl #16
 1081 0690 04E02DE5 		str	lr, [sp, #-4]!
 1082              	.LCFI25:
 1083              		.loc 1 60 0
 1084 0694 2118A0E1 		mov	r1, r1, lsr #16
 1085 0698 0400A0E3 		mov	r0, #4
 1086              	.LVL104:
 1087 069c FEFFFFEB 		bl	IINCHIP_WRITE
 1088              	.LVL105:
 1089              		.loc 1 61 0
 1090 06a0 04E09DE4 		ldr	lr, [sp], #4
 1091 06a4 1EFF2FE1 		bx	lr
 1092              	.LFE5:
 1094              		.align	2
 1095              		.global	setIR
 1097              	setIR:
 1098              	.LFB3:
 1099              		.loc 1 50 0
 1100              		@ Function supports interworking.
 1101              		@ args = 0, pretend = 0, frame = 0
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              	.LVL106:
 1104 06a8 0018A0E1 		mov	r1, r0, asl #16
 1105 06ac 04E02DE5 		str	lr, [sp, #-4]!
 1106              	.LCFI26:
 1107              		.loc 1 51 0
 1108 06b0 2118A0E1 		mov	r1, r1, lsr #16
 1109 06b4 0200A0E3 		mov	r0, #2
 1110              	.LVL107:
 1111 06b8 FEFFFFEB 		bl	IINCHIP_WRITE
 1112              	.LVL108:
 1113              		.loc 1 52 0
 1114 06bc 04E09DE4 		ldr	lr, [sp], #4
 1115 06c0 1EFF2FE1 		bx	lr
 1116              	.LFE3:
 1118              		.align	2
 1119              		.global	getSn_FRAGR
 1121              	getSn_FRAGR:
 1122              	.LFB64:
 1123              		.loc 1 481 0
 1124              		@ Function supports interworking.
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 1127              	.LVL109:
 1128 06c4 0003A0E1 		mov	r0, r0, asl #6
 1129              		.loc 1 482 0
 1130 06c8 FF0D00E2 		and	r0, r0, #16320
 1131              	.LVL110:
 1132              		.loc 1 481 0
 1133 06cc 04E02DE5 		str	lr, [sp, #-4]!
 1134              	.LCFI27:
 1135              		.loc 1 482 0
 1136 06d0 8B0F80E2 		add	r0, r0, #556
 1137 06d4 FEFFFFEB 		bl	IINCHIP_READ
 1138 06d8 FF0000E2 		and	r0, r0, #255
 1139              		.loc 1 483 0
 1140 06dc 04E09DE4 		ldr	lr, [sp], #4
 1141 06e0 1EFF2FE1 		bx	lr
 1142              	.LFE64:
 1144              		.align	2
 1145              		.global	getSn_TTLR
 1147              	getSn_TTLR:
 1148              	.LFB62:
 1149              		.loc 1 472 0
 1150              		@ Function supports interworking.
 1151              		@ args = 0, pretend = 0, frame = 0
 1152              		@ frame_needed = 0, uses_anonymous_args = 0
 1153              	.LVL111:
 1154 06e4 0003A0E1 		mov	r0, r0, asl #6
 1155              		.loc 1 473 0
 1156 06e8 FF0D00E2 		and	r0, r0, #16320
 1157              	.LVL112:
 1158 06ec 870F80E2 		add	r0, r0, #540
 1159              		.loc 1 472 0
 1160 06f0 04E02DE5 		str	lr, [sp, #-4]!
 1161              	.LCFI28:
 1162              		.loc 1 473 0
 1163 06f4 020080E2 		add	r0, r0, #2
 1164 06f8 FEFFFFEB 		bl	IINCHIP_READ
 1165 06fc FF0000E2 		and	r0, r0, #255
 1166              		.loc 1 474 0
 1167 0700 04E09DE4 		ldr	lr, [sp], #4
 1168 0704 1EFF2FE1 		bx	lr
 1169              	.LFE62:
 1171              		.align	2
 1172              		.global	getSn_TOSR
 1174              	getSn_TOSR:
 1175              	.LFB60:
 1176              		.loc 1 463 0
 1177              		@ Function supports interworking.
 1178              		@ args = 0, pretend = 0, frame = 0
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 1180              	.LVL113:
 1181 0708 0003A0E1 		mov	r0, r0, asl #6
 1182              		.loc 1 464 0
 1183 070c FF0D00E2 		and	r0, r0, #16320
 1184              	.LVL114:
 1185              		.loc 1 463 0
 1186 0710 04E02DE5 		str	lr, [sp, #-4]!
 1187              	.LCFI29:
 1188              		.loc 1 464 0
 1189 0714 870F80E2 		add	r0, r0, #540
 1190 0718 FEFFFFEB 		bl	IINCHIP_READ
 1191 071c FF0000E2 		and	r0, r0, #255
 1192              		.loc 1 465 0
 1193 0720 04E09DE4 		ldr	lr, [sp], #4
 1194 0724 1EFF2FE1 		bx	lr
 1195              	.LFE60:
 1197              		.align	2
 1198              		.global	setSn_PROTOR
 1200              	setSn_PROTOR:
 1201              	.LFB59:
 1202              		.loc 1 456 0
 1203              		@ Function supports interworking.
 1204              		@ args = 0, pretend = 0, frame = 0
 1205              		@ frame_needed = 0, uses_anonymous_args = 0
 1206              	.LVL115:
 1207 0728 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1208              	.LCFI30:
 1209              		.loc 1 456 0
 1210 072c 0043A0E1 		mov	r4, r0, asl #6
 1211              		.loc 1 458 0
 1212 0730 FF4D04E2 		and	r4, r4, #16320
 1213 0734 864F84E2 		add	r4, r4, #536
 1214 0738 024084E2 		add	r4, r4, #2
 1215 073c 0400A0E1 		mov	r0, r4
 1216              	.LVL116:
 1217              		.loc 1 456 0
 1218 0740 FF5001E2 		and	r5, r1, #255
 1219              		.loc 1 458 0
 1220 0744 FEFFFFEB 		bl	IINCHIP_READ
 1221              	.LVL117:
 1222              		.loc 1 459 0
 1223 0748 FF1C00E2 		and	r1, r0, #65280
 1224 074c 051081E0 		add	r1, r1, r5
 1225 0750 0118A0E1 		mov	r1, r1, asl #16
 1226 0754 0400A0E1 		mov	r0, r4
 1227 0758 2118A0E1 		mov	r1, r1, lsr #16
 1228 075c FEFFFFEB 		bl	IINCHIP_WRITE
 1229              		.loc 1 460 0
 1230 0760 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1231 0764 1EFF2FE1 		bx	lr
 1232              	.LFE59:
 1234              		.align	2
 1235              		.global	getSn_PROTOR
 1237              	getSn_PROTOR:
 1238              	.LFB58:
 1239              		.loc 1 452 0
 1240              		@ Function supports interworking.
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              	.LVL118:
 1244 0768 0003A0E1 		mov	r0, r0, asl #6
 1245              		.loc 1 453 0
 1246 076c FF0D00E2 		and	r0, r0, #16320
 1247              	.LVL119:
 1248 0770 860F80E2 		add	r0, r0, #536
 1249              		.loc 1 452 0
 1250 0774 04E02DE5 		str	lr, [sp, #-4]!
 1251              	.LCFI31:
 1252              		.loc 1 453 0
 1253 0778 020080E2 		add	r0, r0, #2
 1254 077c FEFFFFEB 		bl	IINCHIP_READ
 1255 0780 FF0000E2 		and	r0, r0, #255
 1256              		.loc 1 454 0
 1257 0784 04E09DE4 		ldr	lr, [sp], #4
 1258 0788 1EFF2FE1 		bx	lr
 1259              	.LFE58:
 1261              		.align	2
 1262              		.global	getSn_RX_FIFOR
 1264              	getSn_RX_FIFOR:
 1265              	.LFB57:
 1266              		.loc 1 444 0
 1267              		@ Function supports interworking.
 1268              		@ args = 0, pretend = 0, frame = 0
 1269              		@ frame_needed = 0, uses_anonymous_args = 0
 1270              	.LVL120:
 1271 078c 0003A0E1 		mov	r0, r0, asl #6
 1272              		.loc 1 445 0
 1273 0790 FF0D00E2 		and	r0, r0, #16320
 1274              	.LVL121:
 1275              		.loc 1 444 0
 1276 0794 04E02DE5 		str	lr, [sp, #-4]!
 1277              	.LCFI32:
 1278              		.loc 1 445 0
 1279 0798 230E80E2 		add	r0, r0, #560
 1280 079c FEFFFFEB 		bl	IINCHIP_READ
 1281              		.loc 1 446 0
 1282 07a0 04E09DE4 		ldr	lr, [sp], #4
 1283 07a4 1EFF2FE1 		bx	lr
 1284              	.LFE57:
 1286              		.align	2
 1287              		.global	getSn_RX_RSR
 1289              	getSn_RX_RSR:
 1290              	.LFB55:
 1291              		.loc 1 424 0
 1292              		@ Function supports interworking.
 1293              		@ args = 0, pretend = 0, frame = 0
 1294              		@ frame_needed = 0, uses_anonymous_args = 0
 1295              	.LVL122:
 1296 07a8 0003A0E1 		mov	r0, r0, asl #6
 1297              		.loc 1 429 0
 1298 07ac FF0D00E2 		and	r0, r0, #16320
 1299              	.LVL123:
 1300              		.loc 1 424 0
 1301 07b0 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 1302              	.LCFI33:
 1303              		.loc 1 430 0
 1304 07b4 8A5F80E2 		add	r5, r0, #552
 1305 07b8 025085E2 		add	r5, r5, #2
 1306              		.loc 1 429 0
 1307 07bc 8A6F80E2 		add	r6, r0, #552
 1308              		.loc 1 430 0
 1309 07c0 0170A0E3 		mov	r7, #1
 1310              	.LVL124:
 1311              	.L105:
 1312              		.loc 1 429 0
 1313 07c4 0600A0E1 		mov	r0, r6
 1314 07c8 FEFFFFEB 		bl	IINCHIP_READ
 1315 07cc 0040A0E1 		mov	r4, r0
 1316              		.loc 1 430 0
 1317 07d0 0500A0E1 		mov	r0, r5
 1318 07d4 FEFFFFEB 		bl	IINCHIP_READ
 1319 07d8 040880E0 		add	r0, r0, r4, asl #16
 1320              	.LVL125:
 1321              		.loc 1 431 0
 1322 07dc 070050E1 		cmp	r0, r7
 1323 07e0 0070A0E1 		mov	r7, r0
 1324 07e4 F6FFFF1A 		bne	.L105
 1325              		.loc 1 435 0
 1326 07e8 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 1327 07ec 1EFF2FE1 		bx	lr
 1328              	.LFE55:
 1330              		.align	2
 1331              		.global	getSn_TX_FSR
 1333              	getSn_TX_FSR:
 1334              	.LFB54:
 1335              		.loc 1 410 0
 1336              		@ Function supports interworking.
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              	.LVL126:
 1340 07f0 0003A0E1 		mov	r0, r0, asl #6
 1341              		.loc 1 415 0
 1342 07f4 FF0D00E2 		and	r0, r0, #16320
 1343              	.LVL127:
 1344              		.loc 1 410 0
 1345 07f8 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 1346              	.LCFI34:
 1347              		.loc 1 416 0
 1348 07fc 895F80E2 		add	r5, r0, #548
 1349 0800 025085E2 		add	r5, r5, #2
 1350              		.loc 1 415 0
 1351 0804 896F80E2 		add	r6, r0, #548
 1352              		.loc 1 416 0
 1353 0808 0070A0E3 		mov	r7, #0
 1354              	.LVL128:
 1355              	.L110:
 1356              		.loc 1 415 0
 1357 080c 0600A0E1 		mov	r0, r6
 1358 0810 FEFFFFEB 		bl	IINCHIP_READ
 1359 0814 0040A0E1 		mov	r4, r0
 1360              		.loc 1 416 0
 1361 0818 0500A0E1 		mov	r0, r5
 1362 081c FEFFFFEB 		bl	IINCHIP_READ
 1363 0820 040880E0 		add	r0, r0, r4, asl #16
 1364              	.LVL129:
 1365              		.loc 1 417 0
 1366 0824 070050E1 		cmp	r0, r7
 1367 0828 0070A0E1 		mov	r7, r0
 1368 082c F6FFFF1A 		bne	.L110
 1369              		.loc 1 421 0
 1370 0830 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 1371 0834 1EFF2FE1 		bx	lr
 1372              	.LFE54:
 1374              		.align	2
 1375              		.global	getSn_TX_WRSR
 1377              	getSn_TX_WRSR:
 1378              	.LFB52:
 1379              		.loc 1 396 0
 1380              		@ Function supports interworking.
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 1383              	.LVL130:
 1384 0838 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1385              	.LCFI35:
 1386              		.loc 1 396 0
 1387 083c 0043A0E1 		mov	r4, r0, asl #6
 1388              		.loc 1 398 0
 1389 0840 FF4D04E2 		and	r4, r4, #16320
 1390 0844 220E84E2 		add	r0, r4, #544
 1391              	.LVL131:
 1392 0848 FEFFFFEB 		bl	IINCHIP_READ
 1393 084c 0050A0E1 		mov	r5, r0
 1394              		.loc 1 399 0
 1395 0850 220E84E2 		add	r0, r4, #544
 1396 0854 020080E2 		add	r0, r0, #2
 1397 0858 FEFFFFEB 		bl	IINCHIP_READ
 1398              		.loc 1 401 0
 1399 085c 050880E0 		add	r0, r0, r5, asl #16
 1400 0860 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1401 0864 1EFF2FE1 		bx	lr
 1402              	.LFE52:
 1404              		.align	2
 1405              		.global	setSn_KPALVTR
 1407              	setSn_KPALVTR:
 1408              	.LFB51:
 1409              		.loc 1 389 0
 1410              		@ Function supports interworking.
 1411              		@ args = 0, pretend = 0, frame = 0
 1412              		@ frame_needed = 0, uses_anonymous_args = 0
 1413              	.LVL132:
 1414 0868 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1415              	.LCFI36:
 1416              		.loc 1 389 0
 1417 086c 0043A0E1 		mov	r4, r0, asl #6
 1418              		.loc 1 391 0
 1419 0870 FF4D04E2 		and	r4, r4, #16320
 1420 0874 864F84E2 		add	r4, r4, #536
 1421 0878 024084E2 		add	r4, r4, #2
 1422 087c 0400A0E1 		mov	r0, r4
 1423              	.LVL133:
 1424              		.loc 1 389 0
 1425 0880 FF5001E2 		and	r5, r1, #255
 1426              		.loc 1 391 0
 1427 0884 FEFFFFEB 		bl	IINCHIP_READ
 1428              	.LVL134:
 1429              		.loc 1 392 0
 1430 0888 FF1000E2 		and	r1, r0, #255
 1431 088c 051481E0 		add	r1, r1, r5, asl #8
 1432 0890 0118A0E1 		mov	r1, r1, asl #16
 1433 0894 0400A0E1 		mov	r0, r4
 1434 0898 2118A0E1 		mov	r1, r1, lsr #16
 1435 089c FEFFFFEB 		bl	IINCHIP_WRITE
 1436              		.loc 1 393 0
 1437 08a0 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1438 08a4 1EFF2FE1 		bx	lr
 1439              	.LFE51:
 1441              		.align	2
 1442              		.global	getSn_KPALVTR
 1444              	getSn_KPALVTR:
 1445              	.LFB50:
 1446              		.loc 1 384 0
 1447              		@ Function supports interworking.
 1448              		@ args = 0, pretend = 0, frame = 0
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450              	.LVL135:
 1451 08a8 0003A0E1 		mov	r0, r0, asl #6
 1452              		.loc 1 385 0
 1453 08ac FF0D00E2 		and	r0, r0, #16320
 1454              	.LVL136:
 1455 08b0 860F80E2 		add	r0, r0, #536
 1456              		.loc 1 384 0
 1457 08b4 04E02DE5 		str	lr, [sp, #-4]!
 1458              	.LCFI37:
 1459              		.loc 1 385 0
 1460 08b8 020080E2 		add	r0, r0, #2
 1461 08bc FEFFFFEB 		bl	IINCHIP_READ
 1462 08c0 2004A0E1 		mov	r0, r0, lsr #8
 1463              		.loc 1 386 0
 1464 08c4 FF0000E2 		and	r0, r0, #255
 1465 08c8 04E09DE4 		ldr	lr, [sp], #4
 1466 08cc 1EFF2FE1 		bx	lr
 1467              	.LFE50:
 1469              		.align	2
 1470              		.global	getSn_MSSR
 1472              	getSn_MSSR:
 1473              	.LFB48:
 1474              		.loc 1 371 0
 1475              		@ Function supports interworking.
 1476              		@ args = 0, pretend = 0, frame = 0
 1477              		@ frame_needed = 0, uses_anonymous_args = 0
 1478              	.LVL137:
 1479 08d0 0003A0E1 		mov	r0, r0, asl #6
 1480              		.loc 1 372 0
 1481 08d4 FF0D00E2 		and	r0, r0, #16320
 1482              	.LVL138:
 1483              		.loc 1 371 0
 1484 08d8 04E02DE5 		str	lr, [sp, #-4]!
 1485              	.LCFI38:
 1486              		.loc 1 372 0
 1487 08dc 860F80E2 		add	r0, r0, #536
 1488 08e0 FEFFFFEB 		bl	IINCHIP_READ
 1489              		.loc 1 373 0
 1490 08e4 04E09DE4 		ldr	lr, [sp], #4
 1491 08e8 1EFF2FE1 		bx	lr
 1492              	.LFE48:
 1494              		.align	2
 1495              		.global	getSn_DIPR
 1497              	getSn_DIPR:
 1498              	.LFB46:
 1499              		.loc 1 358 0
 1500              		@ Function supports interworking.
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503              	.LVL139:
 1504 08ec 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1505              	.LCFI39:
 1506              		.loc 1 358 0
 1507 08f0 0043A0E1 		mov	r4, r0, asl #6
 1508              		.loc 1 359 0
 1509 08f4 FF4D04E2 		and	r4, r4, #16320
 1510 08f8 856F84E2 		add	r6, r4, #532
 1511 08fc 0600A0E1 		mov	r0, r6
 1512              	.LVL140:
 1513              		.loc 1 358 0
 1514 0900 0150A0E1 		mov	r5, r1
 1515              		.loc 1 359 0
 1516 0904 FEFFFFEB 		bl	IINCHIP_READ
 1517              	.LVL141:
 1518 0908 2004A0E1 		mov	r0, r0, lsr #8
 1519 090c 0000C5E5 		strb	r0, [r5, #0]
 1520              		.loc 1 360 0
 1521 0910 0600A0E1 		mov	r0, r6
 1522 0914 FEFFFFEB 		bl	IINCHIP_READ
 1523 0918 0100C5E5 		strb	r0, [r5, #1]
 1524              		.loc 1 361 0
 1525 091c 020086E2 		add	r0, r6, #2
 1526 0920 FEFFFFEB 		bl	IINCHIP_READ
 1527 0924 2034A0E1 		mov	r3, r0, lsr #8
 1528              		.loc 1 362 0
 1529 0928 830F84E2 		add	r0, r4, #524
 1530              		.loc 1 361 0
 1531 092c 0230C5E5 		strb	r3, [r5, #2]
 1532              		.loc 1 362 0
 1533 0930 020080E2 		add	r0, r0, #2
 1534 0934 FEFFFFEB 		bl	IINCHIP_READ
 1535 0938 0300C5E5 		strb	r0, [r5, #3]
 1536              		.loc 1 363 0
 1537 093c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1538 0940 1EFF2FE1 		bx	lr
 1539              	.LFE46:
 1541              		.align	2
 1542              		.global	getSn_DPORTR
 1544              	getSn_DPORTR:
 1545              	.LFB44:
 1546              		.loc 1 348 0
 1547              		@ Function supports interworking.
 1548              		@ args = 0, pretend = 0, frame = 0
 1549              		@ frame_needed = 0, uses_anonymous_args = 0
 1550              	.LVL142:
 1551 0944 0003A0E1 		mov	r0, r0, asl #6
 1552              		.loc 1 349 0
 1553 0948 FF0D00E2 		and	r0, r0, #16320
 1554              	.LVL143:
 1555 094c 210E80E2 		add	r0, r0, #528
 1556              		.loc 1 348 0
 1557 0950 04E02DE5 		str	lr, [sp, #-4]!
 1558              	.LCFI40:
 1559              		.loc 1 349 0
 1560 0954 020080E2 		add	r0, r0, #2
 1561 0958 FEFFFFEB 		bl	IINCHIP_READ
 1562              		.loc 1 350 0
 1563 095c 04E09DE4 		ldr	lr, [sp], #4
 1564 0960 1EFF2FE1 		bx	lr
 1565              	.LFE44:
 1567              		.align	2
 1568              		.global	getSn_DHAR
 1570              	getSn_DHAR:
 1571              	.LFB42:
 1572              		.loc 1 331 0
 1573              		@ Function supports interworking.
 1574              		@ args = 0, pretend = 0, frame = 0
 1575              		@ frame_needed = 0, uses_anonymous_args = 0
 1576              	.LVL144:
 1577 0964 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1578              	.LCFI41:
 1579              		.loc 1 331 0
 1580 0968 0053A0E1 		mov	r5, r0, asl #6
 1581              		.loc 1 332 0
 1582 096c FF5D05E2 		and	r5, r5, #16320
 1583 0970 834F85E2 		add	r4, r5, #524
 1584 0974 0400A0E1 		mov	r0, r4
 1585              	.LVL145:
 1586              		.loc 1 331 0
 1587 0978 0160A0E1 		mov	r6, r1
 1588              		.loc 1 332 0
 1589 097c FEFFFFEB 		bl	IINCHIP_READ
 1590              	.LVL146:
 1591 0980 2004A0E1 		mov	r0, r0, lsr #8
 1592 0984 0000C6E5 		strb	r0, [r6, #0]
 1593              		.loc 1 333 0
 1594 0988 0400A0E1 		mov	r0, r4
 1595 098c FEFFFFEB 		bl	IINCHIP_READ
 1596              		.loc 1 334 0
 1597 0990 024084E2 		add	r4, r4, #2
 1598              		.loc 1 333 0
 1599 0994 0100C6E5 		strb	r0, [r6, #1]
 1600              		.loc 1 334 0
 1601 0998 0400A0E1 		mov	r0, r4
 1602 099c FEFFFFEB 		bl	IINCHIP_READ
 1603 09a0 2004A0E1 		mov	r0, r0, lsr #8
 1604 09a4 0200C6E5 		strb	r0, [r6, #2]
 1605              		.loc 1 335 0
 1606 09a8 0400A0E1 		mov	r0, r4
 1607 09ac FEFFFFEB 		bl	IINCHIP_READ
 1608              		.loc 1 336 0
 1609 09b0 215E85E2 		add	r5, r5, #528
 1610              		.loc 1 335 0
 1611 09b4 0300C6E5 		strb	r0, [r6, #3]
 1612              		.loc 1 336 0
 1613 09b8 0500A0E1 		mov	r0, r5
 1614 09bc FEFFFFEB 		bl	IINCHIP_READ
 1615 09c0 2004A0E1 		mov	r0, r0, lsr #8
 1616 09c4 0400C6E5 		strb	r0, [r6, #4]
 1617              		.loc 1 337 0
 1618 09c8 0500A0E1 		mov	r0, r5
 1619 09cc FEFFFFEB 		bl	IINCHIP_READ
 1620 09d0 0500C6E5 		strb	r0, [r6, #5]
 1621              		.loc 1 338 0
 1622 09d4 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1623 09d8 1EFF2FE1 		bx	lr
 1624              	.LFE42:
 1626              		.align	2
 1627              		.global	getSn_SSR
 1629              	getSn_SSR:
 1630              	.LFB41:
 1631              		.loc 1 307 0
 1632              		@ Function supports interworking.
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              	.LVL147:
 1636 09dc F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 1637              	.LCFI42:
 1638              		.loc 1 307 0
 1639 09e0 FF7000E2 		and	r7, r0, #255
 1640              		.loc 1 309 0
 1641 09e4 0733A0E1 		mov	r3, r7, asl #6
 1642 09e8 826F83E2 		add	r6, r3, #520
 1643 09ec 0600A0E1 		mov	r0, r6
 1644              	.LVL148:
 1645 09f0 FEFFFFEB 		bl	IINCHIP_READ
 1646 09f4 FF5000E2 		and	r5, r0, #255
 1647              	.LVL149:
 1648              	.LVL150:
 1649              	.L129:
 1650              		.loc 1 313 0
 1651 09f8 0600A0E1 		mov	r0, r6
 1652 09fc FEFFFFEB 		bl	IINCHIP_READ
 1653 0a00 0030A0E1 		mov	r3, r0
 1654 0a04 FF4003E2 		and	r4, r3, #255
 1655              		.loc 1 314 0
 1656 0a08 040055E1 		cmp	r5, r4
 1657              		.loc 1 315 0
 1658 0a0c 0600A0E1 		mov	r0, r6
 1659              		.loc 1 314 0
 1660 0a10 0400000A 		beq	.L130
 1661              		.loc 1 315 0
 1662 0a14 FEFFFFEB 		bl	IINCHIP_READ
 1663              		.loc 1 317 0
 1664 0a18 0600A0E1 		mov	r0, r6
 1665 0a1c FEFFFFEB 		bl	IINCHIP_READ
 1666 0a20 0450A0E1 		mov	r5, r4
 1667 0a24 F3FFFFEA 		b	.L129
 1668              	.L130:
 1669              		.loc 1 321 0
 1670 0a28 000055E3 		cmp	r5, #0
 1671 0a2c 0A00001A 		bne	.L132
 1672 0a30 30309FE5 		ldr	r3, .L137
 1673 0a34 0730D3E7 		ldrb	r3, [r3, r7]	@ zero_extendqisi2
 1674 0a38 000053E3 		cmp	r3, #0
 1675 0a3c 0600000A 		beq	.L132
 1676              		.loc 1 322 0
 1677 0a40 24209FE5 		ldr	r2, .L137+4
 1678 0a44 073192E7 		ldr	r3, [r2, r7, asl #2]
 1679 0a48 013083E2 		add	r3, r3, #1
 1680              		.loc 1 323 0
 1681 0a4c 020053E3 		cmp	r3, #2
 1682              		.loc 1 322 0
 1683 0a50 073182E7 		str	r3, [r2, r7, asl #2]
 1684              		.loc 1 323 0
 1685              		.loc 1 324 0
 1686 0a54 0600A0D1 		movle	r0, r6
 1687 0a58 FEFFFFDB 		blle	IINCHIP_READ
 1688              	.L132:
 1689              		.loc 1 328 0
 1690 0a5c 0500A0E1 		mov	r0, r5
 1691 0a60 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 1692 0a64 1EFF2FE1 		bx	lr
 1693              	.L138:
 1694              		.align	2
 1695              	.L137:
 1696 0a68 00000000 		.word	socState
 1697 0a6c 00000000 		.word	ssrErr
 1698              	.LFE41:
 1700              		.align	2
 1701              		.global	getSn_IR
 1703              	getSn_IR:
 1704              	.LFB39:
 1705              		.loc 1 291 0
 1706              		@ Function supports interworking.
 1707              		@ args = 0, pretend = 0, frame = 0
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 1709              	.LVL151:
 1710 0a70 0003A0E1 		mov	r0, r0, asl #6
 1711              		.loc 1 294 0
 1712 0a74 FF0D00E2 		and	r0, r0, #16320
 1713              	.LVL152:
 1714 0a78 810F80E2 		add	r0, r0, #516
 1715              		.loc 1 291 0
 1716 0a7c 04E02DE5 		str	lr, [sp, #-4]!
 1717              	.LCFI43:
 1718              		.loc 1 294 0
 1719 0a80 020080E2 		add	r0, r0, #2
 1720 0a84 FEFFFFEB 		bl	IINCHIP_READ
 1721 0a88 FF0000E2 		and	r0, r0, #255
 1722              		.loc 1 296 0
 1723 0a8c 04E09DE4 		ldr	lr, [sp], #4
 1724 0a90 1EFF2FE1 		bx	lr
 1725              	.LFE39:
 1727              		.align	2
 1728              		.global	getSn_IMR
 1730              	getSn_IMR:
 1731              	.LFB37:
 1732              		.loc 1 281 0
 1733              		@ Function supports interworking.
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
 1736              	.LVL153:
 1737 0a94 0003A0E1 		mov	r0, r0, asl #6
 1738              		.loc 1 282 0
 1739 0a98 FF0D00E2 		and	r0, r0, #16320
 1740              	.LVL154:
 1741              		.loc 1 281 0
 1742 0a9c 04E02DE5 		str	lr, [sp, #-4]!
 1743              	.LCFI44:
 1744              		.loc 1 282 0
 1745 0aa0 810F80E2 		add	r0, r0, #516
 1746 0aa4 FEFFFFEB 		bl	IINCHIP_READ
 1747 0aa8 FF0000E2 		and	r0, r0, #255
 1748              		.loc 1 283 0
 1749 0aac 04E09DE4 		ldr	lr, [sp], #4
 1750 0ab0 1EFF2FE1 		bx	lr
 1751              	.LFE37:
 1753              		.section	.rodata.str1.4
 1754              		.align	2
 1755              	.LC3:
 1756 006c 0A0D2323 		.ascii	"\012\015##CmdRdy Timeout CRcnt=%d cmd=%04x  S(%d)_C"
 1756      436D6452 
 1756      64792054 
 1756      696D656F 
 1756      75742043 
 1757 0099 523D2530 		.ascii	"R=%04x  \000"
 1757      34782020 
 1757      00
 1758 00a2 0000     		.align	2
 1759              	.LC4:
 1760 00a4 536E5F49 		.ascii	"Sn_IR=%02x  \000"
 1760      523D2530 
 1760      32782020 
 1760      00
 1761 00b1 000000   		.align	2
 1762              	.LC5:
 1763 00b4 536E5F53 		.ascii	"Sn_SSR=%02x  \000"
 1763      53523D25 
 1763      30327820 
 1763      2000
 1764 00c2 0000     		.text
 1765              		.align	2
 1766              		.global	setSn_CR
 1768              	setSn_CR:
 1769              	.LFB36:
 1770              		.loc 1 253 0
 1771              		@ Function supports interworking.
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 0, uses_anonymous_args = 0
 1774              	.LVL155:
 1775 0ab4 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1776              	.LCFI45:
 1777              		.loc 1 257 0
 1778 0ab8 E4209FE5 		ldr	r2, .L153
 1779              		.loc 1 253 0
 1780 0abc FF7000E2 		and	r7, r0, #255
 1781              		.loc 1 260 0
 1782 0ac0 0733A0E1 		mov	r3, r7, asl #6
 1783 0ac4 024C83E2 		add	r4, r3, #512
 1784              		.loc 1 257 0
 1785 0ac8 003092E5 		ldr	r3, [r2, #0]
 1786              		.loc 1 253 0
 1787 0acc 0118A0E1 		mov	r1, r1, asl #16
 1788              	.LVL156:
 1789              		.loc 1 257 0
 1790 0ad0 013083E2 		add	r3, r3, #1
 1791              		.loc 1 253 0
 1792 0ad4 2188A0E1 		mov	r8, r1, lsr #16
 1793              	.LVL157:
 1794              		.loc 1 260 0
 1795 0ad8 024084E2 		add	r4, r4, #2
 1796              		.loc 1 253 0
 1797 0adc 04D04DE2 		sub	sp, sp, #4
 1798              	.LCFI46:
 1799              		.loc 1 260 0
 1800 0ae0 0400A0E1 		mov	r0, r4
 1801              	.LVL158:
 1802 0ae4 0810A0E1 		mov	r1, r8
 1803              		.loc 1 257 0
 1804 0ae8 003082E5 		str	r3, [r2, #0]
 1805              		.loc 1 260 0
 1806 0aec FEFFFFEB 		bl	IINCHIP_WRITE
 1807 0af0 0050A0E3 		mov	r5, #0
 1808              	.LVL159:
 1809 0af4 210000EA 		b	.L144
 1810              	.L145:
 1811              		.loc 1 263 0
 1812 0af8 003092E5 		ldr	r3, [r2, #0]
 1813 0afc 030055E1 		cmp	r5, r3
 1814              		.loc 1 264 0
 1815 0b00 A0309FE5 		ldr	r3, .L153+4
 1816              		.loc 1 263 0
 1817 0b04 005082C5 		strgt	r5, [r2, #0]
 1818              		.loc 1 264 0
 1819 0b08 030055E1 		cmp	r5, r3
 1820 0b0c 1B00001A 		bne	.L144
 1821              		.loc 1 265 0
 1822 0b10 0400A0E1 		mov	r0, r4
 1823 0b14 FEFFFFEB 		bl	IINCHIP_READ
 1824 0b18 0060A0E1 		mov	r6, r0
 1825              		.loc 1 266 0
 1826 0b1c 0700A0E1 		mov	r0, r7
 1827 0b20 FEFFFFEB 		bl	getSn_IR
 1828 0b24 0040A0E1 		mov	r4, r0
 1829              		.loc 1 267 0
 1830 0b28 0700A0E1 		mov	r0, r7
 1831 0b2c FEFFFFEB 		bl	getSn_SSR
 1832              		.loc 1 268 0
 1833 0b30 6C109FE5 		ldr	r1, .L153
 1834 0b34 0820A0E1 		mov	r2, r8
 1835 0b38 0730A0E1 		mov	r3, r7
 1836 0b3c 001091E5 		ldr	r1, [r1, #0]
 1837              		.loc 1 267 0
 1838 0b40 0050A0E1 		mov	r5, r0
 1839              	.LVL160:
 1840              		.loc 1 270 0
 1841 0b44 0448A0E1 		mov	r4, r4, asl #16
 1842              		.loc 1 268 0
 1843 0b48 5C009FE5 		ldr	r0, .L153+8
 1844 0b4c 00608DE5 		str	r6, [sp, #0]
 1845              		.loc 1 271 0
 1846 0b50 0558A0E1 		mov	r5, r5, asl #16
 1847              		.loc 1 268 0
 1848 0b54 FEFFFFEB 		bl	printf
 1849              		.loc 1 270 0
 1850 0b58 2418A0E1 		mov	r1, r4, lsr #16
 1851 0b5c 4C009FE5 		ldr	r0, .L153+12
 1852 0b60 FEFFFFEB 		bl	printf
 1853              		.loc 1 271 0
 1854 0b64 2518A0E1 		mov	r1, r5, lsr #16
 1855 0b68 44009FE5 		ldr	r0, .L153+16
 1856 0b6c FEFFFFEB 		bl	printf
 1857              		.loc 1 274 0
 1858 0b70 40309FE5 		ldr	r3, .L153+20
 1859 0b74 0120A0E3 		mov	r2, #1
 1860 0b78 002083E5 		str	r2, [r3, #0]
 1861 0b7c 050000EA 		b	.L150
 1862              	.LVL161:
 1863              	.L144:
 1864              		.loc 1 261 0
 1865 0b80 0400A0E1 		mov	r0, r4
 1866 0b84 FEFFFFEB 		bl	IINCHIP_READ
 1867 0b88 000050E3 		cmp	r0, #0
 1868              		.loc 1 263 0
 1869 0b8c 28209FE5 		ldr	r2, .L153+24
 1870              		.loc 1 262 0
 1871 0b90 015085E2 		add	r5, r5, #1
 1872              		.loc 1 261 0
 1873 0b94 D7FFFF1A 		bne	.L145
 1874              	.L150:
 1875              		.loc 1 278 0
 1876 0b98 04D08DE2 		add	sp, sp, #4
 1877 0b9c F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1878 0ba0 1EFF2FE1 		bx	lr
 1879              	.L154:
 1880              		.align	2
 1881              	.L153:
 1882 0ba4 00000000 		.word	sCRcnt
 1883 0ba8 214E0000 		.word	20001
 1884 0bac 6C000000 		.word	.LC3
 1885 0bb0 A4000000 		.word	.LC4
 1886 0bb4 B4000000 		.word	.LC5
 1887 0bb8 00000000 		.word	W53ErFlg
 1888 0bbc 00000000 		.word	CRdyMax
 1889              	.LFE36:
 1891              		.align	2
 1892              		.global	getSn_CR
 1894              	getSn_CR:
 1895              	.LFB35:
 1896              		.loc 1 248 0
 1897              		@ Function supports interworking.
 1898              		@ args = 0, pretend = 0, frame = 0
 1899              		@ frame_needed = 0, uses_anonymous_args = 0
 1900              	.LVL162:
 1901 0bc0 0003A0E1 		mov	r0, r0, asl #6
 1902              		.loc 1 249 0
 1903 0bc4 FF0D00E2 		and	r0, r0, #16320
 1904              	.LVL163:
 1905 0bc8 020C80E2 		add	r0, r0, #512
 1906              		.loc 1 248 0
 1907 0bcc 04E02DE5 		str	lr, [sp, #-4]!
 1908              	.LCFI47:
 1909              		.loc 1 249 0
 1910 0bd0 020080E2 		add	r0, r0, #2
 1911 0bd4 FEFFFFEB 		bl	IINCHIP_READ
 1912 0bd8 FF0000E2 		and	r0, r0, #255
 1913              		.loc 1 250 0
 1914 0bdc 04E09DE4 		ldr	lr, [sp], #4
 1915 0be0 1EFF2FE1 		bx	lr
 1916              	.LFE35:
 1918              		.align	2
 1919              		.global	getSn_MR
 1921              	getSn_MR:
 1922              	.LFB33:
 1923              		.loc 1 239 0
 1924              		@ Function supports interworking.
 1925              		@ args = 0, pretend = 0, frame = 0
 1926              		@ frame_needed = 0, uses_anonymous_args = 0
 1927              	.LVL164:
 1928 0be4 0003A0E1 		mov	r0, r0, asl #6
 1929              		.loc 1 240 0
 1930 0be8 FF0D00E2 		and	r0, r0, #16320
 1931              	.LVL165:
 1932              		.loc 1 239 0
 1933 0bec 04E02DE5 		str	lr, [sp, #-4]!
 1934              	.LCFI48:
 1935              		.loc 1 240 0
 1936 0bf0 020C80E2 		add	r0, r0, #512
 1937 0bf4 FEFFFFEB 		bl	IINCHIP_READ
 1938              		.loc 1 241 0
 1939 0bf8 04E09DE4 		ldr	lr, [sp], #4
 1940 0bfc 1EFF2FE1 		bx	lr
 1941              	.LFE33:
 1943              		.align	2
 1944              		.global	getIDR
 1946              	getIDR:
 1947              	.LFB32:
 1948              		.loc 1 227 0
 1949              		@ Function supports interworking.
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952 0c00 04E02DE5 		str	lr, [sp, #-4]!
 1953              	.LCFI49:
 1954              		.loc 1 228 0
 1955 0c04 FE00A0E3 		mov	r0, #254
 1956 0c08 FEFFFFEB 		bl	IINCHIP_READ
 1957              		.loc 1 229 0
 1958 0c0c 04E09DE4 		ldr	lr, [sp], #4
 1959 0c10 1EFF2FE1 		bx	lr
 1960              	.LFE32:
 1962              		.align	2
 1963              		.global	getPn_BDPTHR
 1965              	getPn_BDPTHR:
 1966              	.LFB30:
 1967              		.loc 1 216 0
 1968              		@ Function supports interworking.
 1969              		@ args = 0, pretend = 0, frame = 0
 1970              		@ frame_needed = 0, uses_anonymous_args = 0
 1971              	.LVL166:
 1972 0c14 0001A0E1 		mov	r0, r0, asl #2
 1973              		.loc 1 217 0
 1974 0c18 FF0F00E2 		and	r0, r0, #1020
 1975              	.LVL167:
 1976              		.loc 1 216 0
 1977 0c1c 04E02DE5 		str	lr, [sp, #-4]!
 1978              	.LCFI50:
 1979              		.loc 1 217 0
 1980 0c20 620080E2 		add	r0, r0, #98
 1981 0c24 FEFFFFEB 		bl	IINCHIP_READ
 1982              		.loc 1 218 0
 1983 0c28 04E09DE4 		ldr	lr, [sp], #4
 1984 0c2c 1EFF2FE1 		bx	lr
 1985              	.LFE30:
 1987              		.align	2
 1988              		.global	getPn_BRDYR
 1990              	getPn_BRDYR:
 1991              	.LFB28:
 1992              		.loc 1 206 0
 1993              		@ Function supports interworking.
 1994              		@ args = 0, pretend = 0, frame = 0
 1995              		@ frame_needed = 0, uses_anonymous_args = 0
 1996              	.LVL168:
 1997 0c30 0001A0E1 		mov	r0, r0, asl #2
 1998              		.loc 1 207 0
 1999 0c34 FF0F00E2 		and	r0, r0, #1020
 2000              	.LVL169:
 2001              		.loc 1 206 0
 2002 0c38 04E02DE5 		str	lr, [sp, #-4]!
 2003              	.LCFI51:
 2004              		.loc 1 207 0
 2005 0c3c 600080E2 		add	r0, r0, #96
 2006 0c40 FEFFFFEB 		bl	IINCHIP_READ
 2007 0c44 FF0000E2 		and	r0, r0, #255
 2008              		.loc 1 208 0
 2009 0c48 04E09DE4 		ldr	lr, [sp], #4
 2010 0c4c 1EFF2FE1 		bx	lr
 2011              	.LFE28:
 2013              		.align	2
 2014              		.global	getFMTUR
 2016              	getFMTUR:
 2017              	.LFB27:
 2018              		.loc 1 198 0
 2019              		@ Function supports interworking.
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 2022 0c50 04E02DE5 		str	lr, [sp, #-4]!
 2023              	.LCFI52:
 2024              		.loc 1 199 0
 2025 0c54 4E00A0E3 		mov	r0, #78
 2026 0c58 FEFFFFEB 		bl	IINCHIP_READ
 2027              		.loc 1 200 0
 2028 0c5c 04E09DE4 		ldr	lr, [sp], #4
 2029 0c60 1EFF2FE1 		bx	lr
 2030              	.LFE27:
 2032              		.align	2
 2033              		.global	getUPORTR
 2035              	getUPORTR:
 2036              	.LFB26:
 2037              		.loc 1 193 0
 2038              		@ Function supports interworking.
 2039              		@ args = 0, pretend = 0, frame = 0
 2040              		@ frame_needed = 0, uses_anonymous_args = 0
 2041 0c64 04E02DE5 		str	lr, [sp, #-4]!
 2042              	.LCFI53:
 2043              		.loc 1 194 0
 2044 0c68 4C00A0E3 		mov	r0, #76
 2045 0c6c FEFFFFEB 		bl	IINCHIP_READ
 2046              		.loc 1 195 0
 2047 0c70 04E09DE4 		ldr	lr, [sp], #4
 2048 0c74 1EFF2FE1 		bx	lr
 2049              	.LFE26:
 2051              		.align	2
 2052              		.global	getUIPR
 2054              	getUIPR:
 2055              	.LFB25:
 2056              		.loc 1 185 0
 2057              		@ Function supports interworking.
 2058              		@ args = 0, pretend = 0, frame = 0
 2059              		@ frame_needed = 0, uses_anonymous_args = 0
 2060              	.LVL170:
 2061 0c78 10402DE9 		stmfd	sp!, {r4, lr}
 2062              	.LCFI54:
 2063              		.loc 1 185 0
 2064 0c7c 0040A0E1 		mov	r4, r0
 2065              		.loc 1 186 0
 2066 0c80 4800A0E3 		mov	r0, #72
 2067              	.LVL171:
 2068 0c84 FEFFFFEB 		bl	IINCHIP_READ
 2069 0c88 2004A0E1 		mov	r0, r0, lsr #8
 2070 0c8c 0000C4E5 		strb	r0, [r4, #0]
 2071              		.loc 1 187 0
 2072 0c90 4800A0E3 		mov	r0, #72
 2073 0c94 FEFFFFEB 		bl	IINCHIP_READ
 2074 0c98 0100C4E5 		strb	r0, [r4, #1]
 2075              		.loc 1 188 0
 2076 0c9c 4A00A0E3 		mov	r0, #74
 2077 0ca0 FEFFFFEB 		bl	IINCHIP_READ
 2078 0ca4 2004A0E1 		mov	r0, r0, lsr #8
 2079 0ca8 0200C4E5 		strb	r0, [r4, #2]
 2080              		.loc 1 189 0
 2081 0cac 4A00A0E3 		mov	r0, #74
 2082 0cb0 FEFFFFEB 		bl	IINCHIP_READ
 2083 0cb4 0300C4E5 		strb	r0, [r4, #3]
 2084              		.loc 1 190 0
 2085 0cb8 1040BDE8 		ldmfd	sp!, {r4, lr}
 2086 0cbc 1EFF2FE1 		bx	lr
 2087              	.LFE25:
 2089              		.align	2
 2090              		.global	getPDHAR
 2092              	getPDHAR:
 2093              	.LFB24:
 2094              		.loc 1 172 0
 2095              		@ Function supports interworking.
 2096              		@ args = 0, pretend = 0, frame = 0
 2097              		@ frame_needed = 0, uses_anonymous_args = 0
 2098              	.LVL172:
 2099 0cc0 10402DE9 		stmfd	sp!, {r4, lr}
 2100              	.LCFI55:
 2101              		.loc 1 172 0
 2102 0cc4 0040A0E1 		mov	r4, r0
 2103              		.loc 1 173 0
 2104 0cc8 4000A0E3 		mov	r0, #64
 2105              	.LVL173:
 2106 0ccc FEFFFFEB 		bl	IINCHIP_READ
 2107 0cd0 2004A0E1 		mov	r0, r0, lsr #8
 2108 0cd4 0000C4E5 		strb	r0, [r4, #0]
 2109              		.loc 1 174 0
 2110 0cd8 4000A0E3 		mov	r0, #64
 2111 0cdc FEFFFFEB 		bl	IINCHIP_READ
 2112 0ce0 0100C4E5 		strb	r0, [r4, #1]
 2113              		.loc 1 175 0
 2114 0ce4 4200A0E3 		mov	r0, #66
 2115 0ce8 FEFFFFEB 		bl	IINCHIP_READ
 2116 0cec 2004A0E1 		mov	r0, r0, lsr #8
 2117 0cf0 0200C4E5 		strb	r0, [r4, #2]
 2118              		.loc 1 176 0
 2119 0cf4 4200A0E3 		mov	r0, #66
 2120 0cf8 FEFFFFEB 		bl	IINCHIP_READ
 2121 0cfc 0300C4E5 		strb	r0, [r4, #3]
 2122              		.loc 1 177 0
 2123 0d00 4400A0E3 		mov	r0, #68
 2124 0d04 FEFFFFEB 		bl	IINCHIP_READ
 2125 0d08 2004A0E1 		mov	r0, r0, lsr #8
 2126 0d0c 0400C4E5 		strb	r0, [r4, #4]
 2127              		.loc 1 178 0
 2128 0d10 4400A0E3 		mov	r0, #68
 2129 0d14 FEFFFFEB 		bl	IINCHIP_READ
 2130 0d18 0500C4E5 		strb	r0, [r4, #5]
 2131              		.loc 1 179 0
 2132 0d1c 1040BDE8 		ldmfd	sp!, {r4, lr}
 2133 0d20 1EFF2FE1 		bx	lr
 2134              	.LFE24:
 2136              		.align	2
 2137              		.global	getPSIDR
 2139              	getPSIDR:
 2140              	.LFB23:
 2141              		.loc 1 167 0
 2142              		@ Function supports interworking.
 2143              		@ args = 0, pretend = 0, frame = 0
 2144              		@ frame_needed = 0, uses_anonymous_args = 0
 2145 0d24 04E02DE5 		str	lr, [sp, #-4]!
 2146              	.LCFI56:
 2147              		.loc 1 168 0
 2148 0d28 3C00A0E3 		mov	r0, #60
 2149 0d2c FEFFFFEB 		bl	IINCHIP_READ
 2150              		.loc 1 169 0
 2151 0d30 04E09DE4 		ldr	lr, [sp], #4
 2152 0d34 1EFF2FE1 		bx	lr
 2153              	.LFE23:
 2155              		.align	2
 2156              		.global	getPMAGICR
 2158              	getPMAGICR:
 2159              	.LFB21:
 2160              		.loc 1 158 0
 2161              		@ Function supports interworking.
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164 0d38 04E02DE5 		str	lr, [sp, #-4]!
 2165              	.LCFI57:
 2166              		.loc 1 159 0
 2167 0d3c 3800A0E3 		mov	r0, #56
 2168 0d40 FEFFFFEB 		bl	IINCHIP_READ
 2169 0d44 FF0000E2 		and	r0, r0, #255
 2170              		.loc 1 160 0
 2171 0d48 04E09DE4 		ldr	lr, [sp], #4
 2172 0d4c 1EFF2FE1 		bx	lr
 2173              	.LFE21:
 2175              		.align	2
 2176              		.global	getPTIMER
 2178              	getPTIMER:
 2179              	.LFB19:
 2180              		.loc 1 149 0
 2181              		@ Function supports interworking.
 2182              		@ args = 0, pretend = 0, frame = 0
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184 0d50 04E02DE5 		str	lr, [sp, #-4]!
 2185              	.LCFI58:
 2186              		.loc 1 150 0
 2187 0d54 3600A0E3 		mov	r0, #54
 2188 0d58 FEFFFFEB 		bl	IINCHIP_READ
 2189 0d5c FF0000E2 		and	r0, r0, #255
 2190              		.loc 1 151 0
 2191 0d60 04E09DE4 		ldr	lr, [sp], #4
 2192 0d64 1EFF2FE1 		bx	lr
 2193              	.LFE19:
 2195              		.align	2
 2196              		.global	getPATR
 2198              	getPATR:
 2199              	.LFB18:
 2200              		.loc 1 144 0
 2201              		@ Function supports interworking.
 2202              		@ args = 0, pretend = 0, frame = 0
 2203              		@ frame_needed = 0, uses_anonymous_args = 0
 2204 0d68 04E02DE5 		str	lr, [sp, #-4]!
 2205              	.LCFI59:
 2206              		.loc 1 145 0
 2207 0d6c 3200A0E3 		mov	r0, #50
 2208 0d70 FEFFFFEB 		bl	IINCHIP_READ
 2209              		.loc 1 146 0
 2210 0d74 04E09DE4 		ldr	lr, [sp], #4
 2211 0d78 1EFF2FE1 		bx	lr
 2212              	.LFE18:
 2214              		.align	2
 2215              		.global	getRCR
 2217              	getRCR:
 2218              	.LFB16:
 2219              		.loc 1 134 0
 2220              		@ Function supports interworking.
 2221              		@ args = 0, pretend = 0, frame = 0
 2222              		@ frame_needed = 0, uses_anonymous_args = 0
 2223 0d7c 04E02DE5 		str	lr, [sp, #-4]!
 2224              	.LCFI60:
 2225              		.loc 1 135 0
 2226 0d80 1E00A0E3 		mov	r0, #30
 2227 0d84 FEFFFFEB 		bl	IINCHIP_READ
 2228 0d88 FF0000E2 		and	r0, r0, #255
 2229              		.loc 1 136 0
 2230 0d8c 04E09DE4 		ldr	lr, [sp], #4
 2231 0d90 1EFF2FE1 		bx	lr
 2232              	.LFE16:
 2234              		.align	2
 2235              		.global	getRTR
 2237              	getRTR:
 2238              	.LFB14:
 2239              		.loc 1 125 0
 2240              		@ Function supports interworking.
 2241              		@ args = 0, pretend = 0, frame = 0
 2242              		@ frame_needed = 0, uses_anonymous_args = 0
 2243 0d94 04E02DE5 		str	lr, [sp, #-4]!
 2244              	.LCFI61:
 2245              		.loc 1 126 0
 2246 0d98 1C00A0E3 		mov	r0, #28
 2247 0d9c FEFFFFEB 		bl	IINCHIP_READ
 2248              		.loc 1 127 0
 2249 0da0 04E09DE4 		ldr	lr, [sp], #4
 2250 0da4 1EFF2FE1 		bx	lr
 2251              	.LFE14:
 2253              		.align	2
 2254              		.global	getSIPR
 2256              	getSIPR:
 2257              	.LFB12:
 2258              		.loc 1 109 0
 2259              		@ Function supports interworking.
 2260              		@ args = 0, pretend = 0, frame = 0
 2261              		@ frame_needed = 0, uses_anonymous_args = 0
 2262              	.LVL174:
 2263 0da8 10402DE9 		stmfd	sp!, {r4, lr}
 2264              	.LCFI62:
 2265              		.loc 1 109 0
 2266 0dac 0040A0E1 		mov	r4, r0
 2267              		.loc 1 110 0
 2268 0db0 1800A0E3 		mov	r0, #24
 2269              	.LVL175:
 2270 0db4 FEFFFFEB 		bl	IINCHIP_READ
 2271 0db8 2004A0E1 		mov	r0, r0, lsr #8
 2272 0dbc 0000C4E5 		strb	r0, [r4, #0]
 2273              		.loc 1 111 0
 2274 0dc0 1800A0E3 		mov	r0, #24
 2275 0dc4 FEFFFFEB 		bl	IINCHIP_READ
 2276 0dc8 0100C4E5 		strb	r0, [r4, #1]
 2277              		.loc 1 112 0
 2278 0dcc 1A00A0E3 		mov	r0, #26
 2279 0dd0 FEFFFFEB 		bl	IINCHIP_READ
 2280 0dd4 2004A0E1 		mov	r0, r0, lsr #8
 2281 0dd8 0200C4E5 		strb	r0, [r4, #2]
 2282              		.loc 1 113 0
 2283 0ddc 1A00A0E3 		mov	r0, #26
 2284 0de0 FEFFFFEB 		bl	IINCHIP_READ
 2285 0de4 0300C4E5 		strb	r0, [r4, #3]
 2286              		.loc 1 114 0
 2287 0de8 1040BDE8 		ldmfd	sp!, {r4, lr}
 2288 0dec 1EFF2FE1 		bx	lr
 2289              	.LFE12:
 2291              		.align	2
 2292              		.global	getSUBR
 2294              	getSUBR:
 2295              	.LFB10:
 2296              		.loc 1 96 0
 2297              		@ Function supports interworking.
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              	.LVL176:
 2301 0df0 10402DE9 		stmfd	sp!, {r4, lr}
 2302              	.LCFI63:
 2303              		.loc 1 96 0
 2304 0df4 0040A0E1 		mov	r4, r0
 2305              		.loc 1 97 0
 2306 0df8 1400A0E3 		mov	r0, #20
 2307              	.LVL177:
 2308 0dfc FEFFFFEB 		bl	IINCHIP_READ
 2309 0e00 2004A0E1 		mov	r0, r0, lsr #8
 2310 0e04 0000C4E5 		strb	r0, [r4, #0]
 2311              		.loc 1 98 0
 2312 0e08 1400A0E3 		mov	r0, #20
 2313 0e0c FEFFFFEB 		bl	IINCHIP_READ
 2314 0e10 0100C4E5 		strb	r0, [r4, #1]
 2315              		.loc 1 99 0
 2316 0e14 1600A0E3 		mov	r0, #22
 2317 0e18 FEFFFFEB 		bl	IINCHIP_READ
 2318 0e1c 2004A0E1 		mov	r0, r0, lsr #8
 2319 0e20 0200C4E5 		strb	r0, [r4, #2]
 2320              		.loc 1 100 0
 2321 0e24 1600A0E3 		mov	r0, #22
 2322 0e28 FEFFFFEB 		bl	IINCHIP_READ
 2323 0e2c 0300C4E5 		strb	r0, [r4, #3]
 2324              		.loc 1 101 0
 2325 0e30 1040BDE8 		ldmfd	sp!, {r4, lr}
 2326 0e34 1EFF2FE1 		bx	lr
 2327              	.LFE10:
 2329              		.align	2
 2330              		.global	getGAR
 2332              	getGAR:
 2333              	.LFB8:
 2334              		.loc 1 83 0
 2335              		@ Function supports interworking.
 2336              		@ args = 0, pretend = 0, frame = 0
 2337              		@ frame_needed = 0, uses_anonymous_args = 0
 2338              	.LVL178:
 2339 0e38 10402DE9 		stmfd	sp!, {r4, lr}
 2340              	.LCFI64:
 2341              		.loc 1 83 0
 2342 0e3c 0040A0E1 		mov	r4, r0
 2343              		.loc 1 84 0
 2344 0e40 1000A0E3 		mov	r0, #16
 2345              	.LVL179:
 2346 0e44 FEFFFFEB 		bl	IINCHIP_READ
 2347 0e48 2004A0E1 		mov	r0, r0, lsr #8
 2348 0e4c 0000C4E5 		strb	r0, [r4, #0]
 2349              		.loc 1 85 0
 2350 0e50 1000A0E3 		mov	r0, #16
 2351 0e54 FEFFFFEB 		bl	IINCHIP_READ
 2352 0e58 0100C4E5 		strb	r0, [r4, #1]
 2353              		.loc 1 86 0
 2354 0e5c 1200A0E3 		mov	r0, #18
 2355 0e60 FEFFFFEB 		bl	IINCHIP_READ
 2356 0e64 2004A0E1 		mov	r0, r0, lsr #8
 2357 0e68 0200C4E5 		strb	r0, [r4, #2]
 2358              		.loc 1 87 0
 2359 0e6c 1200A0E3 		mov	r0, #18
 2360 0e70 FEFFFFEB 		bl	IINCHIP_READ
 2361 0e74 0300C4E5 		strb	r0, [r4, #3]
 2362              		.loc 1 88 0
 2363 0e78 1040BDE8 		ldmfd	sp!, {r4, lr}
 2364 0e7c 1EFF2FE1 		bx	lr
 2365              	.LFE8:
 2367              		.align	2
 2368              		.global	getSHAR
 2370              	getSHAR:
 2371              	.LFB6:
 2372              		.loc 1 67 0
 2373              		@ Function supports interworking.
 2374              		@ args = 0, pretend = 0, frame = 0
 2375              		@ frame_needed = 0, uses_anonymous_args = 0
 2376              	.LVL180:
 2377 0e80 10402DE9 		stmfd	sp!, {r4, lr}
 2378              	.LCFI65:
 2379              		.loc 1 67 0
 2380 0e84 0040A0E1 		mov	r4, r0
 2381              		.loc 1 68 0
 2382 0e88 0800A0E3 		mov	r0, #8
 2383              	.LVL181:
 2384 0e8c FEFFFFEB 		bl	IINCHIP_READ
 2385 0e90 2004A0E1 		mov	r0, r0, lsr #8
 2386 0e94 0000C4E5 		strb	r0, [r4, #0]
 2387              		.loc 1 69 0
 2388 0e98 0800A0E3 		mov	r0, #8
 2389 0e9c FEFFFFEB 		bl	IINCHIP_READ
 2390 0ea0 0100C4E5 		strb	r0, [r4, #1]
 2391              		.loc 1 70 0
 2392 0ea4 0A00A0E3 		mov	r0, #10
 2393 0ea8 FEFFFFEB 		bl	IINCHIP_READ
 2394 0eac 2004A0E1 		mov	r0, r0, lsr #8
 2395 0eb0 0200C4E5 		strb	r0, [r4, #2]
 2396              		.loc 1 71 0
 2397 0eb4 0A00A0E3 		mov	r0, #10
 2398 0eb8 FEFFFFEB 		bl	IINCHIP_READ
 2399 0ebc 0300C4E5 		strb	r0, [r4, #3]
 2400              		.loc 1 72 0
 2401 0ec0 0C00A0E3 		mov	r0, #12
 2402 0ec4 FEFFFFEB 		bl	IINCHIP_READ
 2403 0ec8 2004A0E1 		mov	r0, r0, lsr #8
 2404 0ecc 0400C4E5 		strb	r0, [r4, #4]
 2405              		.loc 1 73 0
 2406 0ed0 0C00A0E3 		mov	r0, #12
 2407 0ed4 FEFFFFEB 		bl	IINCHIP_READ
 2408 0ed8 0500C4E5 		strb	r0, [r4, #5]
 2409              		.loc 1 74 0
 2410 0edc 1040BDE8 		ldmfd	sp!, {r4, lr}
 2411 0ee0 1EFF2FE1 		bx	lr
 2412              	.LFE6:
 2414              		.align	2
 2415              		.global	getIMR
 2417              	getIMR:
 2418              	.LFB4:
 2419              		.loc 1 55 0
 2420              		@ Function supports interworking.
 2421              		@ args = 0, pretend = 0, frame = 0
 2422              		@ frame_needed = 0, uses_anonymous_args = 0
 2423 0ee4 04E02DE5 		str	lr, [sp, #-4]!
 2424              	.LCFI66:
 2425              		.loc 1 56 0
 2426 0ee8 0400A0E3 		mov	r0, #4
 2427 0eec FEFFFFEB 		bl	IINCHIP_READ
 2428              		.loc 1 57 0
 2429 0ef0 04E09DE4 		ldr	lr, [sp], #4
 2430 0ef4 1EFF2FE1 		bx	lr
 2431              	.LFE4:
 2433              		.align	2
 2434              		.global	getIR
 2436              	getIR:
 2437              	.LFB2:
 2438              		.loc 1 46 0
 2439              		@ Function supports interworking.
 2440              		@ args = 0, pretend = 0, frame = 0
 2441              		@ frame_needed = 0, uses_anonymous_args = 0
 2442 0ef8 04E02DE5 		str	lr, [sp, #-4]!
 2443              	.LCFI67:
 2444              		.loc 1 47 0
 2445 0efc 0200A0E3 		mov	r0, #2
 2446 0f00 FEFFFFEB 		bl	IINCHIP_READ
 2447              		.loc 1 48 0
 2448 0f04 04E09DE4 		ldr	lr, [sp], #4
 2449 0f08 1EFF2FE1 		bx	lr
 2450              	.LFE2:
 2452              		.comm	TXMEM_SIZE,32,4
 2453              		.comm	RXMEM_SIZE,32,4
 3545              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 w5300.c
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:13     .text:00000000 getIINCHIP_TxMAX
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:23     .text:00000000 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:36     .text:00000010 $d
                            *COM*:00000020 TXMEM_SIZE
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:42     .text:00000014 getIINCHIP_RxMAX
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:51     .text:00000014 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:64     .text:00000024 $d
                            *COM*:00000020 RXMEM_SIZE
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:70     .text:00000028 wait_1us
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:80     .text:00000028 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:86     .text:0000002c wait_1ms
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:121    .text:00000058 wait_10ms
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:167    .text:00000084 sysinit
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:360    .text:00000258 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:370    .text:0000026c setSn_FRAGR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:377    .text:0000026c $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:398    .text:0000028c setSn_TTLR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:427    .text:000002b0 setSn_TOSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:455    .text:000002d0 setSn_TX_FIFOR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:488    .text:000002f8 setSn_TX_WRSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:524    .text:00000330 setSn_MSSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:554    .text:00000354 setSn_DIPR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:596    .text:000003a8 setSn_DPORTR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:629    .text:000003d0 setSn_DHAR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:679    .text:00000440 setSn_IR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:708    .text:00000464 setSn_IMR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:736    .text:00000484 setSn_MR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:766    .text:000004a8 setPn_BDPTHR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:796    .text:000004cc setPn_BRDYR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:824    .text:000004ec setPMAGICR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:847    .text:00000504 setPTIMER
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:870    .text:0000051c setRCR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:893    .text:00000534 setRTR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:917    .text:00000550 setSIPR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:954    .text:00000598 setSUBR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:991    .text:000005e0 setGAR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1028   .text:00000628 setSHAR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1073   .text:0000068c setIMR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1097   .text:000006a8 setIR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1121   .text:000006c4 getSn_FRAGR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1147   .text:000006e4 getSn_TTLR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1174   .text:00000708 getSn_TOSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1200   .text:00000728 setSn_PROTOR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1237   .text:00000768 getSn_PROTOR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1264   .text:0000078c getSn_RX_FIFOR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1289   .text:000007a8 getSn_RX_RSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1333   .text:000007f0 getSn_TX_FSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1377   .text:00000838 getSn_TX_WRSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1407   .text:00000868 setSn_KPALVTR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1444   .text:000008a8 getSn_KPALVTR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1472   .text:000008d0 getSn_MSSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1497   .text:000008ec getSn_DIPR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1544   .text:00000944 getSn_DPORTR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1570   .text:00000964 getSn_DHAR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1629   .text:000009dc getSn_SSR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1696   .text:00000a68 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1703   .text:00000a70 getSn_IR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1710   .text:00000a70 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1730   .text:00000a94 getSn_IMR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1768   .text:00000ab4 setSn_CR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1882   .text:00000ba4 $d
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1894   .text:00000bc0 getSn_CR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1901   .text:00000bc0 $a
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1921   .text:00000be4 getSn_MR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1946   .text:00000c00 getIDR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1965   .text:00000c14 getPn_BDPTHR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:1990   .text:00000c30 getPn_BRDYR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2016   .text:00000c50 getFMTUR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2035   .text:00000c64 getUPORTR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2054   .text:00000c78 getUIPR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2092   .text:00000cc0 getPDHAR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2139   .text:00000d24 getPSIDR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2158   .text:00000d38 getPMAGICR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2178   .text:00000d50 getPTIMER
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2198   .text:00000d68 getPATR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2217   .text:00000d7c getRCR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2237   .text:00000d94 getRTR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2256   .text:00000da8 getSIPR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2294   .text:00000df0 getSUBR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2332   .text:00000e38 getGAR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2370   .text:00000e80 getSHAR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2417   .text:00000ee4 getIMR
/cygdrive/c/DOCUME~1/AMITVA~1/LOCALS~1/Temp/ccaIgVvf.s:2436   .text:00000ef8 getIR

UNDEFINED SYMBOLS
printf
IINCHIP_WRITE
IINCHIP_READ
socState
ssrErr
sCRcnt
W53ErFlg
CRdyMax
