
HttpServ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 startup       00000164  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 prog          00006358  00000164  00000164  00008164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .intvects     00000040  40000000  000064bc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .protected    00000078  40000040  40000040  00010260  2**2
                  CONTENTS, READONLY
  4 .data         000001a8  400000b8  000064fc  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001b10  40000260  40000260  00010260  2**2
                  ALLOC
  6 .debug_line   0000169f  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000478b  00000000  00000000  00011977  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015c5  00000000  00000000  00016102  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000310  00000000  00000000  000176c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001440  00000000  00000000  000179d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c42  00000000  00000000  00018e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00000f03  00000000  00000000  0001ca5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  0001d95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001308  00000000  00000000  0001da55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000156  00000000  00000000  0001ed5d  2**0
                  CONTENTS, READONLY
Disassembly of section startup:

00000000 <__start_of_startup__>:
        .section .startup,"ax"
        .code 32
        .align 0

        ldr     pc, _start              @ reset - _start               
   0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <FIQ_STACK_SIZE>
        ldr     pc, _undf               @ undefined - _undf            
   4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <_undf>
        ldr     pc, _swi                @ SWI - _swi                   
   8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <_swi>
        ldr     pc, _pabt               @ program abort - _pabt        
   c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <_pabt>
        ldr     pc, _dabt               @ data abort - _dabt           
  10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <_dabt>
        ldr     pc, _start              @ reserved - reset
  14:	e59ff004 	ldr	pc, [pc, #4]	; 20 <FIQ_STACK_SIZE>
        ldr     pc, [pc, #-0xff0]       @ IRQ - read VIC_VectAddr (magic!  It's at 0xfffff030)
  18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <SCB_RSIR+0x1fe02eb0>
        ldr     pc, _fiq                @ FIQ - _fiq                   
  1c:	e59ff010 	ldr	pc, [pc, #16]	; 34 <_fiq>

00000020 <_start>:
  20:	00000164 	andeq	r0, r0, r4, ror #2

00000024 <_undf>:
  24:	00000038 	andeq	r0, r0, r8, lsr r0

00000028 <_swi>:
  28:	00000804 	andeq	r0, r0, r4, lsl #16

0000002c <_pabt>:
  2c:	0000004c 	andeq	r0, r0, ip, asr #32

00000030 <_dabt>:
  30:	00000060 	andeq	r0, r0, r0, rrx

00000034 <_fiq>:
  34:	00000800 	andeq	r0, r0, r0, lsl #16

00000038 <__undf>:

_start: .word   __start                 @ reset
_undf:  .word   __undf                  @ undefined                    
_swi:   .word   SWI_Routine             @ SWI
_pabt:  .word   __pabt                  @ program abort                
_dabt:  .word   __dabt                  @ data abort                   
_fiq:   .word   FIQ_Routine             @ FIQ                          

@
@  Handlers for undef, program abort and data abort.  They all update
@  their respective registers, then reset the system by timing out
@  the watchdog (only apparent way to force a hardware reset)
@
__undf: 
        ldr     sp, =(__abort_mem+5*4)  @ Set sp_abt to data array with offset (restore later)
  38:	e59fd100 	ldr	sp, [pc, #256]	; 140 <startup+0x140>
        stmia   sp, {r0-r12}            @ Save first dataset in r0-r12 to array
  3c:	e88d1fff 	stmia	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
        sub     r0, lr, #4              @ Calculate PC value of undef instruction
  40:	e24e0004 	sub	r0, lr, #4	; 0x4
        mov     r1, #0                  @ Abort type
  44:	e3a01000 	mov	r1, #0	; 0x0
        b       .abtstore               @ Save info, reset system
  48:	ea000009 	b	74 <.abtstore>

0000004c <__pabt>:

__pabt: 
        ldr     sp, =(__abort_mem+5*4)  @ Set sp_abt to data array with offset (restore later)
  4c:	e59fd0ec 	ldr	sp, [pc, #236]	; 140 <startup+0x140>
        stmia   sp, {r0-r12}            @ Save first dataset in r0-r12 to array
  50:	e88d1fff 	stmia	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
        sub     r0, lr, #4              @ Calculate PC value of undef instruction
  54:	e24e0004 	sub	r0, lr, #4	; 0x4
        mov     r1, #1                  @ Abort type
  58:	e3a01001 	mov	r1, #1	; 0x1
        b       .abtstore               @ Save info, reset system
  5c:	ea000004 	b	74 <.abtstore>

00000060 <__dabt>:

__dabt: 
        ldr     sp, =(__abort_mem+5*4)  @ Set sp_abt to data array with offset (restore later)
  60:	e59fd0d8 	ldr	sp, [pc, #216]	; 140 <startup+0x140>
        stmia   sp, {r0-r12}            @ Save first dataset in r0-r12 to array
  64:	e88d1fff 	stmia	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
        sub     r0, lr, #8              @ Calculate PC value of undef instruction
  68:	e24e0008 	sub	r0, lr, #8	; 0x8
        mov     r1, #2                  @ Abort type
  6c:	e3a01002 	mov	r1, #2	; 0x2
        b       .abtstore               @ Save info, reset system
  70:	eaffffff 	b	74 <.abtstore>

00000074 <.abtstore>:

@
@  Store the abort type.  Then see if the sigil value is set, and if not,
@  reset the abort counter to 0.
@
.abtstore:
        ldr     r2, =__abort_typ        @ Abort type
  74:	e59f20c8 	ldr	r2, [pc, #200]	; 144 <startup+0x144>
        str     r1, [r2]                @ Store it
  78:	e5821000 	str	r1, [r2]

        ldr     r2, =__abort_sig        @ Get the sigil address
  7c:	e59f20c4 	ldr	r2, [pc, #196]	; 148 <startup+0x148>
        ldr     r4, =ABORT_SIGIL        @ Load sigil value
  80:	e59f40c4 	ldr	r4, [pc, #196]	; 14c <startup+0x14c>
        ldr     r3, [r2]                @ Get sigil contents
  84:	e5923000 	ldr	r3, [r2]
        cmp     r3, r4                  @ Sigil set?
  88:	e1530004 	cmp	r3, r4

        strne   r4, [r2]                @ No, store sigil value
  8c:	15824000 	strne	r4, [r2]
        ldrne   r2, =__abort_cnt        @ No, load address of abort counter
  90:	159f20b8 	ldrne	r2, [pc, #184]	; 150 <startup+0x150>
        movne   r4, #0                  @ No, Zero for store
  94:	13a04000 	movne	r4, #0	; 0x0
        strne   r4, [r2]                @ No, Clear counter
  98:	15824000 	strne	r4, [r2]

@
@  Now build up structure of registers and stack (r0 = abort address, r1 = 
@  abort type).  This code is based heavily on the work of Roger Lynx, from 
@  http://www.embedded.com/shared/printableArticle.jhtml?articleID=192202641
@
        mrs     r5, cpsr                @ Save current mode to R5 for mode switching
  9c:	e10f5000 	mrs	r5, CPSR
        mrs     r6, spsr                @ spsr_abt = CPSR of dabt originating mode, save to r6 for mode switching
  a0:	e14f6000 	mrs	r6, SPSR
        mov     r2, r6                  @ Building second dataset: r2 = CPSR of exception
  a4:	e1a02006 	mov	r2, r6
        tst     r6, #0x0f               @ Test mode of the raised exception
  a8:	e316000f 	tst	r6, #15	; 0xf
        orreq   r6, r6, #0x0f           @ If 0, elevate from user mode to system mode
  ac:	0386600f 	orreq	r6, r6, #15	; 0xf
        msr     cpsr_c, r6              @ Switch out from mode 0x17 (abort) to ...
  b0:	e121f006 	msr	CPSR_c, r6
        mov     r3, lr                  @ ... dabt generating mode and state
  b4:	e1a0300e 	mov	r3, lr
        mov     r4, sp                  @ ... Get lr (=r3) and sp (=r4)
  b8:	e1a0400d 	mov	r4, sp
        msr     cpsr_c, r5              @ Switch back to mode 0x17 (abort)
  bc:	e121f005 	msr	CPSR_c, r5
        cmp     r1, #1                  @ Test for prefetch abort
  c0:	e3510001 	cmp	r1, #1	; 0x1
        moveq   r1, #0                  @ Can't fetch instruction at the abort address
  c4:	03a01000 	moveq	r1, #0	; 0x0
        ldrne   r1, [r0]                @ r1 = [pc] (dabt)
  c8:	15901000 	ldrne	r1, [r0]
        ldr     sp, =__abort_mem        @ Reset sp to arrays starting address
  cc:	e59fd080 	ldr	sp, [pc, #128]	; 154 <startup+0x154>
        stmia   sp, {r0-r4}             @ Save second dataset from r0 to r4
  d0:	e88d001f 	stmia	sp, {r0, r1, r2, r3, r4}

        ldr     r1, =__abort_stk        @ Space where we'll store abort stack
  d4:	e59f107c 	ldr	r1, [pc, #124]	; 158 <startup+0x158>
        mov     r2,#8                   @ Copy 8 stack entries
  d8:	e3a02008 	mov	r2, #8	; 0x8

000000dc <.abtcopy>:
.abtcopy:
        ldr     r0, [r4], #4            @ Get byte from source, r4 += 4
  dc:	e4940004 	ldr	r0, [r4], #4
        str     r0, [r1], #4            @ Store byte to destination, r1 += 4
  e0:	e4810004 	str	r0, [r1], #4
        subs    r2, r2, #1              @ Decrement loop counter
  e4:	e2522001 	subs	r2, r2, #1	; 0x1
        bgt     .abtcopy                @ >= 0, go again
  e8:	cafffffb 	bgt	dc <.abtcopy>

        b       .sysreset               @ And reset
  ec:	eaffffff 	b	f0 <.sysreset>

000000f0 <.sysreset>:

@
@  Force a system reset with ye olde watch dogge
@
        .set    SCB_RSIR_MASK, 0x0000000f
        .set    SCB_RSIR,      0xe01fc180
        .set    WD_MOD,        0xe0000000
        .set    WD_TC,         0xe0000004
        .set    WD_FEED,       0xe0000008
        .set    WD_MOD_WDEN,   0x00000001
        .set    WD_MOD_RESET,  0x00000002
        .set    WD_MOD_TOF,    0x00000004
        .set    WD_MOD_INT,    0x00000008
        .set    WD_MOD_MASK,   0x0000000f
        .set    WD_FEED_FEED1, 0x000000aa
        .set    WD_FEED_FEED2, 0x00000055
        .set    ABORT_SIGIL,   0xdeadc0de

.sysreset:
        ldr     r1, =__abort_cnt        @ Get the abort counter address
  f0:	e59f1058 	ldr	r1, [pc, #88]	; 150 <startup+0x150>
        ldr     r0, [r1]                @ Load it
  f4:	e5910000 	ldr	r0, [r1]
        add     r0, r0, #1              @ Add 1
  f8:	e2800001 	add	r0, r0, #1	; 0x1
        str     r0, [r1]                @ Store it back
  fc:	e5810000 	str	r0, [r1]

@
@  Now enable the watch dog, and go into a loop waiting for a timeout
@
        ldr     r0, =SCB_RSIR_MASK
 100:	e3a0000f 	mov	r0, #15	; 0xf
        ldr     r1, =SCB_RSIR
 104:	e59f1050 	ldr	r1, [pc, #80]	; 15c <startup+0x15c>
        str     r0, [r1]
 108:	e5810000 	str	r0, [r1]
        ldr     r0, =WD_MOD_WDEN | WD_MOD_RESET
 10c:	e3a00003 	mov	r0, #3	; 0x3
        ldr     r1, =WD_MOD
 110:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
        str     r0, [r1]
 114:	e5810000 	str	r0, [r1]
        ldr     r0, =120000
 118:	e59f0040 	ldr	r0, [pc, #64]	; 160 <startup+0x160>
        ldr     r1, =WD_TC
 11c:	e3a0124e 	mov	r1, #-536870908	; 0xe0000004
        str     r0, [r1]
 120:	e5810000 	str	r0, [r1]
        ldr     r0, =WD_FEED_FEED1
 124:	e3a000aa 	mov	r0, #170	; 0xaa
        ldr     r1, =WD_FEED
 128:	e3a0128e 	mov	r1, #-536870904	; 0xe0000008
        str     r0, [r1]
 12c:	e5810000 	str	r0, [r1]
        ldr     r0, =WD_FEED_FEED2
 130:	e3a00055 	mov	r0, #85	; 0x55
        ldr     r1, =WD_FEED
 134:	e3a0128e 	mov	r1, #-536870904	; 0xe0000008
        str     r0, [r1]
 138:	e5810000 	str	r0, [r1]
        b       .
 13c:	eafffffe 	b	13c <IRQ_STACK_SIZE+0x3c>
 140:	40000064 	andmi	r0, r0, r4, rrx
 144:	4000004c 	andmi	r0, r0, ip, asr #32
 148:	40000044 	andmi	r0, r0, r4, asr #32
 14c:	deadc0de 	mcrle	0, 5, ip, cr13, cr14, {6}
 150:	40000048 	andmi	r0, r0, r8, asr #32
 154:	40000050 	andmi	r0, r0, r0, asr r0
 158:	40000098 	mulmi	r0, r8, r0
 15c:	e01fc180 	ands	ip, pc, r0, lsl #3
 160:	0001d4c0 	andeq	sp, r1, r0, asr #9
Disassembly of section prog:

00000164 <__start_of_prog__>:
     164:	e59f1110 	ldr	r1, [pc, #272]	; 27c <prog+0x118>
     168:	e59f3110 	ldr	r3, [pc, #272]	; 280 <prog+0x11c>
     16c:	e0433001 	sub	r3, r3, r1
     170:	e59f210c 	ldr	r2, [pc, #268]	; 284 <prog+0x120>

00000174 <.init_loop>:
     174:	e4812004 	str	r2, [r1], #4
     178:	e2533004 	subs	r3, r3, #4	; 0x4
     17c:	cafffffc 	bgt	174 <.init_loop>

00000180 <.end_init_loop>:
     180:	e59f1100 	ldr	r1, [pc, #256]	; 288 <prog+0x124>
     184:	e59f3100 	ldr	r3, [pc, #256]	; 28c <prog+0x128>
     188:	e0533001 	subs	r3, r3, r1
     18c:	0a000003 	beq	1a0 <.end_clear_loop>
     190:	e3a02000 	mov	r2, #0	; 0x0

00000194 <.clear_loop>:
     194:	e4c12001 	strb	r2, [r1], #1
     198:	e2533001 	subs	r3, r3, #1	; 0x1
     19c:	cafffffc 	bgt	194 <.clear_loop>

000001a0 <.end_clear_loop>:
     1a0:	e59f10d4 	ldr	r1, [pc, #212]	; 27c <prog+0x118>
     1a4:	e59f20e4 	ldr	r2, [pc, #228]	; 290 <prog+0x12c>
     1a8:	e59f30e4 	ldr	r3, [pc, #228]	; 294 <prog+0x130>
     1ac:	e0533001 	subs	r3, r3, r1
     1b0:	0a000003 	beq	1c4 <.end_set_loop>

000001b4 <.set_loop>:
     1b4:	e4d24001 	ldrb	r4, [r2], #1
     1b8:	e4c14001 	strb	r4, [r1], #1
     1bc:	e2533001 	subs	r3, r3, #1	; 0x1
     1c0:	cafffffb 	bgt	1b4 <.set_loop>

000001c4 <.end_set_loop>:
     1c4:	e59f10cc 	ldr	r1, [pc, #204]	; 298 <prog+0x134>
     1c8:	e59f20cc 	ldr	r2, [pc, #204]	; 29c <prog+0x138>
     1cc:	e59f30cc 	ldr	r3, [pc, #204]	; 2a0 <prog+0x13c>
     1d0:	e0533001 	subs	r3, r3, r1
     1d4:	0a000003 	beq	1e8 <.end_ints_loop>

000001d8 <.ints_loop>:
     1d8:	e4d24001 	ldrb	r4, [r2], #1
     1dc:	e4c14001 	strb	r4, [r1], #1
     1e0:	e2533001 	subs	r3, r3, #1	; 0x1
     1e4:	cafffffb 	bgt	1d8 <.ints_loop>

000001e8 <.end_ints_loop>:
     1e8:	e59f10b4 	ldr	r1, [pc, #180]	; 2a4 <prog+0x140>
     1ec:	e59f008c 	ldr	r0, [pc, #140]	; 280 <prog+0x11c>
     1f0:	e321f0db 	msr	CPSR_c, #219	; 0xdb
     1f4:	e1a0d000 	mov	sp, r0
     1f8:	e5810000 	str	r0, [r1]
     1fc:	e2400004 	sub	r0, r0, #4	; 0x4
     200:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
     204:	e1a0d000 	mov	sp, r0
     208:	e5810004 	str	r0, [r1, #4]
     20c:	e5810008 	str	r0, [r1, #8]
     210:	e2400004 	sub	r0, r0, #4	; 0x4
     214:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
     218:	e1a0d000 	mov	sp, r0
     21c:	e581000c 	str	r0, [r1, #12]
     220:	e5810010 	str	r0, [r1, #16]
     224:	e2400020 	sub	r0, r0, #32	; 0x20
     228:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
     22c:	e1a0d000 	mov	sp, r0
     230:	e5810014 	str	r0, [r1, #20]
     234:	e5810018 	str	r0, [r1, #24]
     238:	e2400c01 	sub	r0, r0, #256	; 0x100
     23c:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
     240:	e1a0d000 	mov	sp, r0
     244:	e581001c 	str	r0, [r1, #28]
     248:	e5810020 	str	r0, [r1, #32]
     24c:	e2402c01 	sub	r2, r0, #256	; 0x100
     250:	e5812030 	str	r2, [r1, #48]
     254:	e2400c01 	sub	r0, r0, #256	; 0x100
     258:	e321f0df 	msr	CPSR_c, #223	; 0xdf
     25c:	e1a0d000 	mov	sp, r0
     260:	e5810024 	str	r0, [r1, #36]
     264:	e5810028 	str	r0, [r1, #40]
     268:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
     26c:	e3a00000 	mov	r0, #0	; 0x0
     270:	e3a01000 	mov	r1, #0	; 0x0
     274:	eb00012f 	bl	738 <main>
     278:	eafffffe 	b	278 <.end_ints_loop+0x90>
     27c:	400000b8 	strmih	r0, [r0], -r8
     280:	40007fdc 	ldrmid	r7, [r0], -ip
     284:	e5e5e5e5 	strb	lr, [r5, #1509]!
     288:	40000260 	andmi	r0, r0, r0, ror #4
     28c:	40001d70 	andmi	r1, r0, r0, ror sp
     290:	000064fc 	streqd	r6, [r0], -ip
     294:	40000260 	andmi	r0, r0, r0, ror #4
     298:	40000000 	andmi	r0, r0, r0
     29c:	000064bc 	streqh	r6, [r0], -ip
     2a0:	40000040 	andmi	r0, r0, r0, asr #32
     2a4:	400000b8 	strmih	r0, [r0], -r8

000002a8 <P0Init>:

void P0Init(void)
{
  // Initialize Port0 P0.0-P0.23, P0.25, P0.28-P0.31
  PINSEL0 = (PINSEL0 & ~0x0000000F) | 0x00000005;	/* Enable RxD0 and TxD0              */
     2a8:	e59f2044 	ldr	r2, [pc, #68]	; 2f4 <prog+0x190>
     2ac:	e5923000 	ldr	r3, [r2]
     2b0:	e3c3300f 	bic	r3, r3, #15	; 0xf
     2b4:	e3833005 	orr	r3, r3, #5	; 0x5
     2b8:	e5823000 	str	r3, [r2]

  PINSEL0   &= 0x0010FFFF;		// P0.7 .. P0.0 GPIOs
     2bc:	e5923000 	ldr	r3, [r2]
     2c0:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
     2c4:	e3c338ef 	bic	r3, r3, #15663104	; 0xef0000
     2c8:	e5823000 	str	r3, [r2]
  FIO0DIR   |= 0x0FF03FFF;		// P0.7 .. P0.0 & P0.12..P0.13 Output
     2cc:	e59f1024 	ldr	r1, [pc, #36]	; 2f8 <prog+0x194>
     2d0:	e59f3024 	ldr	r3, [pc, #36]	; 2fc <prog+0x198>
     2d4:	e5112fff 	ldr	r2, [r1, #-4095]
     2d8:	e1823003 	orr	r3, r2, r3
     2dc:	e5013fff 	str	r3, [r1, #-4095]
  FIO0SET    = 0x0FF13FF1;		// "1" on P0.0 P0.4-P0. & P0.12-P0.13
     2e0:	e59f3018 	ldr	r3, [pc, #24]	; 300 <prog+0x19c>
     2e4:	e5013fe7 	str	r3, [r1, #-4071]
  
  FIO0CLR = 0x00000100;    			//P0.8 Low
     2e8:	e3a03c01 	mov	r3, #256	; 0x100
     2ec:	e5013fe3 	str	r3, [r1, #-4067]
}    
     2f0:	e12fff1e 	bx	lr
     2f4:	e002c000 	and	ip, r2, r0
     2f8:	3fffcfff 	svccc	0x00ffcfff
     2fc:	0ff03fff 	svceq	0x00f03fff
     300:	0ff13ff1 	svceq	0x00f13ff1

00000304 <SpuriousInt>:


void SpuriousInt(void) __attribute__((naked));
void SpuriousInt(void)
{
	//uint32 v;
	
	ISR_ENTRY();
     304:	e24ee004 	sub	lr, lr, #4	; 0x4
     308:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     30c:	e14f1000 	mrs	r1, SPSR
     310:	e92d0002 	stmdb	sp!, {r1}
	
	//v = VICIRQStatus;

	SpurIntCnt++;
     314:	e59f2020 	ldr	r2, [pc, #32]	; 33c <prog+0x1d8>
     318:	e5923000 	ldr	r3, [r2]
     31c:	e2833001 	add	r3, r3, #1	; 0x1
     320:	e5823000 	str	r3, [r2]
	
	VICVectAddr = 0x00000000;             // clear this interrupt from the VIC
     324:	e3a02000 	mov	r2, #0	; 0x0
     328:	e3e03c0f 	mvn	r3, #3840	; 0xf00
     32c:	e50320cf 	str	r2, [r3, #-207]
	
	ISR_EXIT();                           // recover registers and return
     330:	e8bd0002 	ldmia	sp!, {r1}
     334:	e161f001 	msr	SPSR_c, r1
     338:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
     33c:	40000310 	andmi	r0, r0, r0, lsl r3

00000340 <SpurInit>:
}


void SpurInit(void)
{
  SpurIntCnt = 0;
     340:	e59f3014 	ldr	r3, [pc, #20]	; 35c <prog+0x1f8>
     344:	e3a02000 	mov	r2, #0	; 0x0
     348:	e5832000 	str	r2, [r3]
  
	VICDefVectAddr = (unsigned int)SpuriousInt;
     34c:	e59f200c 	ldr	r2, [pc, #12]	; 360 <prog+0x1fc>
     350:	e3e03c0f 	mvn	r3, #3840	; 0xf00
     354:	e50320cb 	str	r2, [r3, #-203]
}
     358:	e12fff1e 	bx	lr
     35c:	40000310 	andmi	r0, r0, r0, lsl r3
     360:	00000304 	andeq	r0, r0, r4, lsl #6

00000364 <ToggleP0_7>:


void ToggleP0_7(void)
{
	if ( FIO0PIN & 0x00000080 ) 
     364:	e59f2018 	ldr	r2, [pc, #24]	; 384 <prog+0x220>
     368:	e5123feb 	ldr	r3, [r2, #-4075]
     36c:	e3130080 	tst	r3, #128	; 0x80
		FIO0CLR = 0x00000080;    			//P0.7 OFF 
     370:	13a03080 	movne	r3, #128	; 0x80
	else 	FIO0SET = 0x00000080;			//P0.7 ON
     374:	03a03080 	moveq	r3, #128	; 0x80
     378:	15023fe3 	strne	r3, [r2, #-4067]
     37c:	05023fe7 	streq	r3, [r2, #-4071]
     380:	e12fff1e 	bx	lr
     384:	3fffcfff 	svccc	0x00ffcfff

00000388 <PrepVars>:
}

void ToggleP0_5(void)
{
	delay(2000);
	if ( FIO0PIN & 0x00000020 ) 
		FIO0CLR = 0x00000020;    			//P0.5 OFF 
	else 	FIO0SET = 0x00000020;			//P0.5 ON
}

void WizCheck0(void)
{ 
	uint16 v1, v2, v3, v4, v5;
	
	v1 = getMR();							// expected value is 0x3800
  v2 = IINCHIP_READ(RTR);			// expected value is 0x07D0
  v3 = IINCHIP_READ(RCR);			// expected value is 0x..08
  v4 = IINCHIP_READ(IDR);

  v5 = IINCHIP_READ(testR);
  
  printf("MR=%04x RTR=%04x RCR=%02x IDR=%04x M_%x=%04x",
       v1, v2, (v3&0xff), v4, testR, v5);

	if ( (v1==1)&&(v2==0x7d0)&&((v3&0xff)==8)&&(v4==0x5300)&&(v5==0x1234) ) 
		printf("  ** OK **\n\r");
	else
		printf("  ** ???? **\n\r");
       
}  

void ShowIPs(void)
{ 
	uint8	tBuf[10];
	
  Rd5300_bl(SIPR0, &tBuf[0], 4);
  printf("IP:   %d.%d.%d.%d\n\r",tBuf[0],tBuf[1],tBuf[2],tBuf[3]);
  Rd5300_bl(GAR0, &tBuf[0], 4);
  printf("GAR:  %d.%d.%d.%d\n\r",tBuf[0],tBuf[1],tBuf[2],tBuf[3]);
  Rd5300_bl(SUBR0, &tBuf[0], 4);												 // get subnet mask address   
  printf("SUBR: %d.%d.%d.%d\n\r",tBuf[0],tBuf[1],tBuf[2],tBuf[3]);
  Rd5300_bl(SHAR0, &tBuf[0], 6);
  printf("SHAR: %02x:%02x:%02x:%02x:%02x:%02x\n\r",tBuf[0],tBuf[1],tBuf[2],tBuf[3],tBuf[4],tBuf[5]);
  printf("HttpPort: %d", httpPort);
}

uint8 ip_0[4] = {192,168,0,41};                  	// for setting SIP register
uint8 gw[4] = {192,168,0,1};                     	// for setting GAR register 
uint8 sn[4] = {255,255,255,0};                    // for setting SUBR register
uint8 zero_1[20];
uint8 mac_1[6] = {0x00,0x08,0xDC,0x00,111,200};   // WizNet Mac Address
uint8 mac_0[6] = {0x06,0x44,0x53,1,1,2};    			// Locally Administered Mac Addr + SN_112
uint8 zero_2[20];

uint8 tx_mem_conf[8] = { 8, 8, 8, 8, 8, 8, 8, 8};  				// for setting TMSR, all socket TxBufs-14k 
uint8 rx_mem_conf[8] = { 8, 8, 8, 8, 8, 8, 8, 8};         // for setting RMSR, all socket RxBufs-2k  

	// Initialize W5300 for Ethernet Operations
void	WizNetInit(void)
{

  /* initiate W5300 */
  iinchip_init();			// MR_RES & MR_IND
  W5300Init2();				// Init interrupts for 5300
  
  // configure internal W5300 TX/RX Memory Buffers
  
  if( sysinit(tx_mem_conf, rx_mem_conf)==0 ) {
    printf("MEMORY CONFIG ERR.\r\n\r");
    while(1);
  }
  
  IINCHIP_WRITE(testR, 0x1234);
  
  SetMAC();
 
}

void	SetMAC(void)
{
	uint8 tb[0x32];

  eepromRead(0, tb, 0x30);
  
  if ( (tb[0] == 0xff) && (tb[1] == 0xff)	&& (tb[2] == 0xff) ) {
	  setSIPR(ip_0);              // set source IP address
  	setGAR(gw);                	// set gateway IP address
  	setSUBR(sn);               	// set subnet mask address
  	setSHAR(mac_0); 						// set source hardware address
  	httpPort = HTTP_PORT;

  } else	{
  	LoadEE_MAC();
	}
}
  	

void	LoadEE_MAC(void)
{
	uint8 tc[36];
	
	eepromRead(0, tc, 0x22);
	delay(100000);
	
	setSHAR(&tc[0x00]); 					// set source hardware address MAC
	setSIPR(&tc[0x08]);          	// set source IP address
 	setGAR(&tc[0x10]);            // set gateway IP address
 	setSUBR(&tc[0x18]);           // set subnet mask address
	
	httpPort = tc[0x20] + 256*tc[0x21];
}	

void	PrepVars(void)
{
	
	W53ErFlg = 0;
	sCRcnt = 0;
     388:	e59f2010 	ldr	r2, [pc, #16]	; 3a0 <prog+0x23c>
     38c:	e3a03000 	mov	r3, #0	; 0x0
     390:	e5823000 	str	r3, [r2]
     394:	e59f2008 	ldr	r2, [pc, #8]	; 3a4 <prog+0x240>
     398:	e5823000 	str	r3, [r2]
	
}
     39c:	e12fff1e 	bx	lr
     3a0:	400002cc 	andmi	r0, r0, ip, asr #5
     3a4:	400002f0 	strmid	r0, [r0], -r0

000003a8 <UpdateVoltage>:

// Pseudo Voltmeter
void	UpdateVoltage(void)
{
     3a8:	e92d4010 	stmdb	sp!, {r4, lr}
	int v;
	char tb[10];
	
	VoltVal += 27;
     3ac:	e59f3048 	ldr	r3, [pc, #72]	; 3fc <prog+0x298>
     3b0:	e5932000 	ldr	r2, [r3]
     3b4:	e282201b 	add	r2, r2, #27	; 0x1b
     3b8:	e24dd00c 	sub	sp, sp, #12	; 0xc
     3bc:	e5832000 	str	r2, [r3]
	v = 200+(VoltVal%120); // miliVolts in range 200-319
	
	itoa(v, tb, 10);
     3c0:	e1a00002 	mov	r0, r2
     3c4:	e3a01078 	mov	r1, #120	; 0x78
     3c8:	eb00159b 	bl	5a3c <__umodsi3>
     3cc:	e28d4002 	add	r4, sp, #2	; 0x2
     3d0:	e1a01004 	mov	r1, r4
     3d4:	e3a0200a 	mov	r2, #10	; 0xa
     3d8:	e28000c8 	add	r0, r0, #200	; 0xc8
     3dc:	eb0006c3 	bl	1ef0 <itoa>
	memcpy ( (char*)&voltBuf[2], &tb[3], 3);
     3e0:	e2841003 	add	r1, r4, #3	; 0x3
     3e4:	e3a02003 	mov	r2, #3	; 0x3
     3e8:	e59f0010 	ldr	r0, [pc, #16]	; 400 <prog+0x29c>
     3ec:	eb00148b 	bl	5620 <memcpy>
}
     3f0:	e28dd00c 	add	sp, sp, #12	; 0xc
     3f4:	e8bd4010 	ldmia	sp!, {r4, lr}
     3f8:	e12fff1e 	bx	lr
     3fc:	400002f8 	strmid	r0, [r0], -r8
     400:	400001fe 	strmid	r0, [r0], -lr

00000404 <ToggleP0_5>:
     404:	e52de004 	str	lr, [sp, #-4]!
     408:	e3a00e7d 	mov	r0, #2000	; 0x7d0
     40c:	eb0006b1 	bl	1ed8 <delay>
     410:	e59f201c 	ldr	r2, [pc, #28]	; 434 <prog+0x2d0>
     414:	e5123feb 	ldr	r3, [r2, #-4075]
     418:	e3130020 	tst	r3, #32	; 0x20
     41c:	13a03020 	movne	r3, #32	; 0x20
     420:	03a03020 	moveq	r3, #32	; 0x20
     424:	15023fe3 	strne	r3, [r2, #-4067]
     428:	05023fe7 	streq	r3, [r2, #-4071]
     42c:	e49de004 	ldr	lr, [sp], #4
     430:	e12fff1e 	bx	lr
     434:	3fffcfff 	svccc	0x00ffcfff

00000438 <LoadEE_MAC>:
     438:	e92d4010 	stmdb	sp!, {r4, lr}
     43c:	e24dd024 	sub	sp, sp, #36	; 0x24
     440:	e3a02022 	mov	r2, #34	; 0x22
     444:	e1a0100d 	mov	r1, sp
     448:	e3a00000 	mov	r0, #0	; 0x0
     44c:	eb001305 	bl	5068 <eepromRead>
     450:	e59f0044 	ldr	r0, [pc, #68]	; 49c <prog+0x338>
     454:	eb00069f 	bl	1ed8 <delay>
     458:	e1a0000d 	mov	r0, sp
     45c:	eb000eb4 	bl	3f34 <setSHAR>
     460:	e28d0008 	add	r0, sp, #8	; 0x8
     464:	eb000e7c 	bl	3e5c <setSIPR>
     468:	e28d0010 	add	r0, sp, #16	; 0x10
     46c:	eb000e9e 	bl	3eec <setGAR>
     470:	e28d0018 	add	r0, sp, #24	; 0x18
     474:	eb000e8a 	bl	3ea4 <setSUBR>
     478:	e5dd2021 	ldrb	r2, [sp, #33]
     47c:	e5dd3020 	ldrb	r3, [sp, #32]
     480:	e0833402 	add	r3, r3, r2, lsl #8
     484:	e59f2014 	ldr	r2, [pc, #20]	; 4a0 <prog+0x33c>
     488:	e1a0400d 	mov	r4, sp
     48c:	e5823000 	str	r3, [r2]
     490:	e28dd024 	add	sp, sp, #36	; 0x24
     494:	e8bd4010 	ldmia	sp!, {r4, lr}
     498:	e12fff1e 	bx	lr
     49c:	000186a0 	andeq	r8, r1, r0, lsr #13
     4a0:	40001470 	andmi	r1, r0, r0, ror r4

000004a4 <SetMAC>:
     4a4:	e52de004 	str	lr, [sp, #-4]!
     4a8:	e24dd034 	sub	sp, sp, #52	; 0x34
     4ac:	e28d1002 	add	r1, sp, #2	; 0x2
     4b0:	e3a02030 	mov	r2, #48	; 0x30
     4b4:	e3a00000 	mov	r0, #0	; 0x0
     4b8:	eb0012ea 	bl	5068 <eepromRead>
     4bc:	e5dd3002 	ldrb	r3, [sp, #2]
     4c0:	e35300ff 	cmp	r3, #255	; 0xff
     4c4:	1a000011 	bne	510 <SetMAC+0x6c>
     4c8:	e5dd3003 	ldrb	r3, [sp, #3]
     4cc:	e35300ff 	cmp	r3, #255	; 0xff
     4d0:	1a00000e 	bne	510 <SetMAC+0x6c>
     4d4:	e5dd3004 	ldrb	r3, [sp, #4]
     4d8:	e35300ff 	cmp	r3, #255	; 0xff
     4dc:	e59f003c 	ldr	r0, [pc, #60]	; 520 <prog+0x3bc>
     4e0:	1a00000a 	bne	510 <SetMAC+0x6c>
     4e4:	eb000e5c 	bl	3e5c <setSIPR>
     4e8:	e59f0034 	ldr	r0, [pc, #52]	; 524 <prog+0x3c0>
     4ec:	eb000e7e 	bl	3eec <setGAR>
     4f0:	e59f0030 	ldr	r0, [pc, #48]	; 528 <prog+0x3c4>
     4f4:	eb000e6a 	bl	3ea4 <setSUBR>
     4f8:	e59f002c 	ldr	r0, [pc, #44]	; 52c <prog+0x3c8>
     4fc:	eb000e8c 	bl	3f34 <setSHAR>
     500:	e59f3028 	ldr	r3, [pc, #40]	; 530 <prog+0x3cc>
     504:	e3a02050 	mov	r2, #80	; 0x50
     508:	e5832000 	str	r2, [r3]
     50c:	ea000000 	b	514 <SetMAC+0x70>
     510:	ebffffc8 	bl	438 <LoadEE_MAC>
     514:	e28dd034 	add	sp, sp, #52	; 0x34
     518:	e49de004 	ldr	lr, [sp], #4
     51c:	e12fff1e 	bx	lr
     520:	400000fe 	strmid	r0, [r0], -lr
     524:	40000102 	andmi	r0, r0, r2, lsl #2
     528:	40000106 	andmi	r0, r0, r6, lsl #2
     52c:	40000110 	andmi	r0, r0, r0, lsl r1
     530:	40001470 	andmi	r1, r0, r0, ror r4

00000534 <WizNetInit>:
     534:	e52de004 	str	lr, [sp, #-4]!
     538:	eb0008db 	bl	28ac <iinchip_init>
     53c:	eb00089c 	bl	27b4 <W5300Init2>
     540:	e59f002c 	ldr	r0, [pc, #44]	; 574 <prog+0x410>
     544:	e59f102c 	ldr	r1, [pc, #44]	; 578 <prog+0x414>
     548:	eb000d10 	bl	3990 <sysinit>
     54c:	e3500000 	cmp	r0, #0	; 0x0
     550:	1a000002 	bne	560 <WizNetInit+0x2c>
     554:	e59f0020 	ldr	r0, [pc, #32]	; 57c <prog+0x418>
     558:	eb000651 	bl	1ea4 <printf>
     55c:	eafffffe 	b	55c <WizNetInit+0x28>
     560:	e59f0018 	ldr	r0, [pc, #24]	; 580 <prog+0x41c>
     564:	e59f1018 	ldr	r1, [pc, #24]	; 584 <prog+0x420>
     568:	eb000738 	bl	2250 <IINCHIP_WRITE>
     56c:	e49de004 	ldr	lr, [sp], #4
     570:	eaffffcb 	b	4a4 <SetMAC>
     574:	40000116 	andmi	r0, r0, r6, lsl r1
     578:	4000011e 	andmi	r0, r0, lr, lsl r1
     57c:	00005b34 	andeq	r5, r0, r4, lsr fp
     580:	0000021a 	andeq	r0, r0, sl, lsl r2
     584:	00001234 	andeq	r1, r0, r4, lsr r2

00000588 <ShowIPs>:
     588:	e92d4010 	stmdb	sp!, {r4, lr}
     58c:	e24dd018 	sub	sp, sp, #24	; 0x18
     590:	e28d400e 	add	r4, sp, #14	; 0xe
     594:	e1a01004 	mov	r1, r4
     598:	e3a02004 	mov	r2, #4	; 0x4
     59c:	e3a00018 	mov	r0, #24	; 0x18
     5a0:	eb00086c 	bl	2758 <Rd5300_bl>
     5a4:	e5ddc011 	ldrb	ip, [sp, #17]
     5a8:	e5dd3010 	ldrb	r3, [sp, #16]
     5ac:	e5dd100e 	ldrb	r1, [sp, #14]
     5b0:	e5dd200f 	ldrb	r2, [sp, #15]
     5b4:	e59f00b0 	ldr	r0, [pc, #176]	; 66c <prog+0x508>
     5b8:	e58dc000 	str	ip, [sp]
     5bc:	eb000638 	bl	1ea4 <printf>
     5c0:	e1a01004 	mov	r1, r4
     5c4:	e3a02004 	mov	r2, #4	; 0x4
     5c8:	e3a00010 	mov	r0, #16	; 0x10
     5cc:	eb000861 	bl	2758 <Rd5300_bl>
     5d0:	e5ddc011 	ldrb	ip, [sp, #17]
     5d4:	e5dd3010 	ldrb	r3, [sp, #16]
     5d8:	e5dd100e 	ldrb	r1, [sp, #14]
     5dc:	e5dd200f 	ldrb	r2, [sp, #15]
     5e0:	e59f0088 	ldr	r0, [pc, #136]	; 670 <prog+0x50c>
     5e4:	e58dc000 	str	ip, [sp]
     5e8:	eb00062d 	bl	1ea4 <printf>
     5ec:	e1a01004 	mov	r1, r4
     5f0:	e3a02004 	mov	r2, #4	; 0x4
     5f4:	e3a00014 	mov	r0, #20	; 0x14
     5f8:	eb000856 	bl	2758 <Rd5300_bl>
     5fc:	e5ddc011 	ldrb	ip, [sp, #17]
     600:	e5dd3010 	ldrb	r3, [sp, #16]
     604:	e5dd100e 	ldrb	r1, [sp, #14]
     608:	e5dd200f 	ldrb	r2, [sp, #15]
     60c:	e59f0060 	ldr	r0, [pc, #96]	; 674 <prog+0x510>
     610:	e58dc000 	str	ip, [sp]
     614:	eb000622 	bl	1ea4 <printf>
     618:	e1a01004 	mov	r1, r4
     61c:	e3a02006 	mov	r2, #6	; 0x6
     620:	e3a00008 	mov	r0, #8	; 0x8
     624:	eb00084b 	bl	2758 <Rd5300_bl>
     628:	e5ddc011 	ldrb	ip, [sp, #17]
     62c:	e5dde012 	ldrb	lr, [sp, #18]
     630:	e5dd4013 	ldrb	r4, [sp, #19]
     634:	e5dd100e 	ldrb	r1, [sp, #14]
     638:	e5dd3010 	ldrb	r3, [sp, #16]
     63c:	e5dd200f 	ldrb	r2, [sp, #15]
     640:	e59f0030 	ldr	r0, [pc, #48]	; 678 <prog+0x514>
     644:	e88d5000 	stmia	sp, {ip, lr}
     648:	e58d4008 	str	r4, [sp, #8]
     64c:	eb000614 	bl	1ea4 <printf>
     650:	e59f3024 	ldr	r3, [pc, #36]	; 67c <prog+0x518>
     654:	e59f0024 	ldr	r0, [pc, #36]	; 680 <prog+0x51c>
     658:	e5931000 	ldr	r1, [r3]
     65c:	eb000610 	bl	1ea4 <printf>
     660:	e28dd018 	add	sp, sp, #24	; 0x18
     664:	e8bd4010 	ldmia	sp!, {r4, lr}
     668:	e12fff1e 	bx	lr
     66c:	00005b4c 	andeq	r5, r0, ip, asr #22
     670:	00005b60 	andeq	r5, r0, r0, ror #22
     674:	00005b74 	andeq	r5, r0, r4, ror fp
     678:	00005b88 	andeq	r5, r0, r8, lsl #23
     67c:	40001470 	andmi	r1, r0, r0, ror r4
     680:	00005bb0 	streqh	r5, [r0], -r0

00000684 <WizCheck0>:
     684:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
     688:	e24dd00c 	sub	sp, sp, #12	; 0xc
     68c:	eb00068f 	bl	20d0 <getMR>
     690:	e1a07000 	mov	r7, r0
     694:	e3a0001c 	mov	r0, #28	; 0x1c
     698:	eb0006b3 	bl	216c <IINCHIP_READ>
     69c:	e1a06000 	mov	r6, r0
     6a0:	e3a0001e 	mov	r0, #30	; 0x1e
     6a4:	eb0006b0 	bl	216c <IINCHIP_READ>
     6a8:	e1a04000 	mov	r4, r0
     6ac:	e3a000fe 	mov	r0, #254	; 0xfe
     6b0:	eb0006ad 	bl	216c <IINCHIP_READ>
     6b4:	e59f5068 	ldr	r5, [pc, #104]	; 724 <prog+0x5c0>
     6b8:	e1a0a000 	mov	sl, r0
     6bc:	e1a00005 	mov	r0, r5
     6c0:	eb0006a9 	bl	216c <IINCHIP_READ>
     6c4:	e20480ff 	and	r8, r4, #255	; 0xff
     6c8:	e1a01007 	mov	r1, r7
     6cc:	e1a04000 	mov	r4, r0
     6d0:	e1a02006 	mov	r2, r6
     6d4:	e1a03008 	mov	r3, r8
     6d8:	e59f0048 	ldr	r0, [pc, #72]	; 728 <prog+0x5c4>
     6dc:	e58d5004 	str	r5, [sp, #4]
     6e0:	e58da000 	str	sl, [sp]
     6e4:	e58d4008 	str	r4, [sp, #8]
     6e8:	eb0005ed 	bl	1ea4 <printf>
     6ec:	e3570001 	cmp	r7, #1	; 0x1
     6f0:	03560e7d 	cmpeq	r6, #2000	; 0x7d0
     6f4:	e59f0030 	ldr	r0, [pc, #48]	; 72c <prog+0x5c8>
     6f8:	1a000005 	bne	714 <WizCheck0+0x90>
     6fc:	e3580008 	cmp	r8, #8	; 0x8
     700:	035a0c53 	cmpeq	sl, #21248	; 0x5300
     704:	1a000002 	bne	714 <WizCheck0+0x90>
     708:	e59f3020 	ldr	r3, [pc, #32]	; 730 <prog+0x5cc>
     70c:	e1540003 	cmp	r4, r3
     710:	059f001c 	ldreq	r0, [pc, #28]	; 734 <prog+0x5d0>
     714:	eb0005e2 	bl	1ea4 <printf>
     718:	e28dd00c 	add	sp, sp, #12	; 0xc
     71c:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
     720:	e12fff1e 	bx	lr
     724:	0000021a 	andeq	r0, r0, sl, lsl r2
     728:	00005bc0 	andeq	r5, r0, r0, asr #23
     72c:	00005c00 	andeq	r5, r0, r0, lsl #24
     730:	00001234 	andeq	r1, r0, r4, lsr r2
     734:	00005bf0 	streqd	r5, [r0], -r0

00000738 <main>:
     738:	e59f3094 	ldr	r3, [pc, #148]	; 7d4 <prog+0x670>
	

	int
main (void)
{
     73c:	e92d4010 	stmdb	sp!, {r4, lr}
     740:	e3a04000 	mov	r4, #0	; 0x0
     744:	e5834000 	str	r4, [r3]
     748:	e59f3088 	ldr	r3, [pc, #136]	; 7d8 <prog+0x674>
     74c:	e5834000 	str	r4, [r3]
	PrepVars();
		
	Init2148();			//LPC2148 PLL, CLK, PORTs startup init
     750:	eb00002d 	bl	80c <Init2148>
	
	P0Init();
     754:	ebfffed3 	bl	2a8 <P0Init>
	P1Init();
     758:	eb00062f 	bl	201c <P1Init>
     75c:	e59f2078 	ldr	r2, [pc, #120]	; 7dc <prog+0x678>
     760:	e3e03c0f 	mvn	r3, #3840	; 0xf00
     764:	e50320cb 	str	r2, [r3, #-203]
     768:	e59f3070 	ldr	r3, [pc, #112]	; 7e0 <prog+0x67c>
	SpurInit();
	
	// init console Baud Rate 115000kbd
	ConsoleInit(60000000 / (16 * BAUD_RATE));
     76c:	e3a00020 	mov	r0, #32	; 0x20
     770:	e5834000 	str	r4, [r3]
     774:	eb0000f2 	bl	b44 <ConsoleInit>
	printf("\n\r#####====  HTTP Server_Demo %s  ====#######\n\r", RevDate );
     778:	e59f1064 	ldr	r1, [pc, #100]	; 7e4 <prog+0x680>
     77c:	e59f0064 	ldr	r0, [pc, #100]	; 7e8 <prog+0x684>
     780:	eb0005c7 	bl	1ea4 <printf>

	timerInit();
     784:	eb0000b8 	bl	a6c <timerInit>
	LogInit();
     788:	eb000201 	bl	f94 <LogInit>
	i2cInit();
     78c:	eb00130e 	bl	53cc <i2cInit>
	
	W5300PwrOn();
     790:	eb000833 	bl	2864 <W5300PwrOn>
	WizNetInit();
     794:	ebffff66 	bl	534 <WizNetInit>
  
	enableIRQ();
     798:	eb000052 	bl	8e8 <enableIRQ>

	WizCheck0();
     79c:	ebffffb8 	bl	684 <WizCheck0>
  ShowIPs();
     7a0:	ebffff78 	bl	588 <ShowIPs>
  
  CmdDone = 1;
  Tst1Flag = 1;
     7a4:	e59f3040 	ldr	r3, [pc, #64]	; 7ec <prog+0x688>
     7a8:	e3a02001 	mov	r2, #1	; 0x1
     7ac:	e5832000 	str	r2, [r3]
  Event = 0;
  cSoc = 0;
     7b0:	e59f3038 	ldr	r3, [pc, #56]	; 7f0 <prog+0x68c>
     7b4:	e5834000 	str	r4, [r3]
     7b8:	e59f3034 	ldr	r3, [pc, #52]	; 7f4 <prog+0x690>
     7bc:	e5832000 	str	r2, [r3]
     7c0:	e59f3030 	ldr	r3, [pc, #48]	; 7f8 <prog+0x694>
     7c4:	e5834000 	str	r4, [r3]
  
	for (;;) {
		CheckCmd();
     7c8:	eb000350 	bl	1510 <CheckCmd>
		//ToggleP0_5();
		//UpdateVoltage();
		http_serv_machine();
     7cc:	eb000963 	bl	2d60 <http_serv_machine>
     7d0:	eafffffc 	b	7c8 <main+0x90>
     7d4:	400002f0 	strmid	r0, [r0], -r0
     7d8:	400002cc 	andmi	r0, r0, ip, asr #5
     7dc:	00000304 	andeq	r0, r0, r4, lsl #6
     7e0:	40000310 	andmi	r0, r0, r0, lsl r3
     7e4:	400000f4 	strmid	r0, [r0], -r4
     7e8:	00005c10 	andeq	r5, r0, r0, lsl ip
     7ec:	400002c8 	andmi	r0, r0, r8, asr #5
     7f0:	4000144c 	andmi	r1, r0, ip, asr #8
     7f4:	400004bc 	strmih	r0, [r0], -ip
     7f8:	400002f4 	strmid	r0, [r0], -r4

000007fc <IRQ_Routine>:
/*  ----------------------------------------------------  */



void IRQ_Routine (void) {
     7fc:	eafffffe 	b	7fc <IRQ_Routine>

00000800 <FIQ_Routine>:
	while (1) ;	
}

void FIQ_Routine (void)  {
     800:	eafffffe 	b	800 <FIQ_Routine>

00000804 <SWI_Routine>:
	while (1) ;	
}		
		
		
void SWI_Routine (void)  {
     804:	eafffffe 	b	804 <SWI_Routine>

00000808 <UNDEF_Routine>:
	while (1) ;	
}


void UNDEF_Routine (void) {
     808:	eafffffe 	b	808 <UNDEF_Routine>

0000080c <Init2148>:
	while (1) ;	
}


/**********************************************************
                      Initialize
**********************************************************/

#define PLOCK 0x400

static void feed(void)
{
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
}


void Init2148(void)  
{
	
 
	// 				Setting the Phased Lock Loop (PLL)
	//               ----------------------------------
	//
	// Olimex LPC-P2148 has a 12.0000 mhz crystal
	//
	// We'd like the LPC2148 to run at 60 mhz (has to be an even multiple of crystal)
	// 
	// According to the Philips LPC2148 manual:   M = cclk / Fosc	where:	M    = PLL multiplier (bits 0-4 of PLLCFG)
	//																		cclk = 60000000 hz
	//																		Fosc = 12000000 hz
	//
	// Solving:	M = 60000000 / 12000000 = 5           
	//
	//			Note: M - 1 must be entered into bits 0-4 of PLLCFG (assign 4 to these bits)
	//
	//
	// The Current Controlled Oscilator (CCO) must operate in the range 156 mhz to 320 mhz
	//
	// According to the Philips LPC2148 manual:	Fcco = cclk * 2 * P    where:	Fcco = CCO frequency 
	//																			cclk = 60000000 hz
	//																			P = PLL divisor (bits 5-6 of PLLCFG)
	//
	// Solving:	Fcco = 60000000 * 2 * P
	//			P = 2  (trial value)
	//			Fcco = 60000000 * 2 * 2
	//			Fcc0 = 240000000 hz    (good choice for P since it's within the 156 mhz to 320 mhz range)
	//
	// From Table 22 (page 34) of Philips LPC2148 manual    P = 2, PLLCFG bits 5-6 = 1  (assign 1 to these bits)
	//
	// Finally:      PLLCFG = 0  01  00100  =  0x24
	//
	// Final note: to load PLLCFG register, we must use the 0xAA followed 0x55 write sequence to the PLLFEED register
	//             this is done in the short function feed() below
	//
   
	// Setting Multiplier and Divider values
  PLLCFG = 0x24;
     80c:	e59f2068 	ldr	r2, [pc, #104]	; 87c <prog+0x718>
     810:	e3a03024 	mov	r3, #36	; 0x24
     814:	e5823084 	str	r3, [r2, #132]
     818:	e3a010aa 	mov	r1, #170	; 0xaa
     81c:	e3a00055 	mov	r0, #85	; 0x55
  feed();
  
	// Enabling the PLL */	
	PLLCON = 0x1;
     820:	e3a03001 	mov	r3, #1	; 0x1
     824:	e582108c 	str	r1, [r2, #140]
     828:	e582008c 	str	r0, [r2, #140]
     82c:	e5823080 	str	r3, [r2, #128]
     830:	e582108c 	str	r1, [r2, #140]
     834:	e582008c 	str	r0, [r2, #140]
	feed();
  
	// Wait for the PLL to lock to set frequency
	while(!(PLLSTAT & PLOCK)) ;
     838:	e59f103c 	ldr	r1, [pc, #60]	; 87c <prog+0x718>
     83c:	e5913088 	ldr	r3, [r1, #136]
     840:	e3130b01 	tst	r3, #1024	; 0x400
     844:	0afffffb 	beq	838 <Init2148+0x2c>
  
	// Connect the PLL as the clock source
	PLLCON = 0x3;
     848:	e3a02003 	mov	r2, #3	; 0x3
     84c:	e3a030aa 	mov	r3, #170	; 0xaa
     850:	e5812080 	str	r2, [r1, #128]
     854:	e581308c 	str	r3, [r1, #140]
     858:	e3a03055 	mov	r3, #85	; 0x55
     85c:	e581308c 	str	r3, [r1, #140]
	feed();
  
	// Enabling MAM and setting number of clocks used for Flash memory fetch
	MAMTIM = 0x3;
	MAMCR = 0x2;
     860:	e3a03002 	mov	r3, #2	; 0x2
     864:	e5812004 	str	r2, [r1, #4]
     868:	e5813000 	str	r3, [r1]
  
	// Setting peripheral Clock (pclk) to System Clock (cclk)
	VPBDIV = 0x1;
     86c:	e3a03001 	mov	r3, #1	; 0x1
     870:	e5813100 	str	r3, [r1, #256]
	
	// Initialize Port0 & Port1 as Fast
	SCS_REG = 0x3;
     874:	e58121a0 	str	r2, [r1, #416]
}
     878:	e12fff1e 	bx	lr
     87c:	e01fc000 	ands	ip, pc, r0

00000880 <restoreIRQ>:

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
     880:	e10f2000 	mrs	r2, CPSR
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
     884:	e2000080 	and	r0, r0, #128	; 0x80
     888:	e3c23080 	bic	r3, r2, #128	; 0x80
     88c:	e1833000 	orr	r3, r3, r0
     890:	e129f003 	msr	CPSR_fc, r3
}

unsigned disableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | IRQ_MASK);
  return _cpsr;
}

unsigned restoreIRQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
  return _cpsr;
}
     894:	e1a00002 	mov	r0, r2
     898:	e12fff1e 	bx	lr

0000089c <restoreFIQ>:
     89c:	e10f2000 	mrs	r2, CPSR
     8a0:	e2000040 	and	r0, r0, #64	; 0x40
     8a4:	e3c23040 	bic	r3, r2, #64	; 0x40
     8a8:	e1833000 	orr	r3, r3, r0
     8ac:	e129f003 	msr	CPSR_fc, r3

unsigned enableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~IRQ_MASK);
  return _cpsr;
}

unsigned disableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | FIQ_MASK);
  return _cpsr;
}

unsigned restoreFIQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~FIQ_MASK) | (oldCPSR & FIQ_MASK));
  return _cpsr;
}
     8b0:	e1a00002 	mov	r0, r2
     8b4:	e12fff1e 	bx	lr

000008b8 <disableFIQ>:
     8b8:	e10f0000 	mrs	r0, CPSR
     8bc:	e3803040 	orr	r3, r0, #64	; 0x40
     8c0:	e129f003 	msr	CPSR_fc, r3
     8c4:	e12fff1e 	bx	lr

000008c8 <enableFIQ>:
     8c8:	e10f0000 	mrs	r0, CPSR
     8cc:	e3c03040 	bic	r3, r0, #64	; 0x40
     8d0:	e129f003 	msr	CPSR_fc, r3

unsigned enableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~FIQ_MASK);
  return _cpsr;
}
     8d4:	e12fff1e 	bx	lr

000008d8 <disableIRQ>:
     8d8:	e10f0000 	mrs	r0, CPSR
     8dc:	e3803080 	orr	r3, r0, #128	; 0x80
     8e0:	e129f003 	msr	CPSR_fc, r3
     8e4:	e12fff1e 	bx	lr

000008e8 <enableIRQ>:
     8e8:	e10f0000 	mrs	r0, CPSR
     8ec:	e3c03080 	bic	r3, r0, #128	; 0x80
     8f0:	e129f003 	msr	CPSR_fc, r3
     8f4:	e12fff1e 	bx	lr

000008f8 <timer0ISR>:
**/
void timer0ISR(void) __attribute__((naked));
void timer0ISR(void)
{
	ISR_ENTRY();
     8f8:	e24ee004 	sub	lr, lr, #4	; 0x4
     8fc:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     900:	e14f1000 	mrs	r1, SPSR
     904:	e92d0002 	stmdb	sp!, {r1}
	
	T0IR |= TIR_MR0I;			// clear MR0 Interrupt
     908:	e59f2048 	ldr	r2, [pc, #72]	; 958 <prog+0x7f4>
     90c:	e5923000 	ldr	r3, [r2]
     910:	e3833001 	orr	r3, r3, #1	; 0x1
     914:	e5823000 	str	r3, [r2]

	VICSoftIntClear = (1<<VIC_TIMER0);
     918:	e3e01c0f 	mvn	r1, #3840	; 0xf00
     91c:	e3a03010 	mov	r3, #16	; 0x10
     920:	e50130e3 	str	r3, [r1, #-227]
	VICVectAddr = 0x00000000;             // clear this interrupt from the VIC
     924:	e3a03000 	mov	r3, #0	; 0x0
     928:	e50130cf 	str	r3, [r1, #-207]
	Event |= Msec_1;
	
	miliSec++;
     92c:	e59f0028 	ldr	r0, [pc, #40]	; 95c <prog+0x7f8>
     930:	e59f1028 	ldr	r1, [pc, #40]	; 960 <prog+0x7fc>
     934:	e5902000 	ldr	r2, [r0]
     938:	e5913000 	ldr	r3, [r1]
     93c:	e2822001 	add	r2, r2, #1	; 0x1
     940:	e3833501 	orr	r3, r3, #4194304	; 0x400000
     944:	e5813000 	str	r3, [r1]
     948:	e5802000 	str	r2, [r0]
	
	ISR_EXIT();                           // recover registers and return
     94c:	e8bd0002 	ldmia	sp!, {r1}
     950:	e161f001 	msr	SPSR_c, r1
     954:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
     958:	e0004000 	and	r4, r0, r0
     95c:	40000314 	andmi	r0, r0, r4, lsl r3
     960:	400002f4 	strmid	r0, [r0], -r4

00000964 <timerAttach>:
}



/** Timer0 Interrupt Init for 1mSec
**/
void timer0Init(void)
{
	T0PR = 0; 	// set prescaler
	
	// reset timer
	T0TCR = TCR_RESET;
	delay(2);
	// start timer
	T0TCR = TCR_ENABLE;

  //  Initialize TIMER0 interrupt
	VICIntSelect &= ~(1<<VIC_TIMER0);					// setup timer0 interrupt as IRQ
	VICVectCntl4 = VIC_ENABLE | VIC_TIMER0;		// assign VIC slot
	VICVectAddr4 = (unsigned int)timer0ISR;
	// enable interrupt
	VICIntEnable |= (1<<VIC_TIMER0);

	// setup MR0 value    -scz- to get 1ms tick
	T0MR0 = (60000000/1000)-1;
	
	// enable timer0 interrupt and reset on MR0 match
	T0MCR |= TMCR_MR0_I | TMCR_MR0_R;
	
	miliSec = 0;

}

void timer1Clear(void)
{
	T1TCR = TCR_RESET;
	delay(1);
	T1TCR = TCR_ENABLE;

}


void timerAttach(uint8 interruptNum, void (*userFunc)(void) )
{
     964:	e20000ff 	and	r0, r0, #255	; 0xff
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     968:	e350000f 	cmp	r0, #15	; 0xf
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntrFunc[interruptNum] = userFunc;
     96c:	959f3004 	ldrls	r3, [pc, #4]	; 978 <prog+0x814>
     970:	97831100 	strls	r1, [r3, r0, lsl #2]
     974:	e12fff1e 	bx	lr
     978:	40000260 	andmi	r0, r0, r0, ror #4

0000097c <timerDetach>:
	}
}

void timerDetach(uint8 interruptNum)
{
     97c:	e20000ff 	and	r0, r0, #255	; 0xff
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     980:	e350000f 	cmp	r0, #15	; 0xf
	{
		// set the interrupt function to run nothing
		TimerIntrFunc[interruptNum] = 0;
     984:	959f3008 	ldrls	r3, [pc, #8]	; 994 <prog+0x830>
     988:	93a02000 	movls	r2, #0	; 0x0
     98c:	97832100 	strls	r2, [r3, r0, lsl #2]
     990:	e12fff1e 	bx	lr
     994:	40000260 	andmi	r0, r0, r0, ror #4

00000998 <getT0>:
	}
}

unsigned int getT0(void)
{
	unsigned int t;
	
	t = T0TC;
     998:	e59f3004 	ldr	r3, [pc, #4]	; 9a4 <prog+0x840>
     99c:	e5930008 	ldr	r0, [r3, #8]
	return	t;
}
     9a0:	e12fff1e 	bx	lr
     9a4:	e0004000 	and	r4, r0, r0

000009a8 <getT1>:

unsigned int getT1(void)
{
	unsigned int t;
	
	t = T1TC;
     9a8:	e59f3004 	ldr	r3, [pc, #4]	; 9b4 <prog+0x850>
     9ac:	e5930008 	ldr	r0, [r3, #8]
	return	t;
}
     9b0:	e12fff1e 	bx	lr
     9b4:	e0008000 	and	r8, r0, r0

000009b8 <timer1Clear>:
     9b8:	e92d4010 	stmdb	sp!, {r4, lr}
     9bc:	e59f401c 	ldr	r4, [pc, #28]	; 9e0 <prog+0x87c>
     9c0:	e3a03002 	mov	r3, #2	; 0x2
     9c4:	e5843004 	str	r3, [r4, #4]
     9c8:	e3a00001 	mov	r0, #1	; 0x1
     9cc:	eb000541 	bl	1ed8 <delay>
     9d0:	e3a03001 	mov	r3, #1	; 0x1
     9d4:	e5843004 	str	r3, [r4, #4]
     9d8:	e8bd4010 	ldmia	sp!, {r4, lr}
     9dc:	e12fff1e 	bx	lr
     9e0:	e0008000 	and	r8, r0, r0

000009e4 <timer0Init>:
     9e4:	e92d4030 	stmdb	sp!, {r4, r5, lr}
     9e8:	e59f406c 	ldr	r4, [pc, #108]	; a5c <prog+0x8f8>
     9ec:	e3a03002 	mov	r3, #2	; 0x2
     9f0:	e3a05000 	mov	r5, #0	; 0x0
     9f4:	e1a00003 	mov	r0, r3
     9f8:	e584500c 	str	r5, [r4, #12]
     9fc:	e5843004 	str	r3, [r4, #4]
     a00:	eb000534 	bl	1ed8 <delay>
     a04:	e3a03001 	mov	r3, #1	; 0x1
     a08:	e5843004 	str	r3, [r4, #4]
     a0c:	e3e02c0f 	mvn	r2, #3840	; 0xf00
     a10:	e51230f3 	ldr	r3, [r2, #-243]
     a14:	e3c33010 	bic	r3, r3, #16	; 0x10
     a18:	e50230f3 	str	r3, [r2, #-243]
     a1c:	e3a03024 	mov	r3, #36	; 0x24
     a20:	e5823111 	str	r3, [r2, #273]
     a24:	e59f3034 	ldr	r3, [pc, #52]	; a60 <prog+0x8fc>
     a28:	e5823011 	str	r3, [r2, #17]
     a2c:	e51230ef 	ldr	r3, [r2, #-239]
     a30:	e3833010 	orr	r3, r3, #16	; 0x10
     a34:	e50230ef 	str	r3, [r2, #-239]
     a38:	e59f3024 	ldr	r3, [pc, #36]	; a64 <prog+0x900>
     a3c:	e5843018 	str	r3, [r4, #24]
     a40:	e5943014 	ldr	r3, [r4, #20]
     a44:	e3833003 	orr	r3, r3, #3	; 0x3
     a48:	e5843014 	str	r3, [r4, #20]
     a4c:	e59f3014 	ldr	r3, [pc, #20]	; a68 <prog+0x904>
     a50:	e5835000 	str	r5, [r3]
     a54:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
     a58:	e12fff1e 	bx	lr
     a5c:	e0004000 	and	r4, r0, r0
     a60:	000008f8 	streqd	r0, [r0], -r8
     a64:	0000ea5f 	andeq	lr, r0, pc, asr sl
     a68:	40000314 	andmi	r0, r0, r4, lsl r3

00000a6c <timerInit>:
     a6c:	e52de004 	str	lr, [sp, #-4]!
     a70:	e3a01000 	mov	r1, #0	; 0x0
     a74:	e59f3020 	ldr	r3, [pc, #32]	; a9c <prog+0x938>
     a78:	e3a02000 	mov	r2, #0	; 0x0
     a7c:	e7832101 	str	r2, [r3, r1, lsl #2]
     a80:	e2811001 	add	r1, r1, #1	; 0x1
     a84:	e3510010 	cmp	r1, #16	; 0x10
     a88:	1afffff9 	bne	a74 <timerInit+0x8>
     a8c:	ebffffd4 	bl	9e4 <timer0Init>
     a90:	ebffff94 	bl	8e8 <enableIRQ>
     a94:	e49de004 	ldr	lr, [sp], #4
     a98:	e12fff1e 	bx	lr
     a9c:	40000260 	andmi	r0, r0, r0, ror #4

00000aa0 <Uart0ISR>:
void Uart0ISR(void)
{
	char ch;
	
	ISR_ENTRY();
     aa0:	e24ee004 	sub	lr, lr, #4	; 0x4
     aa4:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     aa8:	e14f1000 	mrs	r1, SPSR
     aac:	e92d0002 	stmdb	sp!, {r1}

	if ( (sOutWrPtr != sOutRdPtr)||(sOutFull==1) ) {	
     ab0:	e59f0078 	ldr	r0, [pc, #120]	; b30 <prog+0x9cc>
     ab4:	e59f3078 	ldr	r3, [pc, #120]	; b34 <prog+0x9d0>
     ab8:	e5901000 	ldr	r1, [r0]
     abc:	e5933000 	ldr	r3, [r3]
     ac0:	e1530001 	cmp	r3, r1
		ch = *(sOutRdPtr++); 
		if ( (int)(sOutRdPtr) >= (int)(sOutBuf+sOBUF_SIZE) ) sOutRdPtr = sOutBuf;
     ac4:	e59fc06c 	ldr	ip, [pc, #108]	; b38 <prog+0x9d4>
     ac8:	1a000007 	bne	aec <Uart0ISR+0x4c>
     acc:	e59f3068 	ldr	r3, [pc, #104]	; b3c <prog+0x9d8>
     ad0:	e5933000 	ldr	r3, [r3]
		U0THR = ch;
	} else   U0IER &= ~UIER_ETHREI;								// Disable THRE Int
     ad4:	e59f2064 	ldr	r2, [pc, #100]	; b40 <prog+0x9dc>
     ad8:	e3530001 	cmp	r3, #1	; 0x1
     adc:	15d23004 	ldrneb	r3, [r2, #4]
     ae0:	120330fd 	andne	r3, r3, #253	; 0xfd
     ae4:	15c23004 	strneb	r3, [r2, #4]
     ae8:	1a000008 	bne	b10 <Uart0ISR+0x70>
     aec:	e4d12001 	ldrb	r2, [r1], #1
     af0:	e1a03001 	mov	r3, r1
     af4:	e5803000 	str	r3, [r0]
     af8:	e59f3040 	ldr	r3, [pc, #64]	; b40 <prog+0x9dc>
     afc:	e151000c 	cmp	r1, ip
     b00:	e20220ff 	and	r2, r2, #255	; 0xff
     b04:	e24c1e19 	sub	r1, ip, #400	; 0x190
     b08:	a5801000 	strge	r1, [r0]
     b0c:	e5c32000 	strb	r2, [r3]
	
	VICSoftIntClear = (1<<VIC_UART0);
     b10:	e3e03c0f 	mvn	r3, #3840	; 0xf00
     b14:	e3a02040 	mov	r2, #64	; 0x40
     b18:	e50320e3 	str	r2, [r3, #-227]
	VICVectAddr = 0x00000000;             // clear this interrupt from the VIC
     b1c:	e3a02000 	mov	r2, #0	; 0x0
     b20:	e50320cf 	str	r2, [r3, #-207]
	
	ISR_EXIT();                           // recover registers and return
     b24:	e8bd0002 	ldmia	sp!, {r1}
     b28:	e161f001 	msr	SPSR_c, r1
     b2c:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
     b30:	400004a8 	andmi	r0, r0, r8, lsr #9
     b34:	400004b0 	strmih	r0, [r0], -r0
     b38:	400004a8 	andmi	r0, r0, r8, lsr #9
     b3c:	400004b4 	strmih	r0, [r0], -r4
     b40:	e000c000 	and	ip, r0, r0

00000b44 <ConsoleInit>:
}

void ConsoleInit(int iDivider)  
{               
	PINSEL0 = (PINSEL0 & ~0x0000000F) | 0x00000005;	// Enable RxD0 and TxD0 
     b44:	e59fc0b4 	ldr	ip, [pc, #180]	; c00 <prog+0xa9c>
     b48:	e59c3000 	ldr	r3, [ip]
     b4c:	e3c3300f 	bic	r3, r3, #15	; 0xf
	U0LCR = 0x80|(1<<2)|0x3;        // 8 bits, no Parity, 2 Stop bit     
     b50:	e59f10ac 	ldr	r1, [pc, #172]	; c04 <prog+0xaa0>
     b54:	e3833005 	orr	r3, r3, #5	; 0x5
     b58:	e58c3000 	str	r3, [ip]
	U0DLL = iDivider & 0xFF;				// set divider / baud rate 
	U0DLM = iDivider >> 8;
     b5c:	e1a02440 	mov	r2, r0, asr #8
     b60:	e3e03078 	mvn	r3, #120	; 0x78
     b64:	e52de004 	str	lr, [sp, #-4]!
     b68:	e20220ff 	and	r2, r2, #255	; 0xff
     b6c:	e5c1300c 	strb	r3, [r1, #12]
     b70:	e20000ff 	and	r0, r0, #255	; 0xff
	U0LCR = 0x03;  									// DLAB = 0                 
     b74:	e283307c 	add	r3, r3, #124	; 0x7c
     b78:	e5c10000 	strb	r0, [r1]
     b7c:	e5c12004 	strb	r2, [r1, #4]
     b80:	e5c1300c 	strb	r3, [r1, #12]
	
	U0FCR = 1;											// enable FIFO
     b84:	e3a03001 	mov	r3, #1	; 0x1
     b88:	e5c13008 	strb	r3, [r1, #8]
	
	sOutWrPtr = sOutBuf;
	sOutRdPtr = sOutBuf;
	OutHCnt = 0;
     b8c:	e59f3074 	ldr	r3, [pc, #116]	; c08 <prog+0xaa4>
     b90:	e3a0e000 	mov	lr, #0	; 0x0
     b94:	e583e000 	str	lr, [r3]
	sOutFull = 0;	
     b98:	e59f306c 	ldr	r3, [pc, #108]	; c0c <prog+0xaa8>
     b9c:	e583e000 	str	lr, [r3]
	
	// disable UART0 interrupt
	VICIntEnClear |= 1<<VIC_UART0;	
     ba0:	e3e02c0f 	mvn	r2, #3840	; 0xf00
     ba4:	e51230eb 	ldr	r3, [r2, #-235]
     ba8:	e3833040 	orr	r3, r3, #64	; 0x40
     bac:	e50230eb 	str	r3, [r2, #-235]
		
  //  Setup the VIC for the UART
  VICIntSelect &= ~(1<<VIC_UART0);
     bb0:	e51230f3 	ldr	r3, [r2, #-243]
     bb4:	e3c33040 	bic	r3, r3, #64	; 0x40
     bb8:	e50230f3 	str	r3, [r2, #-243]
  VICVectAddr5 = (unsigned int) Uart0ISR;
     bbc:	e59f304c 	ldr	r3, [pc, #76]	; c10 <prog+0xaac>
     bc0:	e5823015 	str	r3, [r2, #21]
  VICVectCntl5 = VIC_ENABLE | VIC_UART0;
     bc4:	e3a03026 	mov	r3, #38	; 0x26
     bc8:	e5823115 	str	r3, [r2, #277]
  
  VICIntEnable |= (1<<VIC_UART0);
     bcc:	e51230ef 	ldr	r3, [r2, #-239]
     bd0:	e3833040 	orr	r3, r3, #64	; 0x40
     bd4:	e50230ef 	str	r3, [r2, #-239]
     bd8:	e59f0034 	ldr	r0, [pc, #52]	; c14 <prog+0xab0>
     bdc:	e59f3034 	ldr	r3, [pc, #52]	; c18 <prog+0xab4>

  //  Enable UART0 interrupts
  U0IER |= UIER_ETHREI;								// Enable THRE Int
     be0:	e5d12004 	ldrb	r2, [r1, #4]
     be4:	e5830000 	str	r0, [r3]
     be8:	e59f302c 	ldr	r3, [pc, #44]	; c1c <prog+0xab8>
     bec:	e3822002 	orr	r2, r2, #2	; 0x2
     bf0:	e5c12004 	strb	r2, [r1, #4]
     bf4:	e5830000 	str	r0, [r3]
}
     bf8:	e49de004 	ldr	lr, [sp], #4
     bfc:	e12fff1e 	bx	lr
     c00:	e002c000 	and	ip, r2, r0
     c04:	e000c000 	and	ip, r0, r0
     c08:	400004ac 	andmi	r0, r0, ip, lsr #9
     c0c:	400004b4 	strmih	r0, [r0], -r4
     c10:	00000aa0 	andeq	r0, r0, r0, lsr #21
     c14:	40000318 	andmi	r0, r0, r8, lsl r3
     c18:	400004a8 	andmi	r0, r0, r8, lsr #9
     c1c:	400004b0 	strmih	r0, [r0], -r0

00000c20 <getchar>:

int putchar(int ch)  
{ 
	if ( sOutWrPtr==sOutRdPtr ) {		// buf empty
		if ( (U0LSR & 0x20) == 0 ) {
			*(sOutWrPtr++) = (unsigned char)ch;
			if ( (int)(sOutWrPtr) >= (int)(sOutBuf+sOBUF_SIZE) ) sOutWrPtr = sOutBuf;
		} else {
			U0THR = ch;
			OutHCnt++;
		}
		U0IER |= UIER_ETHREI;								// Enable THRE Int
		return ch;
	}
	
	*(sOutWrPtr++) = (unsigned char)ch;
	if ( (int)(sOutWrPtr) >= (int)(sOutBuf+sOBUF_SIZE) ) sOutWrPtr = sOutBuf;
	if ( sOutWrPtr != sOutRdPtr ) {
		return ch;
	}
	
	sOutFull = 1;	
	while ( sOutWrPtr == sOutRdPtr ) {
		U0IER |= UIER_ETHREI;								// Enable THRE Int

		delay(10);
	}
	sOutFull = 0;									
	return ch;
	
}

int getchar (void)  {                    /* Read character from Serial Port   */

  while (!(U0LSR & 0x01));
     c20:	e59f2010 	ldr	r2, [pc, #16]	; c38 <prog+0xad4>
     c24:	e5d23014 	ldrb	r3, [r2, #20]
     c28:	e3130001 	tst	r3, #1	; 0x1
     c2c:	0afffffb 	beq	c20 <getchar>

  return (U0RBR);
     c30:	e5d20000 	ldrb	r0, [r2]
}
     c34:	e12fff1e 	bx	lr
     c38:	e000c000 	and	ip, r0, r0

00000c3c <my_putchar>:

int my_putchar(int ch)  
{             
	if (U0LSR & 0x20) U0THR = ch;
     c3c:	e59f2014 	ldr	r2, [pc, #20]	; c58 <prog+0xaf4>
     c40:	e5d23014 	ldrb	r3, [r2, #20]
     c44:	e3130020 	tst	r3, #32	; 0x20
     c48:	e20030ff 	and	r3, r0, #255	; 0xff
     c4c:	03e00000 	mvneq	r0, #0	; 0x0
     c50:	15c23000 	strneb	r3, [r2]
	else ch = EOF;
	
	return ch;
}
     c54:	e12fff1e 	bx	lr
     c58:	e000c000 	and	ip, r0, r0

00000c5c <my_getchar>:


int my_getchar (void)  {                 /* Read character from Serial Port   */

	if (U0LSR & 0x01) {
     c5c:	e59f2014 	ldr	r2, [pc, #20]	; c78 <prog+0xb14>
     c60:	e5d23014 	ldrb	r3, [r2, #20]
     c64:	e3130001 	tst	r3, #1	; 0x1
		return (U0RBR);
     c68:	15d23000 	ldrneb	r3, [r2]
     c6c:	e3e00000 	mvn	r0, #0	; 0x0
     c70:	120300ff 	andne	r0, r3, #255	; 0xff
	} else {
		return (EOF);
	}
}
     c74:	e12fff1e 	bx	lr
     c78:	e000c000 	and	ip, r0, r0

00000c7c <putchar>:
     c7c:	e59f20f0 	ldr	r2, [pc, #240]	; d74 <prog+0xc10>
     c80:	e59fc0f0 	ldr	ip, [pc, #240]	; d78 <prog+0xc14>
     c84:	e5921000 	ldr	r1, [r2]
     c88:	e59c3000 	ldr	r3, [ip]
     c8c:	e1510003 	cmp	r1, r3
     c90:	e92d4010 	stmdb	sp!, {r4, lr}
     c94:	e1a04000 	mov	r4, r0
     c98:	1a000015 	bne	cf4 <putchar+0x78>
     c9c:	e59f00d8 	ldr	r0, [pc, #216]	; d7c <prog+0xc18>
     ca0:	e5d03014 	ldrb	r3, [r0, #20]
     ca4:	e3130020 	tst	r3, #32	; 0x20
     ca8:	e20430ff 	and	r3, r4, #255	; 0xff
     cac:	1a000006 	bne	ccc <putchar+0x50>
     cb0:	e4c13001 	strb	r3, [r1], #1
     cb4:	e59f00c4 	ldr	r0, [pc, #196]	; d80 <prog+0xc1c>
     cb8:	e1510000 	cmp	r1, r0
     cbc:	e5821000 	str	r1, [r2]
     cc0:	a2403e19 	subge	r3, r0, #400	; 0x190
     cc4:	aa000004 	bge	cdc <putchar+0x60>
     cc8:	ea000004 	b	ce0 <putchar+0x64>
     ccc:	e5c03000 	strb	r3, [r0]
     cd0:	e59f20ac 	ldr	r2, [pc, #172]	; d84 <prog+0xc20>
     cd4:	e5923000 	ldr	r3, [r2]
     cd8:	e2833001 	add	r3, r3, #1	; 0x1
     cdc:	e5823000 	str	r3, [r2]
     ce0:	e59f2094 	ldr	r2, [pc, #148]	; d7c <prog+0xc18>
     ce4:	e5d23004 	ldrb	r3, [r2, #4]
     ce8:	e3833002 	orr	r3, r3, #2	; 0x2
     cec:	e5c23004 	strb	r3, [r2, #4]
     cf0:	ea00001c 	b	d68 <putchar+0xec>
     cf4:	e20030ff 	and	r3, r0, #255	; 0xff
     cf8:	e4c13001 	strb	r3, [r1], #1
     cfc:	e59f007c 	ldr	r0, [pc, #124]	; d80 <prog+0xc1c>
     d00:	e1510000 	cmp	r1, r0
     d04:	a2403e19 	subge	r3, r0, #400	; 0x190
     d08:	e5821000 	str	r1, [r2]
     d0c:	a5823000 	strge	r3, [r2]
     d10:	e59c3000 	ldr	r3, [ip]
     d14:	e5922000 	ldr	r2, [r2]
     d18:	e1520003 	cmp	r2, r3
     d1c:	1a000011 	bne	d68 <putchar+0xec>
     d20:	e59f3060 	ldr	r3, [pc, #96]	; d88 <prog+0xc24>
     d24:	e3a02001 	mov	r2, #1	; 0x1
     d28:	e5832000 	str	r2, [r3]
     d2c:	e59f2048 	ldr	r2, [pc, #72]	; d7c <prog+0xc18>
     d30:	e5d23004 	ldrb	r3, [r2, #4]
     d34:	e3833002 	orr	r3, r3, #2	; 0x2
     d38:	e5c23004 	strb	r3, [r2, #4]
     d3c:	e3a0000a 	mov	r0, #10	; 0xa
     d40:	eb000464 	bl	1ed8 <delay>
     d44:	e59f3028 	ldr	r3, [pc, #40]	; d74 <prog+0xc10>
     d48:	e5932000 	ldr	r2, [r3]
     d4c:	e59f3024 	ldr	r3, [pc, #36]	; d78 <prog+0xc14>
     d50:	e5933000 	ldr	r3, [r3]
     d54:	e1520003 	cmp	r2, r3
     d58:	0afffff3 	beq	d2c <putchar+0xb0>
     d5c:	e59f3024 	ldr	r3, [pc, #36]	; d88 <prog+0xc24>
     d60:	e3a02000 	mov	r2, #0	; 0x0
     d64:	e5832000 	str	r2, [r3]
     d68:	e1a00004 	mov	r0, r4
     d6c:	e8bd4010 	ldmia	sp!, {r4, lr}
     d70:	e12fff1e 	bx	lr
     d74:	400004b0 	strmih	r0, [r0], -r0
     d78:	400004a8 	andmi	r0, r0, r8, lsr #9
     d7c:	e000c000 	and	ip, r0, r0
     d80:	400004a8 	andmi	r0, r0, r8, lsr #9
     d84:	400004ac 	andmi	r0, r0, ip, lsr #9
     d88:	400004b4 	strmih	r0, [r0], -r4

00000d8c <puts>:


int puts(const char *s)
{
     d8c:	e92d4010 	stmdb	sp!, {r4, lr}
     d90:	e1a04000 	mov	r4, r0
     d94:	ea000000 	b	d9c <puts+0x10>
	while (*s) {
		putchar(*s++);
     d98:	ebffffb7 	bl	c7c <putchar>
     d9c:	e5d43000 	ldrb	r3, [r4]
     da0:	e3530000 	cmp	r3, #0	; 0x0
     da4:	e1a00003 	mov	r0, r3
     da8:	e2844001 	add	r4, r4, #1	; 0x1
     dac:	1afffff9 	bne	d98 <puts+0xc>
	}
	putchar('\n');
     db0:	e3a0000a 	mov	r0, #10	; 0xa
     db4:	ebffffb0 	bl	c7c <putchar>
	return 1;
}
     db8:	e3a00001 	mov	r0, #1	; 0x1
     dbc:	e8bd4010 	ldmia	sp!, {r4, lr}
     dc0:	e12fff1e 	bx	lr

00000dc4 <Get4cDecNum>:
}

	// Get 4character Decimal Number
int	Get4cDecNum(char* nStr)
{
     dc4:	e92d4030 	stmdb	sp!, {r4, r5, lr}
     dc8:	e3a02000 	mov	r2, #0	; 0x0
	int i, num, v;
	char ch;
	
	num = 0;
	// Skip blank spaces at the beginning
	for (i = 0; i < 3; i++) {
		ch = *nStr;
     dcc:	e5d03000 	ldrb	r3, [r0]
		if ( ( ch == ' ')||(ch == HT) ) {
     dd0:	e3530009 	cmp	r3, #9	; 0x9
     dd4:	13530020 	cmpne	r3, #32	; 0x20
			nStr++;
			CmdRest--;
     dd8:	e59f1088 	ldr	r1, [pc, #136]	; e68 <prog+0xd04>
     ddc:	e2822001 	add	r2, r2, #1	; 0x1
     de0:	1a000005 	bne	dfc <Get4cDecNum+0x38>
     de4:	e5913000 	ldr	r3, [r1]
     de8:	e3520003 	cmp	r2, #3	; 0x3
     dec:	e2433001 	sub	r3, r3, #1	; 0x1
     df0:	e5813000 	str	r3, [r1]
     df4:	e2800001 	add	r0, r0, #1	; 0x1
     df8:	1afffff3 	bne	dcc <Get4cDecNum+0x8>
     dfc:	e3a04000 	mov	r4, #0	; 0x0
     e00:	e1a05004 	mov	r5, r4
		} else break;
	}	
		
	for (i = 0; i < 4; i++) {
		ch = *nStr;
		nStr++;
		CmdRest--;
     e04:	e59f305c 	ldr	r3, [pc, #92]	; e68 <prog+0xd04>
     e08:	e4d02001 	ldrb	r2, [r0], #1
     e0c:	e5931000 	ldr	r1, [r3]
		if ( ( ch == ' ')||(ch == HT) ) break;
		v = 0;
		if ( (ch>0x2f)&&(ch<0x3a) ) {
     e10:	e242c030 	sub	ip, r2, #48	; 0x30
     e14:	e2411001 	sub	r1, r1, #1	; 0x1
     e18:	e3520009 	cmp	r2, #9	; 0x9
     e1c:	13520020 	cmpne	r2, #32	; 0x20
     e20:	e2855001 	add	r5, r5, #1	; 0x1
     e24:	e20ce0ff 	and	lr, ip, #255	; 0xff
     e28:	e5831000 	str	r1, [r3]
     e2c:	0a000008 	beq	e54 <Get4cDecNum+0x90>
     e30:	e35e0009 	cmp	lr, #9	; 0x9
     e34:	91a0200c 	movls	r2, ip
     e38:	83a02000 	movhi	r2, #0	; 0x0
			v = ch-0x30;
		} 
		num = (num*10)+v;
     e3c:	e3a0300a 	mov	r3, #10	; 0xa
		
		if ( CmdRest==0 ) break;
     e40:	e3510000 	cmp	r1, #0	; 0x0
     e44:	e0242493 	mla	r4, r3, r4, r2
     e48:	0a000001 	beq	e54 <Get4cDecNum+0x90>
     e4c:	e3550004 	cmp	r5, #4	; 0x4
     e50:	1affffeb 	bne	e04 <Get4cDecNum+0x40>
	}
	CmdPtr = nStr;	
     e54:	e59f3010 	ldr	r3, [pc, #16]	; e6c <prog+0xd08>
     e58:	e5830000 	str	r0, [r3]
	return num;
}		
     e5c:	e1a00004 	mov	r0, r4
     e60:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
     e64:	e12fff1e 	bx	lr
     e68:	40000e54 	andmi	r0, r0, r4, asr lr
     e6c:	40000e50 	andmi	r0, r0, r0, asr lr

00000e70 <scanDecNumber>:


//--scan string and extract decimal number
int scanDecNumber( char* StrBuf, int maxLen, int* number)
{
     e70:	e52de004 	str	lr, [sp, #-4]!
	int i   = 0;
	*number = 0;
     e74:	e3a03000 	mov	r3, #0	; 0x0
     e78:	e1a0e002 	mov	lr, r2
     e7c:	e1a02000 	mov	r2, r0
     e80:	e1a00003 	mov	r0, r3
     e84:	e58e3000 	str	r3, [lr]
     e88:	ea000000 	b	e90 <scanDecNumber+0x20>
	while ( (StrBuf[i] == ' ')||(StrBuf[i] == '.') ) { i++; maxLen++; }
     e8c:	e2800001 	add	r0, r0, #1	; 0x1
     e90:	e7d03002 	ldrb	r3, [r0, r2]
     e94:	e353002e 	cmp	r3, #46	; 0x2e
     e98:	13530020 	cmpne	r3, #32	; 0x20
     e9c:	0afffffa 	beq	e8c <scanDecNumber+0x1c>
     ea0:	e0811000 	add	r1, r1, r0
     ea4:	e082c000 	add	ip, r2, r0
     ea8:	ea000008 	b	ed0 <scanDecNumber+0x60>
	while ((StrBuf[i] >= '0') && (StrBuf[i] <= '9') && (i < maxLen)) {
		*number  *= 10;
     eac:	e59e2000 	ldr	r2, [lr]
     eb0:	e3a0300a 	mov	r3, #10	; 0xa
     eb4:	e0020293 	mul	r2, r3, r2
     eb8:	e58e2000 	str	r2, [lr]
		*number  += (StrBuf[i] & 0x0000000F);
     ebc:	e55c3001 	ldrb	r3, [ip, #-1]
     ec0:	e203300f 	and	r3, r3, #15	; 0xf
     ec4:	e0822003 	add	r2, r2, r3
     ec8:	e58e2000 	str	r2, [lr]
		i++;
     ecc:	e2800001 	add	r0, r0, #1	; 0x1
     ed0:	e4dc3001 	ldrb	r3, [ip], #1
     ed4:	e2433030 	sub	r3, r3, #48	; 0x30
     ed8:	e3530009 	cmp	r3, #9	; 0x9
     edc:	83a03000 	movhi	r3, #0	; 0x0
     ee0:	93a03001 	movls	r3, #1	; 0x1
     ee4:	e1500001 	cmp	r0, r1
     ee8:	a3a03000 	movge	r3, #0	; 0x0
     eec:	e3530000 	cmp	r3, #0	; 0x0
     ef0:	1affffed 	bne	eac <scanDecNumber+0x3c>
	}
	return i;
}
     ef4:	e49de004 	ldr	lr, [sp], #4
     ef8:	e12fff1e 	bx	lr

00000efc <RdUi8Seq>:


int	RdUi8Seq( char* StBuf, int Len,  uint8* numBuf )
{
     efc:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
     f00:	e3a0e000 	mov	lr, #0	; 0x0
     f04:	e24dd010 	sub	sp, sp, #16	; 0x10
     f08:	e1a06001 	mov	r6, r1
     f0c:	e1a07002 	mov	r7, r2
     f10:	e1a04000 	mov	r4, r0
     f14:	e1a0500e 	mov	r5, lr
     f18:	e1a0c00e 	mov	ip, lr
     f1c:	ea000008 	b	f44 <RdUi8Seq+0x48>
	int j = 0;
	int ll, v;
	uint8 OKFlag = 0;
	uint8	tbuf[10];
	char* ibufp;
	
	ll = 0;
	ibufp = StBuf;
	for ( j=0; j<Len; j++ ) {
		ll = scanDecNumber( ibufp, 3, &v);
     f20:	ebffffd2 	bl	e70 <scanDecNumber>
		if (ll == 0) { 
     f24:	e250e000 	subs	lr, r0, #0	; 0x0
			OKFlag = 0; 
			break; 
		}
		tbuf[j] = (uint8)(v&0xff);
		ibufp += ll;
     f28:	e084400e 	add	r4, r4, lr
     f2c:	e3a0c001 	mov	ip, #1	; 0x1
     f30:	0a000013 	beq	f84 <RdUi8Seq+0x88>
     f34:	e59d200c 	ldr	r2, [sp, #12]
     f38:	e28d3002 	add	r3, sp, #2	; 0x2
     f3c:	e7c52003 	strb	r2, [r5, r3]
     f40:	e085500c 	add	r5, r5, ip
     f44:	e1550006 	cmp	r5, r6
     f48:	e1a00004 	mov	r0, r4
     f4c:	e3a01003 	mov	r1, #3	; 0x3
     f50:	e28d200c 	add	r2, sp, #12	; 0xc
     f54:	bafffff1 	blt	f20 <RdUi8Seq+0x24>
		OKFlag = 1;
	}
	if ( OKFlag == 0 ) return 0;
     f58:	e35c0000 	cmp	ip, #0	; 0x0
     f5c:	01a0e00c 	moveq	lr, ip
     f60:	13a02000 	movne	r2, #0	; 0x0
     f64:	1a000004 	bne	f7c <RdUi8Seq+0x80>
     f68:	ea000005 	b	f84 <RdUi8Seq+0x88>
	 
	for ( j=0; j<Len; j++ ) numBuf[j] = tbuf[j];
     f6c:	e28d3002 	add	r3, sp, #2	; 0x2
     f70:	e7d23003 	ldrb	r3, [r2, r3]
     f74:	e7c23007 	strb	r3, [r2, r7]
     f78:	e2822001 	add	r2, r2, #1	; 0x1
     f7c:	e1520006 	cmp	r2, r6
     f80:	bafffff9 	blt	f6c <RdUi8Seq+0x70>
	
	return ll;
}
     f84:	e1a0000e 	mov	r0, lr
     f88:	e28dd010 	add	sp, sp, #16	; 0x10
     f8c:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
     f90:	e12fff1e 	bx	lr

00000f94 <LogInit>:

/***********
EEPROM MAC_IP Store Record
	MAC - 6bytes addr: 0x00-0x05
	IP  - 4bytes addr: 0x08-0x0b
	GAR - 4bytes addr: 0x10-0x13
	SN  - 4bytes addr: 0x18-0x1b
	Port- 2bytes addr: 0x20-0x21
***********/
int InitEE_IP(void)
{
	uint8 	mac_ee[] = {0x06,0x44,0x53,0x01,0x01,0x02,0,0};      
	uint8 	ip_ee[] = {192,168,0,41,0,0,0,0};
	uint8 	gar_ee[] = {192,168,0,1,0,0,0,0};
	uint8 	sn_ee[] = {255,255,255,1,0,0,0,0};
	uint8		port_ee[] = {80,0};
	
	memcpy ( &outBuf[(0x00+2)], mac_ee, 8 );
	memcpy ( &outBuf[(0x08+2)], ip_ee, 8 );
	memcpy ( &outBuf[(0x10+2)], gar_ee, 8 );
	memcpy ( &outBuf[(0x18+2)], sn_ee, 8 );
	memcpy ( &outBuf[(0x20+2)], port_ee, 2 );
	if ( eepromWrite(0, outBuf, 0x22) != 0 ) {
		printf("\n\rInitEE Err1");
		return -1;	//error
	}
	
	return 0;
	
}

void DumpEE(uint16 addr, int len)
{	
	int r, i, idx, sLen;
	sLen = len;	
	
	r = eepromRead(addr, outBuf, len);
	
	idx = 0;
	while ( idx < sLen ) {
		printf("%03d  ", (addr+idx) );
		for (i=0; i<16; i++) printf("%02x ", outBuf[idx+i]);
		printf("  ");
		for (i=0; i<16; i++) printf("%c", outBuf[idx+i]);
		idx += 16;
		if (idx<sLen) printf("\n\r");
	}
}	


void ClearEE(void)
{
	int		i;
	uint16 addr;
	
	addr = 0;
	memset ( &outBuf[2], 0xff, 64 );
	for (i=0; i<6; i++ )	{	// i<<128
		eepromWrite( addr, outBuf, 64 );
		delay(100000);
		addr += 64;
	}
}

	
void	LogInit(void)
{
     f94:	e59f2020 	ldr	r2, [pc, #32]	; fbc <prog+0xe58>
	int i;
	
	for (i=0; i<LOGMAX; i++ ) {
		LogData[i] = 0x1111;
     f98:	e59f3020 	ldr	r3, [pc, #32]	; fc0 <prog+0xe5c>
     f9c:	e0c230b2 	strh	r3, [r2], #2
     fa0:	e59f301c 	ldr	r3, [pc, #28]	; fc4 <prog+0xe60>
     fa4:	e1520003 	cmp	r2, r3
     fa8:	1afffffa 	bne	f98 <LogInit+0x4>
	}
	
	LogCnt = 0;
     fac:	e59f3014 	ldr	r3, [pc, #20]	; fc8 <prog+0xe64>
     fb0:	e3a02000 	mov	r2, #0	; 0x0
     fb4:	e5832000 	str	r2, [r3]
}
     fb8:	e12fff1e 	bx	lr
     fbc:	400004e4 	andmi	r0, r0, r4, ror #9
     fc0:	00001111 	andeq	r1, r0, r1, lsl r1
     fc4:	40000e44 	andmi	r0, r0, r4, asr #28
     fc8:	400004e0 	andmi	r0, r0, r0, ror #9

00000fcc <LogWr>:


void	LogWr( uint16 data )
{
	if ( LogCnt == 0 ) LogTim0 = miliSec;
     fcc:	e59f3044 	ldr	r3, [pc, #68]	; 1018 <prog+0xeb4>
     fd0:	e593c000 	ldr	ip, [r3]
     fd4:	e1a00800 	mov	r0, r0, lsl #16
     fd8:	e35c0000 	cmp	ip, #0	; 0x0
     fdc:	e1a00820 	mov	r0, r0, lsr #16
     fe0:	059f3034 	ldreq	r3, [pc, #52]	; 101c <prog+0xeb8>
     fe4:	05932000 	ldreq	r2, [r3]
     fe8:	059f3030 	ldreq	r3, [pc, #48]	; 1020 <prog+0xebc>
     fec:	05832000 	streq	r2, [r3]
     ff0:	0a000001 	beq	ffc <LogWr+0x30>
	
	if ( LogCnt < LOGMAX ) {
     ff4:	e35c0e4b 	cmp	ip, #1200	; 0x4b0
     ff8:	a12fff1e 	bxge	lr
		LogData[LogCnt] = data;
     ffc:	e59f3020 	ldr	r3, [pc, #32]	; 1024 <prog+0xec0>
    1000:	e1a0208c 	mov	r2, ip, lsl #1
    1004:	e18200b3 	strh	r0, [r2, r3]
		LogCnt++;
    1008:	e59f3008 	ldr	r3, [pc, #8]	; 1018 <prog+0xeb4>
    100c:	e28c1001 	add	r1, ip, #1	; 0x1
    1010:	e5831000 	str	r1, [r3]
    1014:	e12fff1e 	bx	lr
    1018:	400004e0 	andmi	r0, r0, r0, ror #9
    101c:	40000314 	andmi	r0, r0, r4, lsl r3
    1020:	400002ec 	andmi	r0, r0, ip, ror #5
    1024:	400004e4 	andmi	r0, r0, r4, ror #9

00001028 <LogWrTim>:
	}
}

void	LogWrTim( void )
{
	if ( LogCnt < LOGMAX ) {
    1028:	e59fc03c 	ldr	ip, [pc, #60]	; 106c <prog+0xf08>
    102c:	e59c3000 	ldr	r3, [ip]
    1030:	e3530e4b 	cmp	r3, #1200	; 0x4b0
		uint16 td;
		td = ((miliSec-LogTim0)&0x3fff)|0xc000;
		LogData[LogCnt] = td;
		LogCnt++;
    1034:	e2830001 	add	r0, r3, #1	; 0x1
    1038:	e1a01083 	mov	r1, r3, lsl #1
    103c:	a12fff1e 	bxge	lr
    1040:	e59f3028 	ldr	r3, [pc, #40]	; 1070 <prog+0xf0c>
    1044:	e59f2028 	ldr	r2, [pc, #40]	; 1074 <prog+0xf10>
    1048:	e5933000 	ldr	r3, [r3]
    104c:	e5922000 	ldr	r2, [r2]
    1050:	e0623003 	rsb	r3, r2, r3
    1054:	e1e03903 	mvn	r3, r3, lsl #18
    1058:	e59f2018 	ldr	r2, [pc, #24]	; 1078 <prog+0xf14>
    105c:	e1e03923 	mvn	r3, r3, lsr #18
    1060:	e18130b2 	strh	r3, [r1, r2]
    1064:	e58c0000 	str	r0, [ip]
    1068:	e12fff1e 	bx	lr
    106c:	400004e0 	andmi	r0, r0, r0, ror #9
    1070:	40000314 	andmi	r0, r0, r4, lsl r3
    1074:	400002ec 	andmi	r0, r0, ip, ror #5
    1078:	400004e4 	andmi	r0, r0, r4, ror #9

0000107c <LogDisplay>:
	}
}

uint16 LogRMark[] = { 0x11, 0x20, 0x21, 0x22, 0x23, 
											0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
											0x31, 0x32, 0x33, 0x35,
											0x41, 0x42, 0x45, 0x47, 0x48, 0x49,
											0x50, 0x51, 0x56,
											0x70, 0x71, 0x77, 0x78, 0x88,
										 	0x551, 0x555,
										 	0x771, 0x772, 0x773, 0x774,
										 	0 };
										  
int	LogRLen[] = { 3, 3, 3, 3, 3,
									3, 3, 3, 3, 4, 4,
									4, 5, 4, 3,
									3, 4, 3, 3, 3, 2,
									3, 3, 2,
									3, 3, 3, 5, 3,
									6, 3,
									5, 1, 1, 5 };
										 
void LogDisplay( void )
{
	int i, j, cnt, c1, l;
	uint16 v0, v1;
	
	printf ( "\n\rLogCnt= %d Tim=%d.%d ", LogCnt, (int)(miliSec/1000),(int)(miliSec%1000) );
    107c:	e59f31bc 	ldr	r3, [pc, #444]	; 1240 <prog+0x10dc>
    1080:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1084:	e5934000 	ldr	r4, [r3]
    1088:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    108c:	e1a00004 	mov	r0, r4
    1090:	eb0011d3 	bl	57e4 <__aeabi_uidiv>
    1094:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    1098:	e1a05000 	mov	r5, r0
    109c:	e1a00004 	mov	r0, r4
    10a0:	eb001265 	bl	5a3c <__umodsi3>
    10a4:	e59f4198 	ldr	r4, [pc, #408]	; 1244 <prog+0x10e0>
    10a8:	e1a03000 	mov	r3, r0
    10ac:	e1a02005 	mov	r2, r5
    10b0:	e59f0190 	ldr	r0, [pc, #400]	; 1248 <prog+0x10e4>
    10b4:	e5941000 	ldr	r1, [r4]
    10b8:	eb000379 	bl	1ea4 <printf>
	if ( LogCnt == 0 ) {
    10bc:	e5947000 	ldr	r7, [r4]
    10c0:	e3570000 	cmp	r7, #0	; 0x0
    10c4:	0a00005b 	beq	1238 <LogDisplay+0x1bc>
		return;
	}

	cnt = LogCnt;
	j = 0;
	l = 1;

	if ( CmdRest==0 ) {
    10c8:	e59f317c 	ldr	r3, [pc, #380]	; 124c <prog+0x10e8>
    10cc:	e5933000 	ldr	r3, [r3]
    10d0:	e3530000 	cmp	r3, #0	; 0x0
    10d4:	13a0a000 	movne	sl, #0	; 0x0
    10d8:	13a09001 	movne	r9, #1	; 0x1
    10dc:	01a06003 	moveq	r6, r3
    10e0:	0a00000f 	beq	1124 <LogDisplay+0xa8>
    10e4:	ea00004f 	b	1228 <LogDisplay+0x1ac>
		while ( cnt > 0 ) {
			printf("\n\r");
    10e8:	e59f0160 	ldr	r0, [pc, #352]	; 1250 <prog+0x10ec>
    10ec:	eb00036c 	bl	1ea4 <printf>
    10f0:	e59f315c 	ldr	r3, [pc, #348]	; 1254 <prog+0x10f0>
    10f4:	e3a04000 	mov	r4, #0	; 0x0
    10f8:	e0835086 	add	r5, r3, r6, lsl #1
			for ( i=0; i<10; i++ ) {
				printf("%04x ", LogData[j]);
    10fc:	e1d510b0 	ldrh	r1, [r5]
    1100:	e59f0150 	ldr	r0, [pc, #336]	; 1258 <prog+0x10f4>
    1104:	eb000366 	bl	1ea4 <printf>
				j++;
				cnt--;
				if ( cnt==0 ) break;
    1108:	e2577001 	subs	r7, r7, #1	; 0x1
    110c:	e2844001 	add	r4, r4, #1	; 0x1
    1110:	e2855002 	add	r5, r5, #2	; 0x2
    1114:	e2866001 	add	r6, r6, #1	; 0x1
    1118:	0a000044 	beq	1230 <LogDisplay+0x1b4>
    111c:	e354000a 	cmp	r4, #10	; 0xa
    1120:	1afffff5 	bne	10fc <LogDisplay+0x80>
    1124:	e3570000 	cmp	r7, #0	; 0x0
    1128:	caffffee 	bgt	10e8 <LogDisplay+0x6c>
    112c:	ea00003f 	b	1230 <LogDisplay+0x1b4>
			}
		}
	} else {
		while ( cnt > 0 ) {
			v0 = LogData[j++];
    1130:	e59f311c 	ldr	r3, [pc, #284]	; 1254 <prog+0x10f0>
    1134:	e1a0208a 	mov	r2, sl, lsl #1
    1138:	e19280b3 	ldrh	r8, [r2, r3]
			printf("\n\r%3d   %04x  ", l++, v0);
    113c:	e1a01009 	mov	r1, r9
    1140:	e1a02008 	mov	r2, r8
    1144:	e59f0110 	ldr	r0, [pc, #272]	; 125c <prog+0x10f8>
    1148:	eb000355 	bl	1ea4 <printf>
    114c:	e59f210c 	ldr	r2, [pc, #268]	; 1260 <prog+0x10fc>
    1150:	e28aa001 	add	sl, sl, #1	; 0x1
    1154:	e3a01000 	mov	r1, #0	; 0x0
    1158:	ea000000 	b	1160 <LogDisplay+0xe4>
			i = 0;	
			while ( (LogRMark[i] > 0) && (LogRMark[i] != v0) ) i++;
    115c:	e2811001 	add	r1, r1, #1	; 0x1
    1160:	e1d230b0 	ldrh	r3, [r2]
    1164:	e3530000 	cmp	r3, #0	; 0x0
    1168:	e2822002 	add	r2, r2, #2	; 0x2
    116c:	0a00002a 	beq	121c <LogDisplay+0x1a0>
    1170:	e1530008 	cmp	r3, r8
    1174:	1afffff8 	bne	115c <LogDisplay+0xe0>
			if ( LogRMark[i]==0 ) c1 = 1; else c1 = LogRLen[i];
    1178:	e59f30e4 	ldr	r3, [pc, #228]	; 1264 <prog+0x1100>
    117c:	e7936101 	ldr	r6, [r3, r1, lsl #2]
			if ( c1 > 1 )	{
    1180:	e3560001 	cmp	r6, #1	; 0x1
    1184:	da000025 	ble	1220 <LogDisplay+0x1a4>
    1188:	e59f30c4 	ldr	r3, [pc, #196]	; 1254 <prog+0x10f0>
    118c:	e3a04001 	mov	r4, #1	; 0x1
    1190:	e083508a 	add	r5, r3, sl, lsl #1
    1194:	ea000001 	b	11a0 <LogDisplay+0x124>
				for ( i=1; i<(c1-1); i++ ) printf( "%04x ", LogData[j++] );
    1198:	e15510b2 	ldrh	r1, [r5, #-2]
    119c:	eb000340 	bl	1ea4 <printf>
    11a0:	e2844001 	add	r4, r4, #1	; 0x1
    11a4:	e1540006 	cmp	r4, r6
    11a8:	e59f00a8 	ldr	r0, [pc, #168]	; 1258 <prog+0x10f4>
    11ac:	e2855002 	add	r5, r5, #2	; 0x2
    11b0:	1afffff8 	bne	1198 <LogDisplay+0x11c>
    11b4:	e08a3006 	add	r3, sl, r6
    11b8:	e2433002 	sub	r3, r3, #2	; 0x2
				v1 = LogData[j++];
    11bc:	e59f2090 	ldr	r2, [pc, #144]	; 1254 <prog+0x10f0>
    11c0:	e1a01083 	mov	r1, r3, lsl #1
				// TimeDelta Marker ?
				if ( (v0<0x75) && ((v1&0xC000)==0xC000) ) {	
    11c4:	e3580074 	cmp	r8, #116	; 0x74
    11c8:	e19150b2 	ldrh	r5, [r1, r2]
    11cc:	e283a001 	add	sl, r3, #1	; 0x1
    11d0:	8a00000d 	bhi	120c <LogDisplay+0x190>
    11d4:	e2053903 	and	r3, r5, #49152	; 0xc000
    11d8:	e3530903 	cmp	r3, #49152	; 0xc000
    11dc:	03a04000 	moveq	r4, #0	; 0x0
    11e0:	0a000001 	beq	11ec <LogDisplay+0x170>
    11e4:	ea000008 	b	120c <LogDisplay+0x190>
					v1 = v1&0x3FFF;
					for ( i=0; i<(4-c1); i++ ) printf("     ");
    11e8:	eb00032d 	bl	1ea4 <printf>
    11ec:	e2663004 	rsb	r3, r6, #4	; 0x4
    11f0:	e1540003 	cmp	r4, r3
    11f4:	e59f006c 	ldr	r0, [pc, #108]	; 1268 <prog+0x1104>
    11f8:	e2844001 	add	r4, r4, #1	; 0x1
    11fc:	bafffff9 	blt	11e8 <LogDisplay+0x16c>
					printf( " dt= %d", v1 );
    1200:	e59f0064 	ldr	r0, [pc, #100]	; 126c <prog+0x1108>
    1204:	e3c51903 	bic	r1, r5, #49152	; 0xc000
    1208:	ea000001 	b	1214 <LogDisplay+0x198>
				}
				else printf( "%04x ", v1 );
    120c:	e59f0044 	ldr	r0, [pc, #68]	; 1258 <prog+0x10f4>
    1210:	e1a01005 	mov	r1, r5
    1214:	eb000322 	bl	1ea4 <printf>
    1218:	ea000000 	b	1220 <LogDisplay+0x1a4>
    121c:	e3a06001 	mov	r6, #1	; 0x1
			}
			cnt = cnt - c1;
    1220:	e0667007 	rsb	r7, r6, r7
    1224:	e2899001 	add	r9, r9, #1	; 0x1
    1228:	e3570000 	cmp	r7, #0	; 0x0
    122c:	caffffbf 	bgt	1130 <LogDisplay+0xb4>
		}
	}
	LogInit();
}
    1230:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1234:	eaffff56 	b	f94 <LogInit>
    1238:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    123c:	e12fff1e 	bx	lr
    1240:	40000314 	andmi	r0, r0, r4, lsl r3
    1244:	400004e0 	andmi	r0, r0, r0, ror #9
    1248:	00005c40 	andeq	r5, r0, r0, asr #24
    124c:	40000e54 	andmi	r0, r0, r4, asr lr
    1250:	00005c0c 	andeq	r5, r0, ip, lsl #24
    1254:	400004e4 	andmi	r0, r0, r4, ror #9
    1258:	00005c58 	andeq	r5, r0, r8, asr ip
    125c:	00005c60 	andeq	r5, r0, r0, ror #24
    1260:	40000128 	andmi	r0, r0, r8, lsr #2
    1264:	40000170 	andmi	r0, r0, r0, ror r1
    1268:	00005c70 	andeq	r5, r0, r0, ror ip
    126c:	00005c78 	andeq	r5, r0, r8, ror ip

00001270 <ClearEE>:
    1270:	e92d4010 	stmdb	sp!, {r4, lr}
    1274:	e59f0038 	ldr	r0, [pc, #56]	; 12b4 <prog+0x1150>
    1278:	e3a010ff 	mov	r1, #255	; 0xff
    127c:	e3a02040 	mov	r2, #64	; 0x40
    1280:	eb00110d 	bl	56bc <memset>
    1284:	e3a04000 	mov	r4, #0	; 0x0
    1288:	e1a00004 	mov	r0, r4
    128c:	e59f1024 	ldr	r1, [pc, #36]	; 12b8 <prog+0x1154>
    1290:	e3a02040 	mov	r2, #64	; 0x40
    1294:	eb000f9c 	bl	510c <eepromWrite>
    1298:	e2844040 	add	r4, r4, #64	; 0x40
    129c:	e59f0018 	ldr	r0, [pc, #24]	; 12bc <prog+0x1158>
    12a0:	eb00030c 	bl	1ed8 <delay>
    12a4:	e3540d06 	cmp	r4, #384	; 0x180
    12a8:	1afffff6 	bne	1288 <ClearEE+0x18>
    12ac:	e8bd4010 	ldmia	sp!, {r4, lr}
    12b0:	e12fff1e 	bx	lr
    12b4:	40001abe 	strmih	r1, [r0], -lr
    12b8:	40001abc 	strmih	r1, [r0], -ip
    12bc:	000186a0 	andeq	r8, r1, r0, lsr #13

000012c0 <DumpEE>:
    12c0:	e1a00800 	mov	r0, r0, lsl #16
    12c4:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12c8:	e1a07001 	mov	r7, r1
    12cc:	e1a08820 	mov	r8, r0, lsr #16
    12d0:	e1a00008 	mov	r0, r8
    12d4:	e59f1088 	ldr	r1, [pc, #136]	; 1364 <prog+0x1200>
    12d8:	e1a02007 	mov	r2, r7
    12dc:	eb000f61 	bl	5068 <eepromRead>
    12e0:	e3a06000 	mov	r6, #0	; 0x0
    12e4:	ea00001a 	b	1354 <DumpEE+0x94>
    12e8:	e59f0078 	ldr	r0, [pc, #120]	; 1368 <prog+0x1204>
    12ec:	e0881006 	add	r1, r8, r6
    12f0:	eb0002eb 	bl	1ea4 <printf>
    12f4:	e59f3068 	ldr	r3, [pc, #104]	; 1364 <prog+0x1200>
    12f8:	e3a04000 	mov	r4, #0	; 0x0
    12fc:	e0865003 	add	r5, r6, r3
    1300:	e2844001 	add	r4, r4, #1	; 0x1
    1304:	e59f0060 	ldr	r0, [pc, #96]	; 136c <prog+0x1208>
    1308:	e4d51001 	ldrb	r1, [r5], #1
    130c:	eb0002e4 	bl	1ea4 <printf>
    1310:	e3540010 	cmp	r4, #16	; 0x10
    1314:	1afffff9 	bne	1300 <DumpEE+0x40>
    1318:	e59f0050 	ldr	r0, [pc, #80]	; 1370 <prog+0x120c>
    131c:	eb0002e0 	bl	1ea4 <printf>
    1320:	e59f303c 	ldr	r3, [pc, #60]	; 1364 <prog+0x1200>
    1324:	e3a04000 	mov	r4, #0	; 0x0
    1328:	e0865003 	add	r5, r6, r3
    132c:	e2844001 	add	r4, r4, #1	; 0x1
    1330:	e4d50001 	ldrb	r0, [r5], #1
    1334:	ebfffe50 	bl	c7c <putchar>
    1338:	e3540010 	cmp	r4, #16	; 0x10
    133c:	1afffffa 	bne	132c <DumpEE+0x6c>
    1340:	e2866010 	add	r6, r6, #16	; 0x10
    1344:	e1560007 	cmp	r6, r7
    1348:	aa000003 	bge	135c <DumpEE+0x9c>
    134c:	e59f0020 	ldr	r0, [pc, #32]	; 1374 <prog+0x1210>
    1350:	eb0002d3 	bl	1ea4 <printf>
    1354:	e1560007 	cmp	r6, r7
    1358:	baffffe2 	blt	12e8 <DumpEE+0x28>
    135c:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    1360:	e12fff1e 	bx	lr
    1364:	40001abc 	strmih	r1, [r0], -ip
    1368:	00005c80 	andeq	r5, r0, r0, lsl #25
    136c:	00005c88 	andeq	r5, r0, r8, lsl #25
    1370:	000062a0 	andeq	r6, r0, r0, lsr #5
    1374:	00005c0c 	andeq	r5, r0, ip, lsl #24

00001378 <InitEE_IP>:
    1378:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    137c:	e24dd024 	sub	sp, sp, #36	; 0x24
    1380:	e28d401a 	add	r4, sp, #26	; 0x1a
    1384:	e28d8012 	add	r8, sp, #18	; 0x12
    1388:	e59f10dc 	ldr	r1, [pc, #220]	; 146c <prog+0x1308>
    138c:	e3a02008 	mov	r2, #8	; 0x8
    1390:	e1a00004 	mov	r0, r4
    1394:	eb0010a1 	bl	5620 <memcpy>
    1398:	e28d700a 	add	r7, sp, #10	; 0xa
    139c:	e59f10cc 	ldr	r1, [pc, #204]	; 1470 <prog+0x130c>
    13a0:	e3a02008 	mov	r2, #8	; 0x8
    13a4:	e1a00008 	mov	r0, r8
    13a8:	eb00109c 	bl	5620 <memcpy>
    13ac:	e28d6002 	add	r6, sp, #2	; 0x2
    13b0:	e59f10bc 	ldr	r1, [pc, #188]	; 1474 <prog+0x1310>
    13b4:	e3a02008 	mov	r2, #8	; 0x8
    13b8:	e1a00007 	mov	r0, r7
    13bc:	eb001097 	bl	5620 <memcpy>
    13c0:	e28d5022 	add	r5, sp, #34	; 0x22
    13c4:	e59f10ac 	ldr	r1, [pc, #172]	; 1478 <prog+0x1314>
    13c8:	e3a02008 	mov	r2, #8	; 0x8
    13cc:	e1a00006 	mov	r0, r6
    13d0:	eb001092 	bl	5620 <memcpy>
    13d4:	e59f10a0 	ldr	r1, [pc, #160]	; 147c <prog+0x1318>
    13d8:	e3a02002 	mov	r2, #2	; 0x2
    13dc:	e1a00005 	mov	r0, r5
    13e0:	eb00108e 	bl	5620 <memcpy>
    13e4:	e1a01004 	mov	r1, r4
    13e8:	e3a02008 	mov	r2, #8	; 0x8
    13ec:	e59f008c 	ldr	r0, [pc, #140]	; 1480 <prog+0x131c>
    13f0:	eb00108a 	bl	5620 <memcpy>
    13f4:	e1a01008 	mov	r1, r8
    13f8:	e3a02008 	mov	r2, #8	; 0x8
    13fc:	e59f0080 	ldr	r0, [pc, #128]	; 1484 <prog+0x1320>
    1400:	eb001086 	bl	5620 <memcpy>
    1404:	e1a01007 	mov	r1, r7
    1408:	e3a02008 	mov	r2, #8	; 0x8
    140c:	e59f0074 	ldr	r0, [pc, #116]	; 1488 <prog+0x1324>
    1410:	eb001082 	bl	5620 <memcpy>
    1414:	e1a01006 	mov	r1, r6
    1418:	e3a02008 	mov	r2, #8	; 0x8
    141c:	e59f0068 	ldr	r0, [pc, #104]	; 148c <prog+0x1328>
    1420:	eb00107e 	bl	5620 <memcpy>
    1424:	e1a01005 	mov	r1, r5
    1428:	e3a02002 	mov	r2, #2	; 0x2
    142c:	e59f005c 	ldr	r0, [pc, #92]	; 1490 <prog+0x132c>
    1430:	eb00107a 	bl	5620 <memcpy>
    1434:	e59f1058 	ldr	r1, [pc, #88]	; 1494 <prog+0x1330>
    1438:	e3a02022 	mov	r2, #34	; 0x22
    143c:	e3a00000 	mov	r0, #0	; 0x0
    1440:	eb000f31 	bl	510c <eepromWrite>
    1444:	e3500000 	cmp	r0, #0	; 0x0
    1448:	e1a03000 	mov	r3, r0
    144c:	e59f0044 	ldr	r0, [pc, #68]	; 1498 <prog+0x1334>
    1450:	0a000001 	beq	145c <InitEE_IP+0xe4>
    1454:	eb000292 	bl	1ea4 <printf>
    1458:	e3e03000 	mvn	r3, #0	; 0x0
    145c:	e1a00003 	mov	r0, r3
    1460:	e28dd024 	add	sp, sp, #36	; 0x24
    1464:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    1468:	e12fff1e 	bx	lr
    146c:	00005b2a 	andeq	r5, r0, sl, lsr #22
    1470:	00005b22 	andeq	r5, r0, r2, lsr #22
    1474:	00005b1a 	andeq	r5, r0, sl, lsl fp
    1478:	00005b12 	andeq	r5, r0, r2, lsl fp
    147c:	00005b10 	andeq	r5, r0, r0, lsl fp
    1480:	40001abe 	strmih	r1, [r0], -lr
    1484:	40001ac6 	andmi	r1, r0, r6, asr #21
    1488:	40001ace 	andmi	r1, r0, lr, asr #21
    148c:	40001ad6 	ldrmid	r1, [r0], -r6
    1490:	40001ade 	ldrmid	r1, [r0], -lr
    1494:	40001abc 	strmih	r1, [r0], -ip
    1498:	00005c90 	muleq	r0, r0, ip

0000149c <GetCmdLine>:
    149c:	e92d4010 	stmdb	sp!, {r4, lr}
    14a0:	ebfffded 	bl	c5c <my_getchar>
    14a4:	e3700001 	cmn	r0, #1	; 0x1
    14a8:	e1a04000 	mov	r4, r0
    14ac:	e3a01000 	mov	r1, #0	; 0x0
    14b0:	0a00000c 	beq	14e8 <GetCmdLine+0x4c>
    14b4:	ebfffdf0 	bl	c7c <putchar>
    14b8:	e59f2044 	ldr	r2, [pc, #68]	; 1504 <prog+0x13a0>
    14bc:	e354000d 	cmp	r4, #13	; 0xd
    14c0:	15923000 	ldrne	r3, [r2]
    14c4:	e59f003c 	ldr	r0, [pc, #60]	; 1508 <prog+0x13a4>
    14c8:	05922000 	ldreq	r2, [r2]
    14cc:	03a03000 	moveq	r3, #0	; 0x0
    14d0:	17c04003 	strneb	r4, [r0, r3]
    14d4:	12833001 	addne	r3, r3, #1	; 0x1
    14d8:	07c03002 	streqb	r3, [r0, r2]
    14dc:	15823000 	strne	r3, [r2]
    14e0:	e3a01001 	mov	r1, #1	; 0x1
    14e4:	13a01000 	movne	r1, #0	; 0x0
    14e8:	e59f3014 	ldr	r3, [pc, #20]	; 1504 <prog+0x13a0>
    14ec:	e5932000 	ldr	r2, [r3]
    14f0:	e59f3014 	ldr	r3, [pc, #20]	; 150c <prog+0x13a8>
    14f4:	e1a00001 	mov	r0, r1
    14f8:	e5832000 	str	r2, [r3]
    14fc:	e8bd4010 	ldmia	sp!, {r4, lr}
    1500:	e12fff1e 	bx	lr
    1504:	40000e58 	andmi	r0, r0, r8, asr lr
    1508:	400004c1 	andmi	r0, r0, r1, asr #9
    150c:	40000e54 	andmi	r0, r0, r4, asr lr

00001510 <CheckCmd>:
    1510:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    1514:	e59f4494 	ldr	r4, [pc, #1172]	; 19b0 <prog+0x184c>
    1518:	e5943000 	ldr	r3, [r4]
    151c:	e3530000 	cmp	r3, #0	; 0x0
    1520:	e24dd050 	sub	sp, sp, #80	; 0x50
    1524:	13a03000 	movne	r3, #0	; 0x0
    1528:	159f0484 	ldrne	r0, [pc, #1156]	; 19b4 <prog+0x1850>
    152c:	15843000 	strne	r3, [r4]
    1530:	1b00025b 	blne	1ea4 <printf>
    1534:	ebffffd8 	bl	149c <GetCmdLine>
    1538:	e3500000 	cmp	r0, #0	; 0x0
    153c:	0a000118 	beq	19a4 <prog+0x1840>
    1540:	e59f3470 	ldr	r3, [pc, #1136]	; 19b8 <prog+0x1854>
    1544:	e5933000 	ldr	r3, [r3]
    1548:	e3530000 	cmp	r3, #0	; 0x0
    154c:	da000114 	ble	19a4 <prog+0x1840>
    1550:	e59f3464 	ldr	r3, [pc, #1124]	; 19bc <prog+0x1858>
    1554:	e5d32000 	ldrb	r2, [r3]
    1558:	e2423061 	sub	r3, r2, #97	; 0x61
    155c:	e59f045c 	ldr	r0, [pc, #1116]	; 19c0 <prog+0x185c>
    1560:	e3530019 	cmp	r3, #25	; 0x19
    1564:	e3a03001 	mov	r3, #1	; 0x1
    1568:	e5843000 	str	r3, [r4]
    156c:	92423020 	subls	r3, r2, #32	; 0x20
    1570:	e5c02000 	strb	r2, [r0]
    1574:	e59f1448 	ldr	r1, [pc, #1096]	; 19c4 <prog+0x1860>
    1578:	95c03000 	strlsb	r3, [r0]
    157c:	e5913000 	ldr	r3, [r1]
    1580:	e5d02000 	ldrb	r2, [r0]
    1584:	e2433001 	sub	r3, r3, #1	; 0x1
    1588:	e2422045 	sub	r2, r2, #69	; 0x45
    158c:	e5813000 	str	r3, [r1]
    1590:	e3520007 	cmp	r2, #7	; 0x7
    1594:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    1598:	ea0000fc 	b	1990 <prog+0x182c>
    159c:	000016c8 	andeq	r1, r0, r8, asr #13
    15a0:	000015f4 	streqd	r1, [r0], -r4
    15a4:	00001990 	muleq	r0, r0, r9
    15a8:	00001670 	andeq	r1, r0, r0, ror r6
    15ac:	000015c4 	andeq	r1, r0, r4, asr #11
    15b0:	00001990 	muleq	r0, r0, r9
    15b4:	00001990 	muleq	r0, r0, r9
    15b8:	000015bc 	streqh	r1, [r0], -ip
    15bc:	ebfffeae 	bl	107c <LogDisplay>
    15c0:	ea0000f4 	b	1998 <prog+0x1834>
    15c4:	e59f13fc 	ldr	r1, [pc, #1020]	; 19c8 <prog+0x1864>
    15c8:	e59f03fc 	ldr	r0, [pc, #1020]	; 19cc <prog+0x1868>
    15cc:	eb000234 	bl	1ea4 <printf>
    15d0:	e59f03f8 	ldr	r0, [pc, #1016]	; 19d0 <prog+0x186c>
    15d4:	eb000232 	bl	1ea4 <printf>
    15d8:	e3a01030 	mov	r1, #48	; 0x30
    15dc:	e3a00000 	mov	r0, #0	; 0x0
    15e0:	ebffff36 	bl	12c0 <DumpEE>
    15e4:	e59f03e8 	ldr	r0, [pc, #1000]	; 19d4 <prog+0x1870>
    15e8:	eb00022d 	bl	1ea4 <printf>
    15ec:	ebfffbe5 	bl	588 <ShowIPs>
    15f0:	ea0000e8 	b	1998 <prog+0x1834>
    15f4:	e28d400d 	add	r4, sp, #13	; 0xd
    15f8:	e1a00004 	mov	r0, r4
    15fc:	e59f13d4 	ldr	r1, [pc, #980]	; 19d8 <prog+0x1874>
    1600:	e3a02021 	mov	r2, #33	; 0x21
    1604:	eb001005 	bl	5620 <memcpy>
    1608:	e3a0200a 	mov	r2, #10	; 0xa
    160c:	e3a0100d 	mov	r1, #13	; 0xd
    1610:	e59f03c4 	ldr	r0, [pc, #964]	; 19dc <prog+0x1878>
    1614:	eb000222 	bl	1ea4 <printf>
    1618:	e1a00004 	mov	r0, r4
    161c:	e59f13bc 	ldr	r1, [pc, #956]	; 19e0 <prog+0x187c>
    1620:	eb00025c 	bl	1f98 <findstr>
    1624:	e1a00004 	mov	r0, r4
    1628:	e59f13b4 	ldr	r1, [pc, #948]	; 19e4 <prog+0x1880>
    162c:	eb000259 	bl	1f98 <findstr>
    1630:	e1a00004 	mov	r0, r4
    1634:	e59f13ac 	ldr	r1, [pc, #940]	; 19e8 <prog+0x1884>
    1638:	eb000256 	bl	1f98 <findstr>
    163c:	e1a00004 	mov	r0, r4
    1640:	e59f13a4 	ldr	r1, [pc, #932]	; 19ec <prog+0x1888>
    1644:	eb000253 	bl	1f98 <findstr>
    1648:	e1a00004 	mov	r0, r4
    164c:	e59f139c 	ldr	r1, [pc, #924]	; 19f0 <prog+0x188c>
    1650:	eb000250 	bl	1f98 <findstr>
    1654:	e1a00004 	mov	r0, r4
    1658:	e59f1394 	ldr	r1, [pc, #916]	; 19f4 <prog+0x1890>
    165c:	eb00024d 	bl	1f98 <findstr>
    1660:	e1a00004 	mov	r0, r4
    1664:	e59f138c 	ldr	r1, [pc, #908]	; 19f8 <prog+0x1894>
    1668:	eb00024a 	bl	1f98 <findstr>
    166c:	ea0000c9 	b	1998 <prog+0x1834>
    1670:	e59f0384 	ldr	r0, [pc, #900]	; 19fc <prog+0x1898>
    1674:	eb00020a 	bl	1ea4 <printf>
    1678:	e59f0380 	ldr	r0, [pc, #896]	; 1a00 <prog+0x189c>
    167c:	eb000208 	bl	1ea4 <printf>
    1680:	e59f037c 	ldr	r0, [pc, #892]	; 1a04 <prog+0x18a0>
    1684:	eb000206 	bl	1ea4 <printf>
    1688:	e59f0378 	ldr	r0, [pc, #888]	; 1a08 <prog+0x18a4>
    168c:	eb000204 	bl	1ea4 <printf>
    1690:	e59f0374 	ldr	r0, [pc, #884]	; 1a0c <prog+0x18a8>
    1694:	eb000202 	bl	1ea4 <printf>
    1698:	e59f0370 	ldr	r0, [pc, #880]	; 1a10 <prog+0x18ac>
    169c:	eb000200 	bl	1ea4 <printf>
    16a0:	e59f036c 	ldr	r0, [pc, #876]	; 1a14 <prog+0x18b0>
    16a4:	eb0001fe 	bl	1ea4 <printf>
    16a8:	e59f0368 	ldr	r0, [pc, #872]	; 1a18 <prog+0x18b4>
    16ac:	eb0001fc 	bl	1ea4 <printf>
    16b0:	e59f0364 	ldr	r0, [pc, #868]	; 1a1c <prog+0x18b8>
    16b4:	eb0001fa 	bl	1ea4 <printf>
    16b8:	e59f0360 	ldr	r0, [pc, #864]	; 1a20 <prog+0x18bc>
    16bc:	eb0001f8 	bl	1ea4 <printf>
    16c0:	e59f035c 	ldr	r0, [pc, #860]	; 1a24 <prog+0x18c0>
    16c4:	ea0000b2 	b	1994 <prog+0x1830>
    16c8:	e59f32ec 	ldr	r3, [pc, #748]	; 19bc <prog+0x1858>
    16cc:	e5d32001 	ldrb	r2, [r3, #1]
    16d0:	e3520000 	cmp	r2, #0	; 0x0
    16d4:	059f034c 	ldreq	r0, [pc, #844]	; 1a28 <prog+0x18c4>
    16d8:	0a0000ad 	beq	1994 <prog+0x1830>
    16dc:	e3a07000 	mov	r7, #0	; 0x0
    16e0:	e3a00001 	mov	r0, #1	; 0x1
    16e4:	e2423061 	sub	r3, r2, #97	; 0x61
    16e8:	e59f133c 	ldr	r1, [pc, #828]	; 1a2c <prog+0x18c8>
    16ec:	e3530019 	cmp	r3, #25	; 0x19
    16f0:	92423020 	subls	r3, r2, #32	; 0x20
    16f4:	e5c12000 	strb	r2, [r1]
    16f8:	95c13000 	strlsb	r3, [r1]
    16fc:	e5d13000 	ldrb	r3, [r1]
    1700:	e2433043 	sub	r3, r3, #67	; 0x43
    1704:	e2806001 	add	r6, r0, #1	; 0x1
    1708:	e59f22ac 	ldr	r2, [pc, #684]	; 19bc <prog+0x1858>
    170c:	e3530010 	cmp	r3, #16	; 0x10
    1710:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    1714:	ea000097 	b	1978 <prog+0x1814>
    1718:	0000175c 	andeq	r1, r0, ip, asr r7
    171c:	00001770 	andeq	r1, r0, r0, ror r7
    1720:	00001978 	andeq	r1, r0, r8, ror r9
    1724:	00001978 	andeq	r1, r0, r8, ror r9
    1728:	000017e8 	andeq	r1, r0, r8, ror #15
    172c:	00001978 	andeq	r1, r0, r8, ror r9
    1730:	00001780 	andeq	r1, r0, r0, lsl #15
    1734:	00001978 	andeq	r1, r0, r8, ror r9
    1738:	00001978 	andeq	r1, r0, r8, ror r9
    173c:	00001764 	andeq	r1, r0, r4, ror #14
    1740:	000018ac 	andeq	r1, r0, ip, lsr #17
    1744:	00001978 	andeq	r1, r0, r8, ror r9
    1748:	00001978 	andeq	r1, r0, r8, ror r9
    174c:	00001924 	andeq	r1, r0, r4, lsr #18
    1750:	00001978 	andeq	r1, r0, r8, ror r9
    1754:	00001978 	andeq	r1, r0, r8, ror r9
    1758:	0000184c 	andeq	r1, r0, ip, asr #16
    175c:	ebfffec3 	bl	1270 <ClearEE>
    1760:	ea000084 	b	1978 <prog+0x1814>
    1764:	ebffff03 	bl	1378 <InitEE_IP>
    1768:	e59f02c0 	ldr	r0, [pc, #704]	; 1a30 <prog+0x18cc>
    176c:	eb0001d9 	bl	1ed8 <delay>
    1770:	e3a00000 	mov	r0, #0	; 0x0
    1774:	e3a01060 	mov	r1, #96	; 0x60
    1778:	ebfffed0 	bl	12c0 <DumpEE>
    177c:	ea00007d 	b	1978 <prog+0x1814>
    1780:	e59f52ac 	ldr	r5, [pc, #684]	; 1a34 <prog+0x18d0>
    1784:	e0860002 	add	r0, r6, r2
    1788:	e3a01004 	mov	r1, #4	; 0x4
    178c:	e1a02005 	mov	r2, r5
    1790:	ebfffdd9 	bl	efc <RdUi8Seq>
    1794:	e2507000 	subs	r7, r0, #0	; 0x0
    1798:	da000010 	ble	17e0 <prog+0x167c>
    179c:	e5d5c003 	ldrb	ip, [r5, #3]
    17a0:	e5d51000 	ldrb	r1, [r5]
    17a4:	e5d52001 	ldrb	r2, [r5, #1]
    17a8:	e5d53002 	ldrb	r3, [r5, #2]
    17ac:	e59f0284 	ldr	r0, [pc, #644]	; 1a38 <prog+0x18d4>
    17b0:	e58dc000 	str	ip, [sp]
    17b4:	e28d402e 	add	r4, sp, #46	; 0x2e
    17b8:	eb0001b9 	bl	1ea4 <printf>
    17bc:	e1a00005 	mov	r0, r5
    17c0:	eb0009a5 	bl	3e5c <setSIPR>
    17c4:	e1a01005 	mov	r1, r5
    17c8:	e3a02004 	mov	r2, #4	; 0x4
    17cc:	e2840002 	add	r0, r4, #2	; 0x2
    17d0:	eb000f92 	bl	5620 <memcpy>
    17d4:	e1a01004 	mov	r1, r4
    17d8:	e3a00008 	mov	r0, #8	; 0x8
    17dc:	ea000018 	b	1844 <prog+0x16e0>
    17e0:	e59f0254 	ldr	r0, [pc, #596]	; 1a3c <prog+0x18d8>
    17e4:	ea000062 	b	1974 <prog+0x1810>
    17e8:	e59f5250 	ldr	r5, [pc, #592]	; 1a40 <prog+0x18dc>
    17ec:	e0860002 	add	r0, r6, r2
    17f0:	e3a01004 	mov	r1, #4	; 0x4
    17f4:	e1a02005 	mov	r2, r5
    17f8:	ebfffdbf 	bl	efc <RdUi8Seq>
    17fc:	e2507000 	subs	r7, r0, #0	; 0x0
    1800:	da000045 	ble	191c <prog+0x17b8>
    1804:	e5d5c003 	ldrb	ip, [r5, #3]
    1808:	e5d51000 	ldrb	r1, [r5]
    180c:	e5d52001 	ldrb	r2, [r5, #1]
    1810:	e5d53002 	ldrb	r3, [r5, #2]
    1814:	e59f0228 	ldr	r0, [pc, #552]	; 1a44 <prog+0x18e0>
    1818:	e58dc000 	str	ip, [sp]
    181c:	e28d402e 	add	r4, sp, #46	; 0x2e
    1820:	eb00019f 	bl	1ea4 <printf>
    1824:	e1a00005 	mov	r0, r5
    1828:	eb0009af 	bl	3eec <setGAR>
    182c:	e1a01005 	mov	r1, r5
    1830:	e3a02004 	mov	r2, #4	; 0x4
    1834:	e2840002 	add	r0, r4, #2	; 0x2
    1838:	eb000f78 	bl	5620 <memcpy>
    183c:	e1a01004 	mov	r1, r4
    1840:	e3a00010 	mov	r0, #16	; 0x10
    1844:	e3a02004 	mov	r2, #4	; 0x4
    1848:	ea000045 	b	1964 <prog+0x1800>
    184c:	e59f51f4 	ldr	r5, [pc, #500]	; 1a48 <prog+0x18e4>
    1850:	e0860002 	add	r0, r6, r2
    1854:	e3a01004 	mov	r1, #4	; 0x4
    1858:	e1a02005 	mov	r2, r5
    185c:	ebfffda6 	bl	efc <RdUi8Seq>
    1860:	e2507000 	subs	r7, r0, #0	; 0x0
    1864:	da00002c 	ble	191c <prog+0x17b8>
    1868:	e5d5c003 	ldrb	ip, [r5, #3]
    186c:	e5d51000 	ldrb	r1, [r5]
    1870:	e5d52001 	ldrb	r2, [r5, #1]
    1874:	e5d53002 	ldrb	r3, [r5, #2]
    1878:	e59f01cc 	ldr	r0, [pc, #460]	; 1a4c <prog+0x18e8>
    187c:	e58dc000 	str	ip, [sp]
    1880:	e28d402e 	add	r4, sp, #46	; 0x2e
    1884:	eb000186 	bl	1ea4 <printf>
    1888:	e1a00005 	mov	r0, r5
    188c:	eb000984 	bl	3ea4 <setSUBR>
    1890:	e1a01005 	mov	r1, r5
    1894:	e3a02004 	mov	r2, #4	; 0x4
    1898:	e2840002 	add	r0, r4, #2	; 0x2
    189c:	eb000f5f 	bl	5620 <memcpy>
    18a0:	e1a01004 	mov	r1, r4
    18a4:	e3a00018 	mov	r0, #24	; 0x18
    18a8:	eaffffe5 	b	1844 <prog+0x16e0>
    18ac:	e59f519c 	ldr	r5, [pc, #412]	; 1a50 <prog+0x18ec>
    18b0:	e0860002 	add	r0, r6, r2
    18b4:	e3a01006 	mov	r1, #6	; 0x6
    18b8:	e1a02005 	mov	r2, r5
    18bc:	ebfffd8e 	bl	efc <RdUi8Seq>
    18c0:	e2507000 	subs	r7, r0, #0	; 0x0
    18c4:	da000014 	ble	191c <prog+0x17b8>
    18c8:	e5d5c003 	ldrb	ip, [r5, #3]
    18cc:	e5d5e004 	ldrb	lr, [r5, #4]
    18d0:	e5d54005 	ldrb	r4, [r5, #5]
    18d4:	e5d51000 	ldrb	r1, [r5]
    18d8:	e5d52001 	ldrb	r2, [r5, #1]
    18dc:	e5d53002 	ldrb	r3, [r5, #2]
    18e0:	e59f016c 	ldr	r0, [pc, #364]	; 1a54 <prog+0x18f0>
    18e4:	e88d5000 	stmia	sp, {ip, lr}
    18e8:	e58d4008 	str	r4, [sp, #8]
    18ec:	eb00016c 	bl	1ea4 <printf>
    18f0:	e28d402e 	add	r4, sp, #46	; 0x2e
    18f4:	e1a00005 	mov	r0, r5
    18f8:	eb00098d 	bl	3f34 <setSHAR>
    18fc:	e1a01005 	mov	r1, r5
    1900:	e3a02006 	mov	r2, #6	; 0x6
    1904:	e2840002 	add	r0, r4, #2	; 0x2
    1908:	eb000f44 	bl	5620 <memcpy>
    190c:	e1a01004 	mov	r1, r4
    1910:	e3a00000 	mov	r0, #0	; 0x0
    1914:	e3a02006 	mov	r2, #6	; 0x6
    1918:	ea000011 	b	1964 <prog+0x1800>
    191c:	e59f0104 	ldr	r0, [pc, #260]	; 1a28 <prog+0x18c4>
    1920:	ea000013 	b	1974 <prog+0x1810>
    1924:	e28d504c 	add	r5, sp, #76	; 0x4c
    1928:	e0860002 	add	r0, r6, r2
    192c:	e3a01005 	mov	r1, #5	; 0x5
    1930:	e1a02005 	mov	r2, r5
    1934:	ebfffd4d 	bl	e70 <scanDecNumber>
    1938:	e59d104c 	ldr	r1, [sp, #76]
    193c:	e59f0114 	ldr	r0, [pc, #276]	; 1a58 <prog+0x18f4>
    1940:	eb000157 	bl	1ea4 <printf>
    1944:	e28d402e 	add	r4, sp, #46	; 0x2e
    1948:	e3a02002 	mov	r2, #2	; 0x2
    194c:	e1a01005 	mov	r1, r5
    1950:	e0840002 	add	r0, r4, r2
    1954:	eb000f31 	bl	5620 <memcpy>
    1958:	e1a01004 	mov	r1, r4
    195c:	e3a00020 	mov	r0, #32	; 0x20
    1960:	e3a02002 	mov	r2, #2	; 0x2
    1964:	eb000de8 	bl	510c <eepromWrite>
    1968:	e3500000 	cmp	r0, #0	; 0x0
    196c:	0a000001 	beq	1978 <prog+0x1814>
    1970:	e59f00e4 	ldr	r0, [pc, #228]	; 1a5c <prog+0x18f8>
    1974:	eb00014a 	bl	1ea4 <printf>
    1978:	e59f303c 	ldr	r3, [pc, #60]	; 19bc <prog+0x1858>
    197c:	e0860007 	add	r0, r6, r7
    1980:	e7d32000 	ldrb	r2, [r3, r0]
    1984:	e3520000 	cmp	r2, #0	; 0x0
    1988:	0a000002 	beq	1998 <prog+0x1834>
    198c:	eaffff54 	b	16e4 <prog+0x1580>
    1990:	e59f00c8 	ldr	r0, [pc, #200]	; 1a60 <prog+0x18fc>
    1994:	eb000142 	bl	1ea4 <printf>
    1998:	e59f3018 	ldr	r3, [pc, #24]	; 19b8 <prog+0x1854>
    199c:	e3a02000 	mov	r2, #0	; 0x0
    19a0:	e5832000 	str	r2, [r3]
    19a4:	e28dd050 	add	sp, sp, #80	; 0x50
    19a8:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    19ac:	e12fff1e 	bx	lr
    19b0:	400004bc 	strmih	r0, [r0], -ip
    19b4:	00005ca0 	andeq	r5, r0, r0, lsr #25
    19b8:	40000e58 	andmi	r0, r0, r8, asr lr
    19bc:	400004c1 	andmi	r0, r0, r1, asr #9
    19c0:	40000e5c 	andmi	r0, r0, ip, asr lr
    19c4:	40000e54 	andmi	r0, r0, r4, asr lr
    19c8:	400000f4 	strmid	r0, [r0], -r4
    19cc:	00005ca4 	andeq	r5, r0, r4, lsr #25
    19d0:	00005cc4 	andeq	r5, r0, r4, asr #25
    19d4:	00005c0c 	andeq	r5, r0, ip, lsl #24
    19d8:	00005e5c 	andeq	r5, r0, ip, asr lr
    19dc:	00005cd0 	ldreqd	r5, [r0], -r0
    19e0:	00005cdc 	ldreqd	r5, [r0], -ip
    19e4:	00005ce0 	andeq	r5, r0, r0, ror #25
    19e8:	00005ce4 	andeq	r5, r0, r4, ror #25
    19ec:	00005cec 	andeq	r5, r0, ip, ror #25
    19f0:	00005cf0 	streqd	r5, [r0], -r0
    19f4:	00005cf4 	streqd	r5, [r0], -r4
    19f8:	00005e78 	andeq	r5, r0, r8, ror lr
    19fc:	00005cf8 	streqd	r5, [r0], -r8
    1a00:	00005d04 	andeq	r5, r0, r4, lsl #26
    1a04:	00005d18 	andeq	r5, r0, r8, lsl sp
    1a08:	00005d28 	andeq	r5, r0, r8, lsr #26
    1a0c:	00005d3c 	andeq	r5, r0, ip, lsr sp
    1a10:	00005d4c 	andeq	r5, r0, ip, asr #26
    1a14:	00005d68 	andeq	r5, r0, r8, ror #26
    1a18:	00005d7c 	andeq	r5, r0, ip, ror sp
    1a1c:	00005d90 	muleq	r0, r0, sp
    1a20:	00005da4 	andeq	r5, r0, r4, lsr #27
    1a24:	00005db8 	streqh	r5, [r0], -r8
    1a28:	00005dcc 	andeq	r5, r0, ip, asr #27
    1a2c:	400004c0 	andmi	r0, r0, r0, asr #9
    1a30:	000186a0 	andeq	r8, r1, r0, lsr #13
    1a34:	400002a0 	andmi	r0, r0, r0, lsr #5
    1a38:	00005dd4 	ldreqd	r5, [r0], -r4
    1a3c:	00005df0 	streqd	r5, [r0], -r0
    1a40:	400002a8 	andmi	r0, r0, r8, lsr #5
    1a44:	00005df8 	streqd	r5, [r0], -r8
    1a48:	400002a4 	andmi	r0, r0, r4, lsr #5
    1a4c:	00005e0c 	andeq	r5, r0, ip, lsl #28
    1a50:	400002ae 	andmi	r0, r0, lr, lsr #5
    1a54:	00005e1c 	andeq	r5, r0, ip, lsl lr
    1a58:	00005e40 	andeq	r5, r0, r0, asr #28
    1a5c:	00005de4 	andeq	r5, r0, r4, ror #27
    1a60:	00005e50 	andeq	r5, r0, r0, asr lr

00001a64 <printchar>:


static void printchar(char **str, int c)
{
	if (str) {
    1a64:	e2502000 	subs	r2, r0, #0	; 0x0
    1a68:	e52de004 	str	lr, [sp, #-4]!
		**str = c;
		++(*str);
	}
	else {
		putchar(c);
    1a6c:	e1a00001 	mov	r0, r1
    1a70:	0a000005 	beq	1a8c <printchar+0x28>
    1a74:	e5923000 	ldr	r3, [r2]
    1a78:	e5c31000 	strb	r1, [r3]
    1a7c:	e5923000 	ldr	r3, [r2]
    1a80:	e2833001 	add	r3, r3, #1	; 0x1
    1a84:	e5823000 	str	r3, [r2]
    1a88:	ea000000 	b	1a90 <printchar+0x2c>
    1a8c:	ebfffc7a 	bl	c7c <putchar>
	}
}
    1a90:	e49de004 	ldr	lr, [sp], #4
    1a94:	e12fff1e 	bx	lr

00001a98 <prints>:


#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
    1a98:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
    1a9c:	e2524000 	subs	r4, r2, #0	; 0x0
    1aa0:	e1a07000 	mov	r7, r0
    1aa4:	e1a05001 	mov	r5, r1
    1aa8:	c3a02000 	movgt	r2, #0	; 0x0
    1aac:	ca000001 	bgt	1ab8 <prints+0x20>
    1ab0:	ea000009 	b	1adc <prints+0x44>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
    1ab4:	e2822001 	add	r2, r2, #1	; 0x1
    1ab8:	e7d21005 	ldrb	r1, [r2, r5]
    1abc:	e3510000 	cmp	r1, #0	; 0x0
    1ac0:	1afffffb 	bne	1ab4 <prints+0x1c>
		if (len >= width) width = 0;
    1ac4:	e1520004 	cmp	r2, r4
    1ac8:	a1a04001 	movge	r4, r1
		else width -= len;
    1acc:	b0624004 	rsblt	r4, r2, r4
		if (pad & PAD_ZERO) padchar = '0';
    1ad0:	e3130002 	tst	r3, #2	; 0x2
    1ad4:	13a08030 	movne	r8, #48	; 0x30
    1ad8:	1a000000 	bne	1ae0 <prints+0x48>
    1adc:	e3a08020 	mov	r8, #32	; 0x20
	}
	if (!(pad & PAD_RIGHT)) {
    1ae0:	e2130001 	ands	r0, r3, #1	; 0x1
    1ae4:	13a06000 	movne	r6, #0	; 0x0
    1ae8:	01a06000 	moveq	r6, r0
    1aec:	0a000003 	beq	1b00 <prints+0x68>
    1af0:	ea000009 	b	1b1c <prints+0x84>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
    1af4:	ebffffda 	bl	1a64 <printchar>
			++pc;
    1af8:	e2866001 	add	r6, r6, #1	; 0x1
    1afc:	e2444001 	sub	r4, r4, #1	; 0x1
    1b00:	e3540000 	cmp	r4, #0	; 0x0
    1b04:	e1a00007 	mov	r0, r7
    1b08:	e1a01008 	mov	r1, r8
    1b0c:	cafffff8 	bgt	1af4 <prints+0x5c>
    1b10:	ea000001 	b	1b1c <prints+0x84>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
    1b14:	ebffffd2 	bl	1a64 <printchar>
		++pc;
    1b18:	e2866001 	add	r6, r6, #1	; 0x1
    1b1c:	e5d53000 	ldrb	r3, [r5]
    1b20:	e2531000 	subs	r1, r3, #0	; 0x0
    1b24:	e1a00007 	mov	r0, r7
    1b28:	e2855001 	add	r5, r5, #1	; 0x1
    1b2c:	1afffff8 	bne	1b14 <prints+0x7c>
    1b30:	ea000001 	b	1b3c <prints+0xa4>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
    1b34:	ebffffca 	bl	1a64 <printchar>
		++pc;
    1b38:	e2866001 	add	r6, r6, #1	; 0x1
    1b3c:	e3540000 	cmp	r4, #0	; 0x0
    1b40:	e1a00007 	mov	r0, r7
    1b44:	e1a01008 	mov	r1, r8
    1b48:	e2444001 	sub	r4, r4, #1	; 0x1
    1b4c:	cafffff8 	bgt	1b34 <prints+0x9c>
	}

	return pc;
}
    1b50:	e1a00006 	mov	r0, r6
    1b54:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    1b58:	e12fff1e 	bx	lr

00001b5c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
    1b5c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
    1b60:	e2514000 	subs	r4, r1, #0	; 0x0
    1b64:	e24dd00c 	sub	sp, sp, #12	; 0xc
    1b68:	e1a05002 	mov	r5, r2
    1b6c:	e1a09000 	mov	r9, r0
    1b70:	e28d6030 	add	r6, sp, #48	; 0x30
    1b74:	e8960c40 	ldmia	r6, {r6, sl, fp}
    1b78:	1a000007 	bne	1b9c <printi+0x40>
		print_buf[0] = '0';
    1b7c:	e3a0c030 	mov	ip, #48	; 0x30
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
    1b80:	e1a02006 	mov	r2, r6
    1b84:	e1a0300a 	mov	r3, sl
    1b88:	e1a0100d 	mov	r1, sp
    1b8c:	e5cdc000 	strb	ip, [sp]
    1b90:	e5cd4001 	strb	r4, [sp, #1]
    1b94:	ebffffbf 	bl	1a98 <prints>
    1b98:	ea000035 	b	1c74 <printi+0x118>
	}

	if (sg && b == 10 && i < 0) {
    1b9c:	e2533000 	subs	r3, r3, #0	; 0x0
    1ba0:	13a03001 	movne	r3, #1	; 0x1
    1ba4:	e352000a 	cmp	r2, #10	; 0xa
    1ba8:	13a03000 	movne	r3, #0	; 0x0
    1bac:	e3530000 	cmp	r3, #0	; 0x0
    1bb0:	0a000003 	beq	1bc4 <printi+0x68>
    1bb4:	e3540000 	cmp	r4, #0	; 0x0
		neg = 1;
		u = -i;
    1bb8:	b2644000 	rsblt	r4, r4, #0	; 0x0
    1bbc:	b3a08001 	movlt	r8, #1	; 0x1
    1bc0:	ba000000 	blt	1bc8 <printi+0x6c>
    1bc4:	e3a08000 	mov	r8, #0	; 0x0
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
    1bc8:	e3a03000 	mov	r3, #0	; 0x0
    1bcc:	e28d700b 	add	r7, sp, #11	; 0xb
    1bd0:	e5cd300b 	strb	r3, [sp, #11]
    1bd4:	ea00000a 	b	1c04 <printi+0xa8>

	while (u) {
		t = u % b;
    1bd8:	eb000f97 	bl	5a3c <__umodsi3>
    1bdc:	e1a03000 	mov	r3, r0
		if( t >= 10 )
    1be0:	e3530009 	cmp	r3, #9	; 0x9
			t += letbase - '0' - 10;
    1be4:	e083200b 	add	r2, r3, fp
    1be8:	c242303a 	subgt	r3, r2, #58	; 0x3a
		*--s = t + '0';
		u /= b;
    1bec:	e1a00004 	mov	r0, r4
    1bf0:	e2833030 	add	r3, r3, #48	; 0x30
    1bf4:	e1a01005 	mov	r1, r5
    1bf8:	e5673001 	strb	r3, [r7, #-1]!
    1bfc:	eb000ef8 	bl	57e4 <__aeabi_uidiv>
    1c00:	e1a04000 	mov	r4, r0
    1c04:	e3540000 	cmp	r4, #0	; 0x0
    1c08:	e1a00004 	mov	r0, r4
    1c0c:	e1a01005 	mov	r1, r5
    1c10:	1afffff0 	bne	1bd8 <printi+0x7c>
	}

	if (neg) {
    1c14:	e3580000 	cmp	r8, #0	; 0x0
    1c18:	e1a05007 	mov	r5, r7
    1c1c:	01a04008 	moveq	r4, r8
    1c20:	0a00000d 	beq	1c5c <printi+0x100>
		if( width && (pad & PAD_ZERO) ) {
    1c24:	e3560000 	cmp	r6, #0	; 0x0
    1c28:	0a000007 	beq	1c4c <printi+0xf0>
    1c2c:	e31a0002 	tst	sl, #2	; 0x2
    1c30:	0a000005 	beq	1c4c <printi+0xf0>
			printchar (out, '-');
    1c34:	e1a00009 	mov	r0, r9
    1c38:	e3a0102d 	mov	r1, #45	; 0x2d
    1c3c:	ebffff88 	bl	1a64 <printchar>
			++pc;
			--width;
    1c40:	e2466001 	sub	r6, r6, #1	; 0x1
    1c44:	e3a04001 	mov	r4, #1	; 0x1
    1c48:	ea000003 	b	1c5c <printi+0x100>
		}
		else {
			*--s = '-';
    1c4c:	e3a0302d 	mov	r3, #45	; 0x2d
    1c50:	e5473001 	strb	r3, [r7, #-1]
    1c54:	e2475001 	sub	r5, r7, #1	; 0x1
    1c58:	e3a04000 	mov	r4, #0	; 0x0
		}
	}

	return pc + prints (out, s, width, pad);
    1c5c:	e1a00009 	mov	r0, r9
    1c60:	e1a01005 	mov	r1, r5
    1c64:	e1a02006 	mov	r2, r6
    1c68:	e1a0300a 	mov	r3, sl
    1c6c:	ebffff89 	bl	1a98 <prints>
    1c70:	e0840000 	add	r0, r4, r0
}
    1c74:	e28dd00c 	add	sp, sp, #12	; 0xc
    1c78:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c7c:	e12fff1e 	bx	lr

00001c80 <print>:

static int print(char **out, const char *format, va_list args )
{
    1c80:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    1c84:	e1a07000 	mov	r7, r0
    1c88:	e24dd014 	sub	sp, sp, #20	; 0x14
    1c8c:	e1a04001 	mov	r4, r1
    1c90:	e3a06000 	mov	r6, #0	; 0x0
    1c94:	e58d200c 	str	r2, [sp, #12]
    1c98:	ea000067 	b	1e3c <print+0x1bc>
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
    1c9c:	e3530025 	cmp	r3, #37	; 0x25
    1ca0:	1a000060 	bne	1e28 <print+0x1a8>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
    1ca4:	e5f43001 	ldrb	r3, [r4, #1]!
    1ca8:	e3530000 	cmp	r3, #0	; 0x0
    1cac:	0a000065 	beq	1e48 <print+0x1c8>
			if (*format == '%') goto out;
    1cb0:	e3530025 	cmp	r3, #37	; 0x25
    1cb4:	0a00005b 	beq	1e28 <print+0x1a8>
			if (*format == '-') {
    1cb8:	e353002d 	cmp	r3, #45	; 0x2d
    1cbc:	13a05000 	movne	r5, #0	; 0x0
				++format;
    1cc0:	02844001 	addeq	r4, r4, #1	; 0x1
    1cc4:	03a05001 	moveq	r5, #1	; 0x1
    1cc8:	ea000001 	b	1cd4 <print+0x54>
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
				++format;
    1ccc:	e2844001 	add	r4, r4, #1	; 0x1
				pad |= PAD_ZERO;
    1cd0:	e3855002 	orr	r5, r5, #2	; 0x2
    1cd4:	e5d43000 	ldrb	r3, [r4]
    1cd8:	e3530030 	cmp	r3, #48	; 0x30
    1cdc:	0afffffa 	beq	1ccc <print+0x4c>
    1ce0:	e3a00000 	mov	r0, #0	; 0x0
    1ce4:	ea000003 	b	1cf8 <print+0x78>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
    1ce8:	e3a0300a 	mov	r3, #10	; 0xa
    1cec:	e0232390 	mla	r3, r0, r3, r2
    1cf0:	e2844001 	add	r4, r4, #1	; 0x1
    1cf4:	e2430030 	sub	r0, r3, #48	; 0x30
    1cf8:	e5d42000 	ldrb	r2, [r4]
    1cfc:	e2423030 	sub	r3, r2, #48	; 0x30
    1d00:	e3530009 	cmp	r3, #9	; 0x9
    1d04:	9afffff7 	bls	1ce8 <print+0x68>
			}
			if( *format == 's' ) {
    1d08:	e3520073 	cmp	r2, #115	; 0x73
    1d0c:	1a000009 	bne	1d38 <print+0xb8>
				register char *s = (char *)va_arg( args, int );
    1d10:	e59dc00c 	ldr	ip, [sp, #12]
    1d14:	e49c3004 	ldr	r3, [ip], #4
				pc += prints (out, s?s:"(null)", width, pad);
    1d18:	e59f1148 	ldr	r1, [pc, #328]	; 1e68 <prog+0x1d04>
    1d1c:	e3530000 	cmp	r3, #0	; 0x0
    1d20:	11a01003 	movne	r1, r3
    1d24:	e1a02000 	mov	r2, r0
    1d28:	e1a03005 	mov	r3, r5
    1d2c:	e1a00007 	mov	r0, r7
    1d30:	e58dc00c 	str	ip, [sp, #12]
    1d34:	ea000039 	b	1e20 <print+0x1a0>
				continue;
			}
			if( *format == 'd' ) {
    1d38:	e3520064 	cmp	r2, #100	; 0x64
    1d3c:	1a00000d 	bne	1d78 <print+0xf8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
    1d40:	e3a03061 	mov	r3, #97	; 0x61
    1d44:	e58d0000 	str	r0, [sp]
    1d48:	e58d3008 	str	r3, [sp, #8]
    1d4c:	e59dc00c 	ldr	ip, [sp, #12]
    1d50:	e58d5004 	str	r5, [sp, #4]
    1d54:	e1a00007 	mov	r0, r7
    1d58:	e59c1000 	ldr	r1, [ip]
    1d5c:	e3a0200a 	mov	r2, #10	; 0xa
    1d60:	e28cc004 	add	ip, ip, #4	; 0x4
    1d64:	e3a03001 	mov	r3, #1	; 0x1
    1d68:	e58dc00c 	str	ip, [sp, #12]
    1d6c:	ebffff7a 	bl	1b5c <printi>
    1d70:	e0866000 	add	r6, r6, r0
    1d74:	ea00002f 	b	1e38 <print+0x1b8>
				continue;
			}
			if( *format == 'x' ) {
    1d78:	e3520078 	cmp	r2, #120	; 0x78
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
    1d7c:	058d0000 	streq	r0, [sp]
    1d80:	058d5004 	streq	r5, [sp, #4]
    1d84:	03a03061 	moveq	r3, #97	; 0x61
    1d88:	0a000003 	beq	1d9c <print+0x11c>
				continue;
			}
			if( *format == 'X' ) {
    1d8c:	e3520058 	cmp	r2, #88	; 0x58
    1d90:	1a000008 	bne	1db8 <print+0x138>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
    1d94:	e88d0021 	stmia	sp, {r0, r5}
    1d98:	e3a03041 	mov	r3, #65	; 0x41
    1d9c:	e59dc00c 	ldr	ip, [sp, #12]
    1da0:	e58d3008 	str	r3, [sp, #8]
    1da4:	e59c1000 	ldr	r1, [ip]
    1da8:	e1a00007 	mov	r0, r7
    1dac:	e28cc004 	add	ip, ip, #4	; 0x4
    1db0:	e3a02010 	mov	r2, #16	; 0x10
    1db4:	ea00000a 	b	1de4 <print+0x164>
				continue;
			}
			if( *format == 'u' ) {
    1db8:	e3520075 	cmp	r2, #117	; 0x75
    1dbc:	1a00000a 	bne	1dec <print+0x16c>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
    1dc0:	e3a03061 	mov	r3, #97	; 0x61
    1dc4:	e58d0000 	str	r0, [sp]
    1dc8:	e59dc00c 	ldr	ip, [sp, #12]
    1dcc:	e58d5004 	str	r5, [sp, #4]
    1dd0:	e58d3008 	str	r3, [sp, #8]
    1dd4:	e1a00007 	mov	r0, r7
    1dd8:	e59c1000 	ldr	r1, [ip]
    1ddc:	e3a0200a 	mov	r2, #10	; 0xa
    1de0:	e28cc004 	add	ip, ip, #4	; 0x4
    1de4:	e3a03000 	mov	r3, #0	; 0x0
    1de8:	eaffffde 	b	1d68 <print+0xe8>
				continue;
			}
			if( *format == 'c' ) {
    1dec:	e3520063 	cmp	r2, #99	; 0x63
    1df0:	1a000010 	bne	1e38 <print+0x1b8>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
    1df4:	e59dc00c 	ldr	ip, [sp, #12]
    1df8:	e59ce000 	ldr	lr, [ip]
    1dfc:	e28cc004 	add	ip, ip, #4	; 0x4
    1e00:	e58dc00c 	str	ip, [sp, #12]
				scr[1] = '\0';
    1e04:	e3a0c000 	mov	ip, #0	; 0x0
    1e08:	e5cde012 	strb	lr, [sp, #18]
    1e0c:	e5cdc013 	strb	ip, [sp, #19]
				pc += prints (out, scr, width, pad);
    1e10:	e1a02000 	mov	r2, r0
    1e14:	e1a03005 	mov	r3, r5
    1e18:	e1a00007 	mov	r0, r7
    1e1c:	e28d1012 	add	r1, sp, #18	; 0x12
    1e20:	ebffff1c 	bl	1a98 <prints>
    1e24:	eaffffd1 	b	1d70 <print+0xf0>
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
    1e28:	e1a00007 	mov	r0, r7
    1e2c:	e5d41000 	ldrb	r1, [r4]
    1e30:	ebffff0b 	bl	1a64 <printchar>
			++pc;
    1e34:	e2866001 	add	r6, r6, #1	; 0x1
    1e38:	e2844001 	add	r4, r4, #1	; 0x1
    1e3c:	e5d43000 	ldrb	r3, [r4]
    1e40:	e3530000 	cmp	r3, #0	; 0x0
    1e44:	1affff94 	bne	1c9c <print+0x1c>
		}
	}
	if (out) **out = '\0';
    1e48:	e3570000 	cmp	r7, #0	; 0x0
    1e4c:	15972000 	ldrne	r2, [r7]
    1e50:	13a03000 	movne	r3, #0	; 0x0
	va_end( args );
	return pc;
}
    1e54:	e1a00006 	mov	r0, r6
    1e58:	15c23000 	strneb	r3, [r2]
    1e5c:	e28dd014 	add	sp, sp, #20	; 0x14
    1e60:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    1e64:	e12fff1e 	bx	lr
    1e68:	00005e80 	andeq	r5, r0, r0, lsl #29

00001e6c <sprintf>:

int printf(const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
        return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
    1e6c:	e92d000e 	stmdb	sp!, {r1, r2, r3}
    1e70:	e52de004 	str	lr, [sp, #-4]!
    1e74:	e24dd008 	sub	sp, sp, #8	; 0x8
        va_list args;
        
        va_start( args, format );
    1e78:	e28d3010 	add	r3, sp, #16	; 0x10
    1e7c:	e58d0000 	str	r0, [sp]
        return print( &out, format, args );
    1e80:	e1a02003 	mov	r2, r3
    1e84:	e1a0000d 	mov	r0, sp
    1e88:	e59d100c 	ldr	r1, [sp, #12]
    1e8c:	e58d3004 	str	r3, [sp, #4]
    1e90:	ebffff7a 	bl	1c80 <print>
}
    1e94:	e28dd008 	add	sp, sp, #8	; 0x8
    1e98:	e49de004 	ldr	lr, [sp], #4
    1e9c:	e28dd00c 	add	sp, sp, #12	; 0xc
    1ea0:	e12fff1e 	bx	lr

00001ea4 <printf>:
    1ea4:	e92d000f 	stmdb	sp!, {r0, r1, r2, r3}
    1ea8:	e52de004 	str	lr, [sp, #-4]!
    1eac:	e24dd004 	sub	sp, sp, #4	; 0x4
    1eb0:	e28d300c 	add	r3, sp, #12	; 0xc
    1eb4:	e1a02003 	mov	r2, r3
    1eb8:	e59d1008 	ldr	r1, [sp, #8]
    1ebc:	e3a00000 	mov	r0, #0	; 0x0
    1ec0:	e58d3000 	str	r3, [sp]
    1ec4:	ebffff6d 	bl	1c80 <print>
    1ec8:	e28dd004 	add	sp, sp, #4	; 0x4
    1ecc:	e49de004 	ldr	lr, [sp], #4
    1ed0:	e28dd010 	add	sp, sp, #16	; 0x10
    1ed4:	e12fff1e 	bx	lr

00001ed8 <delay>:
int			findstr(char* str1, char* str2);


void		delay(unsigned long d)
{
    1ed8:	ea000001 	b	1ee4 <delay+0xc>
	for(; d; --d)
	{
		asm volatile ("nop");
    1edc:	e1a00000 	nop			(mov r0,r0)
    1ee0:	e2400001 	sub	r0, r0, #1	; 0x1
    1ee4:	e3500000 	cmp	r0, #0	; 0x0
    1ee8:	1afffffb 	bne	1edc <delay+0x4>
	}
}
    1eec:	e12fff1e 	bx	lr

00001ef0 <itoa>:

char*		itoa(unsigned int num, char* buf, int radix )
{
    1ef0:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
	char *p;
	buf[0]=buf[1]=buf[2]=buf[3]=buf[4]=buf[5]='0';
	buf[6] = '\0';		
    1ef4:	e3a03000 	mov	r3, #0	; 0x0
    1ef8:	e1a04001 	mov	r4, r1

	if ( num > 0 ) {
    1efc:	e2506000 	subs	r6, r0, #0	; 0x0
    1f00:	e3a01030 	mov	r1, #48	; 0x30
    1f04:	e5c41000 	strb	r1, [r4]
    1f08:	e5c43006 	strb	r3, [r4, #6]
    1f0c:	e1a07002 	mov	r7, r2
    1f10:	e5c41005 	strb	r1, [r4, #5]
    1f14:	e5c41004 	strb	r1, [r4, #4]
    1f18:	e5c41003 	strb	r1, [r4, #3]
    1f1c:	e5c41002 	strb	r1, [r4, #2]
    1f20:	e5c41001 	strb	r1, [r4, #1]
    1f24:	0a00000c 	beq	1f5c <itoa+0x6c>
    1f28:	e1a05004 	mov	r5, r4
		p = &buf[5];
		while (num != 0) {
			*p-- = "0123456789abcdef"[num % radix];
    1f2c:	e1a00006 	mov	r0, r6
    1f30:	e1a01007 	mov	r1, r7
    1f34:	eb000ec0 	bl	5a3c <__umodsi3>
    1f38:	e59f3028 	ldr	r3, [pc, #40]	; 1f68 <prog+0x1e04>
    1f3c:	e7d33000 	ldrb	r3, [r3, r0]
			num /= radix;
    1f40:	e1a01007 	mov	r1, r7
    1f44:	e5c53005 	strb	r3, [r5, #5]
    1f48:	e1a00006 	mov	r0, r6
    1f4c:	eb000e24 	bl	57e4 <__aeabi_uidiv>
    1f50:	e2506000 	subs	r6, r0, #0	; 0x0
    1f54:	e2455001 	sub	r5, r5, #1	; 0x1
    1f58:	1afffff3 	bne	1f2c <itoa+0x3c>
		}
	}
	p = &buf[0];
	return p;
}
    1f5c:	e1a00004 	mov	r0, r4
    1f60:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    1f64:	e12fff1e 	bx	lr
    1f68:	00005e88 	andeq	r5, r0, r8, lsl #29

00001f6c <hex2int>:

int		hex2int(char ch)
{
    1f6c:	e20010ff 	and	r1, r0, #255	; 0xff
	if ( (ch>='0')&&(ch<='9') )
    1f70:	e2412030 	sub	r2, r1, #48	; 0x30
    1f74:	e20230ff 	and	r3, r2, #255	; 0xff
    1f78:	e3530009 	cmp	r3, #9	; 0x9
		return ch - '0';
		
	if ( (ch>='A')&&(ch<='F') )
    1f7c:	e241c041 	sub	ip, r1, #65	; 0x41
    1f80:	e1a00002 	mov	r0, r2
    1f84:	912fff1e 	bxls	lr
    1f88:	e35c0005 	cmp	ip, #5	; 0x5
    1f8c:	e3e00000 	mvn	r0, #0	; 0x0
		return ch - 'A' + 10;
    1f90:	92410037 	subls	r0, r1, #55	; 0x37
		
	return -1;
}
    1f94:	e12fff1e 	bx	lr

00001f98 <findstr>:

int		findstr(char* str1, char* str2)
{
    1f98:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    1f9c:	e1a04001 	mov	r4, r1
    1fa0:	e1a06000 	mov	r6, r0
	int i, j, k, k1;
	int l1, l2;

	i = j = k = k1 = 0;
	l1 = strlen(str1);
    1fa4:	eb000dea 	bl	5754 <strlen>
    1fa8:	e1a05000 	mov	r5, r0
	l2 = strlen(str2);
    1fac:	e1a00004 	mov	r0, r4
    1fb0:	eb000de7 	bl	5754 <strlen>
    1fb4:	e1a0e000 	mov	lr, r0
    1fb8:	e3a00000 	mov	r0, #0	; 0x0
    1fbc:	e1a01000 	mov	r1, r0
    1fc0:	e1a0c000 	mov	ip, r0
    1fc4:	ea00000d 	b	2000 <findstr+0x68>
	// printf("\n\rFindStr l1=%d l2=%d", l1, l2);
	while (i<=l1)  {
		if (str1[i]==str2[j])  {
    1fc8:	e7d62000 	ldrb	r2, [r6, r0]
    1fcc:	e7d43001 	ldrb	r3, [r4, r1]
    1fd0:	e1520003 	cmp	r2, r3
    1fd4:	1a000005 	bne	1ff0 <findstr+0x58>
			i++;
			j++;
    1fd8:	e2811001 	add	r1, r1, #1	; 0x1
			k1=1;
			if (j==l2)  {
    1fdc:	e3a0c001 	mov	ip, #1	; 0x1
    1fe0:	e151000e 	cmp	r1, lr
    1fe4:	e080000c 	add	r0, r0, ip
    1fe8:	0a000008 	beq	2010 <findstr+0x78>
    1fec:	ea000003 	b	2000 <findstr+0x68>
				k=1;
				break;
			}
		} else  {
			if (k1==1)  {
    1ff0:	e35c0001 	cmp	ip, #1	; 0x1
    1ff4:	03a0c000 	moveq	ip, #0	; 0x0
    1ff8:	01a0100c 	moveq	r1, ip
				j=0;
				k1=0;
			} else
				i++;
    1ffc:	12800001 	addne	r0, r0, #1	; 0x1
    2000:	e1500005 	cmp	r0, r5
    2004:	daffffef 	ble	1fc8 <findstr+0x30>
    2008:	e3e00000 	mvn	r0, #0	; 0x0
    200c:	ea000000 	b	2014 <findstr+0x7c>
		}
	}

	if (k==1)  {
     //printf("\n\rStr %s Found i=%d j=%d Indx=%d", str2, i, j, (i-l2));
     return (i-l2);
    2010:	e06e0000 	rsb	r0, lr, r0
  }  else  {
     //printf("\n\rStr not Found");
     return -1;
  }
}
    2014:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    2018:	e12fff1e 	bx	lr

0000201c <P1Init>:
{
  // Initialize P1.16 .. P1.32
  // P1.16-P1.24:GPIO or ETM Port, P1.24:GPIO, P1.26-P1.31: GPIO or JTAG Port
  
  PINSEL2    = 0x4;						// P1.16 .. P1.25 GPIOs, P1.26..P1.31 Jtag port
    201c:	e59f301c 	ldr	r3, [pc, #28]	; 2040 <prog+0x1edc>
    2020:	e3a02004 	mov	r2, #4	; 0x4
    2024:	e5832014 	str	r2, [r3, #20]
  FIO1DIR    = 0x03FF0000;				// P1.16 .. P1.25 Output
    2028:	e59f1014 	ldr	r1, [pc, #20]	; 2044 <prog+0x1ee0>
    202c:	e59f3014 	ldr	r3, [pc, #20]	; 2048 <prog+0x1ee4>
    2030:	e5013fdf 	str	r3, [r1, #-4063]
  FIO1PIN    = WIZ_ON|WIZ_RD|WIZ_WR|WIZ_RES;		// WizOn=1, LATCH=0, CS=0, Rd=1, Wr=1, /RES=1
    2034:	e3a0372e 	mov	r3, #12058624	; 0xb80000
    2038:	e5013fcb 	str	r3, [r1, #-4043]
}
    203c:	e12fff1e 	bx	lr
    2040:	e002c000 	and	ip, r2, r0
    2044:	3fffcfff 	svccc	0x00ffcfff
    2048:	03ff0000 	mvneqs	r0, #0	; 0x0

0000204c <setMR>:


/***********************
 * DS customized I/O  Function *
 ***********************/
 
void     setMR(uint16 val)
{
    204c:	e1a00800 	mov	r0, r0, lsl #16
    2050:	e1a00820 	mov	r0, r0, lsr #16
  //IINCHIP_CRITICAL_SECTION_ENTER();
  
	//WizWrR0 (MR0, (U8)(data>>8));
	FIO1PINU  = W530_MR0a | LATCH_STRBa; // WLD Edge, Wr-0						
    2054:	e59f206c 	ldr	r2, [pc, #108]	; 20c8 <prog+0x1f64>
	FIO1PINU  = ((val&0xff00)>>8) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    2058:	e1a03420 	mov	r3, r0, lsr #8
    205c:	e3833c03 	orr	r3, r3, #768	; 0x300
    2060:	e3a01e1b 	mov	r1, #432	; 0x1b0
    2064:	e1421cb9 	strh	r1, [r2, #-201]
    2068:	e1423cb9 	strh	r3, [r2, #-201]
	asm volatile ("nop");
    206c:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    2070:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    2074:	e1a00000 	nop			(mov r0,r0)
	
	asm volatile ("nop");
    2078:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    207c:	e1a00000 	nop			(mov r0,r0)
	
	FIO1CLRU = WIZ_CSa;
    2080:	e3a01c02 	mov	r1, #512	; 0x200
	FIO1PINU  = W530_MR0IDLEa;	// WLD-transparent Wr-1, CS-inactive 			
    2084:	e3a030b8 	mov	r3, #184	; 0xb8
    2088:	e1421cb1 	strh	r1, [r2, #-193]
	
	//WizWrR1 (MR1, (U8)(val));
	FIO1PINU  = W530_MR1a | LATCH_STRBa; // WLD Edge, Wr-0						
	FIO1PINU  = (val&0x00ff) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    208c:	e20000ff 	and	r0, r0, #255	; 0xff
    2090:	e1423cb9 	strh	r3, [r2, #-201]
    2094:	e59f3030 	ldr	r3, [pc, #48]	; 20cc <prog+0x1f68>
    2098:	e3800c03 	orr	r0, r0, #768	; 0x300
    209c:	e1423cb9 	strh	r3, [r2, #-201]
    20a0:	e1420cb9 	strh	r0, [r2, #-201]
	asm volatile ("nop");
    20a4:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    20a8:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    20ac:	e1a00000 	nop			(mov r0,r0)
	
	asm volatile ("nop");
    20b0:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    20b4:	e1a00000 	nop			(mov r0,r0)
	
	FIO1CLRU = WIZ_CSa;
    20b8:	e1421cb1 	strh	r1, [r2, #-193]
	FIO1PINU  = W530_MR1IDLEa; // WLD-transparent Wr-1, CS-inactive 	
    20bc:	e3a010b9 	mov	r1, #185	; 0xb9
    20c0:	e1421cb9 	strh	r1, [r2, #-201]
      
  //IINCHIP_CRITICAL_SECTION_EXIT();
	
}
    20c4:	e12fff1e 	bx	lr
    20c8:	3fffc0ff 	svccc	0x00ffc0ff
    20cc:	000001b1 	streqh	r0, [r0], -r1

000020d0 <getMR>:


uint16   getMR(void)
{
	uint16 val;
	uint8 v1, v2;
	
  //IINCHIP_CRITICAL_SECTION_ENTER();
  
	//WizRdR0 (MR0, (U8)(val>>8));
	FIO1PINU  = R530_MR0a | LATCH_STRBa;	// WLD Edge, Rd-0
    20d0:	e59f208c 	ldr	r2, [pc, #140]	; 2164 <prog+0x2000>
    20d4:	e92d4010 	stmdb	sp!, {r4, lr}
  FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    20d8:	e3a00000 	mov	r0, #0	; 0x0
	FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    20dc:	e3a04003 	mov	r4, #3	; 0x3
    20e0:	e3a03f6a 	mov	r3, #424	; 0x1a8
    20e4:	e1423cb9 	strh	r3, [r2, #-201]
    20e8:	e54200dd 	strb	r0, [r2, #-221]
    20ec:	e54240c8 	strb	r4, [r2, #-200]
	asm volatile ("nop");			// Must be 3 NOPs here
    20f0:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    20f4:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    20f8:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    20fc:	e1a00000 	nop			(mov r0,r0)
	v1 = FIO1PIN2;
    2100:	e55210c9 	ldrb	r1, [r2, #-201]
    2104:	e20110ff 	and	r1, r1, #255	; 0xff
	asm volatile ("nop");
    2108:	e1a00000 	nop			(mov r0,r0)
		
	FIO1PINU  = R530_MR0IDLEa | LATCH_STRBa;	// WLD Edge, Rd-1, CS-inactive 		
    210c:	e3a03f6e 	mov	r3, #440	; 0x1b8
    2110:	e1423cb9 	strh	r3, [r2, #-201]
  FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
  FIO1CLR3 = LATCH_STRBb;
	
	//WizRdR1 (MR1, (U8)(val));
	FIO1PINU  = R530_MR1a | LATCH_STRBa;	// WLD Edge, Rd-0
    2114:	e59f304c 	ldr	r3, [pc, #76]	; 2168 <prog+0x2004>
    2118:	e3e0c000 	mvn	ip, #0	; 0x0
    211c:	e3a0e001 	mov	lr, #1	; 0x1
    2120:	e542c0dd 	strb	ip, [r2, #-221]
    2124:	e542e0c0 	strb	lr, [r2, #-192]
    2128:	e1423cb9 	strh	r3, [r2, #-201]
  FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    212c:	e54200dd 	strb	r0, [r2, #-221]
	FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    2130:	e54240c8 	strb	r4, [r2, #-200]
	asm volatile ("nop");			// Must be 3 NOPs here
    2134:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    2138:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    213c:	e1a00000 	nop			(mov r0,r0)
	asm volatile ("nop");
    2140:	e1a00000 	nop			(mov r0,r0)
	v2 = FIO1PIN2;
    2144:	e55200c9 	ldrb	r0, [r2, #-201]
  
	FIO1PINU  = R530_MR1IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    2148:	e2833010 	add	r3, r3, #16	; 0x10
  FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
  FIO1CLR3 = LATCH_STRBb;
  val = (v1<<8)|v2;
     
  //IINCHIP_CRITICAL_SECTION_EXIT();
  
	return val;
}
    214c:	e1800401 	orr	r0, r0, r1, lsl #8
    2150:	e1423cb9 	strh	r3, [r2, #-201]
    2154:	e542c0dd 	strb	ip, [r2, #-221]
    2158:	e542e0c0 	strb	lr, [r2, #-192]
    215c:	e8bd4010 	ldmia	sp!, {r4, lr}
    2160:	e12fff1e 	bx	lr
    2164:	3fffc0ff 	svccc	0x00ffc0ff
    2168:	000001a9 	andeq	r0, r0, r9, lsr #3

0000216c <IINCHIP_READ>:

void  iinchip_init(void)
{
	setMR( MR_RST );
	delay(2000000);				// wait 200msec 
	setMR( MR_IND );

}

 
uint16  IINCHIP_READ(uint32 addr)
{
	uint16 val;

  //IINCHIP_CRITICAL_SECTION_ENTER();
  
	//WizWrR0 (IDM_AR0, (U8)(Addr>>8));
	FIO1PINU  = W530_AR0a | LATCH_STRBa; // WLD Edge, Wr-0				
	FIO1PINU  = ((addr&0xff00)>>8) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    216c:	e2003cff 	and	r3, r0, #65280	; 0xff00
    2170:	e59f10c8 	ldr	r1, [pc, #200]	; 2240 <prog+0x20dc>
    2174:	e59f20c8 	ldr	r2, [pc, #200]	; 2244 <prog+0x20e0>
    2178:	e1a03423 	mov	r3, r3, lsr #8
    217c:	e3833c03 	orr	r3, r3, #768	; 0x300
    2180:	e1412cb9 	strh	r2, [r1, #-201]
    2184:	e92d4010 	stmdb	sp!, {r4, lr}
    2188:	e1413cb9 	strh	r3, [r1, #-201]
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    218c:	e1a00000 	nop			(mov r0,r0)
    2190:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_AR0IDLEa;	// WLD-transparent Wr-1, CS-inactive 		
    2194:	e3a030ba 	mov	r3, #186	; 0xba
    2198:	e1413cb9 	strh	r3, [r1, #-201]
	
	//WizWrR0 (IDM_AR1, (U8)(Addr));
	FIO1PINU  = W530_AR1a | LATCH_STRBa; // WLD Edge, Wr-0						
	FIO1PINU  = (addr&0x00ff) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    219c:	e20000ff 	and	r0, r0, #255	; 0xff
    21a0:	e59f30a0 	ldr	r3, [pc, #160]	; 2248 <prog+0x20e4>
    21a4:	e3800c03 	orr	r0, r0, #768	; 0x300
    21a8:	e1413cb9 	strh	r3, [r1, #-201]
    21ac:	e1410cb9 	strh	r0, [r1, #-201]
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    21b0:	e1a00000 	nop			(mov r0,r0)
    21b4:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_AR1IDLEa;	// WLD-transparent Wr-1, CS-inactive 		
    21b8:	e3a030bb 	mov	r3, #187	; 0xbb
    21bc:	e1413cb9 	strh	r3, [r1, #-201]

	//WizRdR0 (IDM_DR0, (U8)(val>>8));
	FIO1PINU  = R530_DR0a | LATCH_STRBa;	// WLD Edge, Rd-0	
  FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    21c0:	e3a00000 	mov	r0, #0	; 0x0
	FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    21c4:	e3a04003 	mov	r4, #3	; 0x3
    21c8:	e3a03f6b 	mov	r3, #428	; 0x1ac
    21cc:	e1413cb9 	strh	r3, [r1, #-201]
    21d0:	e54100dd 	strb	r0, [r1, #-221]
    21d4:	e54140c8 	strb	r4, [r1, #-200]
	NOP_3					// Must be 3 NOPs here
    21d8:	e1a00000 	nop			(mov r0,r0)
    21dc:	e1a00000 	nop			(mov r0,r0)
    21e0:	e1a00000 	nop			(mov r0,r0)
	val = FIO1PIN2<<8;

	FIO1PINU  = R530_DR0IDLEa | LATCH_STRBa;	// WLD Edge, Rd-1, CS-inactive 		
    21e4:	e3a03f6f 	mov	r3, #444	; 0x1bc
    21e8:	e55120c9 	ldrb	r2, [r1, #-201]
    21ec:	e1413cb9 	strh	r3, [r1, #-201]
  FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
  FIO1CLR3 = LATCH_STRBb;
	
	//WizRdR1 (IDM_DR1, (U8)(val));
	FIO1PINU  = R530_DR1a | LATCH_STRBa;	// WLD Edge, Rd-0
    21f0:	e59f3054 	ldr	r3, [pc, #84]	; 224c <prog+0x20e8>
    21f4:	e3e0c000 	mvn	ip, #0	; 0x0
    21f8:	e3a0e001 	mov	lr, #1	; 0x1
    21fc:	e541c0dd 	strb	ip, [r1, #-221]
    2200:	e1a02402 	mov	r2, r2, lsl #8
    2204:	e541e0c0 	strb	lr, [r1, #-192]
    2208:	e1413cb9 	strh	r3, [r1, #-201]
  FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    220c:	e54100dd 	strb	r0, [r1, #-221]
	FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    2210:	e54140c8 	strb	r4, [r1, #-200]
	NOP_3					// Must be 3 NOPs here
    2214:	e1a00000 	nop			(mov r0,r0)
    2218:	e1a00000 	nop			(mov r0,r0)
    221c:	e1a00000 	nop			(mov r0,r0)
	val |= FIO1PIN2;
    2220:	e55100c9 	ldrb	r0, [r1, #-201]
		
	FIO1PINU  = R530_DR1IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    2224:	e2833010 	add	r3, r3, #16	; 0x10
  FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
  FIO1CLR3 = LATCH_STRBb;
    
  //IINCHIP_CRITICAL_SECTION_EXIT();
  
	return val;
}
    2228:	e1820000 	orr	r0, r2, r0
    222c:	e1413cb9 	strh	r3, [r1, #-201]
    2230:	e541c0dd 	strb	ip, [r1, #-221]
    2234:	e541e0c0 	strb	lr, [r1, #-192]
    2238:	e8bd4010 	ldmia	sp!, {r4, lr}
    223c:	e12fff1e 	bx	lr
    2240:	3fffc0ff 	svccc	0x00ffc0ff
    2244:	000001b2 	streqh	r0, [r0], -r2
    2248:	000001b3 	streqh	r0, [r0], -r3
    224c:	000001ad 	andeq	r0, r0, sp, lsr #3

00002250 <IINCHIP_WRITE>:

void  IINCHIP_WRITE(uint32 addr,uint16 data)
{
  //IINCHIP_CRITICAL_SECTION_ENTER();
  
	//WR5300_AR0	= (IDM_AR0_<<16)|WIZ_RD|WIZ_RES|WIZ_ON|LATCH_STRB
	FIO1PINU  = W530_AR0a | LATCH_STRBa; // WLD Edge, Wr-0				
	FIO1PINU  = ((addr&0xff00)>>8) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    2250:	e2002cff 	and	r2, r0, #65280	; 0xff00
    2254:	e59fc098 	ldr	ip, [pc, #152]	; 22f4 <prog+0x2190>
    2258:	e59f3098 	ldr	r3, [pc, #152]	; 22f8 <prog+0x2194>
    225c:	e1a02422 	mov	r2, r2, lsr #8
    2260:	e3822c03 	orr	r2, r2, #768	; 0x300
    2264:	e1a01801 	mov	r1, r1, lsl #16
    2268:	e14c3cb9 	strh	r3, [ip, #-201]
    226c:	e14c2cb9 	strh	r2, [ip, #-201]
    2270:	e1a01821 	mov	r1, r1, lsr #16
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    2274:	e1a00000 	nop			(mov r0,r0)
    2278:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_AR0IDLEa;	// WLD-transparent Wr-1, CS-inactive 		
	
	//WizWrR0 (IDM_AR1, (U8)(Addr));
	FIO1PINU  = W530_AR1a | LATCH_STRBa; // WLD Edge, Wr-0						
	FIO1PINU  = (addr&0x00ff) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    227c:	e20000ff 	and	r0, r0, #255	; 0xff
    2280:	e3800c03 	orr	r0, r0, #768	; 0x300
    2284:	e3a020ba 	mov	r2, #186	; 0xba
    2288:	e2833001 	add	r3, r3, #1	; 0x1
    228c:	e14c2cb9 	strh	r2, [ip, #-201]
    2290:	e14c3cb9 	strh	r3, [ip, #-201]
    2294:	e14c0cb9 	strh	r0, [ip, #-201]
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    2298:	e1a00000 	nop			(mov r0,r0)
    229c:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_AR1IDLEa;	// WLD-transparent Wr-1, CS-inactive 		
    22a0:	e3a020bb 	mov	r2, #187	; 0xbb
	
	//WizWrR0 (IDM_DR0, (U8)(val>>8));
	FIO1PINU  = W530_DR0a | LATCH_STRBa; // WLD Edge, Wr-0						
	FIO1PINU  = ((data&0xff00)>>8) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    22a4:	e1a03421 	mov	r3, r1, lsr #8
    22a8:	e14c2cb9 	strh	r2, [ip, #-201]
    22ac:	e3833c03 	orr	r3, r3, #768	; 0x300
    22b0:	e3a02f6d 	mov	r2, #436	; 0x1b4
    22b4:	e14c2cb9 	strh	r2, [ip, #-201]
    22b8:	e14c3cb9 	strh	r3, [ip, #-201]
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    22bc:	e1a00000 	nop			(mov r0,r0)
    22c0:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_DR0IDLEa;	// WLD-transparent Wr-1, CS-inactive 			
    22c4:	e3a030bc 	mov	r3, #188	; 0xbc
    22c8:	e14c3cb9 	strh	r3, [ip, #-201]
	
	//WizWrR1 (IDM_DR1, (U8)(val));
	FIO1PINU  = W530_DR1a | LATCH_STRBa; // WLD Edge, Wr-0						
	FIO1PINU  = (data&0x00ff) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    22cc:	e20110ff 	and	r1, r1, #255	; 0xff
    22d0:	e59f3024 	ldr	r3, [pc, #36]	; 22fc <prog+0x2198>
    22d4:	e3811c03 	orr	r1, r1, #768	; 0x300
    22d8:	e14c3cb9 	strh	r3, [ip, #-201]
    22dc:	e14c1cb9 	strh	r1, [ip, #-201]
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    22e0:	e1a00000 	nop			(mov r0,r0)
    22e4:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_DR1IDLEa; // WLD-transparent Wr-1, CS-inactive 
    22e8:	e3a020bd 	mov	r2, #189	; 0xbd
    22ec:	e14c2cb9 	strh	r2, [ip, #-201]
		
  //IINCHIP_CRITICAL_SECTION_EXIT();

}
    22f0:	e12fff1e 	bx	lr
    22f4:	3fffc0ff 	svccc	0x00ffc0ff
    22f8:	000001b2 	streqh	r0, [r0], -r2
    22fc:	000001b5 	streqh	r0, [r0], -r5

00002300 <wiz_write_buf>:


uint32   wiz_write_buf(SOCKET s, uint8* buf, uint32 len)
{
    2300:	e1a00300 	mov	r0, r0, lsl #6
  uint32 idx=0;
  uint16 addr;
  uint8	 data;
  int	tcnt;
  
  //IINCHIP_CRITICAL_SECTION_ENTER();
  
  addr = Sn_TX_FIFOR(s);
    2304:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    2308:	e2800f8b 	add	r0, r0, #556	; 0x22c
    230c:	e2800002 	add	r0, r0, #2	; 0x2
    2310:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
  
  //WizWrR0 (IDM_AR0, (U8)(Addr>>8));
	FIO1PINU  = W530_AR0a | LATCH_STRBa; // WLD Edge, Wr-0				
	FIO1PINU  = ((addr&0xff00)>>8) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    2314:	e1a03420 	mov	r3, r0, lsr #8
    2318:	e59fe144 	ldr	lr, [pc, #324]	; 2464 <prog+0x2300>
    231c:	e59fc144 	ldr	ip, [pc, #324]	; 2468 <prog+0x2304>
    2320:	e3833c03 	orr	r3, r3, #768	; 0x300
    2324:	e14eccb9 	strh	ip, [lr, #-201]
    2328:	e1a04002 	mov	r4, r2
    232c:	e14e3cb9 	strh	r3, [lr, #-201]
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    2330:	e1a00000 	nop			(mov r0,r0)
    2334:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_AR0IDLEa;	// WLD-transparent Wr-1, CS-inactive 	
	
	//WizWrR0 (IDM_AR1, (U8)(Addr));
	FIO1PINU  = W530_AR1a | LATCH_STRBa; // WLD Edge, Wr-0						
    2338:	e59f312c 	ldr	r3, [pc, #300]	; 246c <prog+0x2308>
	FIO1PINU  = (addr&0x00ff) | WIZ_CSa | LATCH_STRBa;; // CS-active, WLD-locked
    233c:	e20000ff 	and	r0, r0, #255	; 0xff
    2340:	e3800c03 	orr	r0, r0, #768	; 0x300
    2344:	e3a020ba 	mov	r2, #186	; 0xba
    2348:	e14e2cb9 	strh	r2, [lr, #-201]
    234c:	e14e3cb9 	strh	r3, [lr, #-201]
    2350:	e14e0cb9 	strh	r0, [lr, #-201]
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    2354:	e1a00000 	nop			(mov r0,r0)
    2358:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_AR1IDLEa;	// WLD-transparent Wr-1, CS-inactive 		
    235c:	e3a030bb 	mov	r3, #187	; 0xbb
  
  idx = 0;
  data = *(buf+idx);
	// For speed purpose write linear block 4-byte long
	if ( len > 4 )	{
    2360:	e3540004 	cmp	r4, #4	; 0x4
    2364:	e14e3cb9 	strh	r3, [lr, #-201]
		tcnt = len >> 2;	// len/4
    2368:	81a05124 	movhi	r5, r4, lsr #2
    236c:	e5d1e000 	ldrb	lr, [r1]
    2370:	93a0c000 	movls	ip, #0	; 0x0
    2374:	81a02005 	movhi	r2, r5
    2378:	81a0c001 	movhi	ip, r1
    237c:	8a00001a 	bhi	23ec <wiz_write_buf+0xec>
    2380:	ea000020 	b	2408 <wiz_write_buf+0x108>
	  while ( tcnt>0 ) {
			//WizWrR0 (IDM_DR0, (U8)(data>>8));
			FIO1PINU  = W530_DR0a | LATCH_STRBa; // WLD Edge, Wr-0						
    2384:	e3a0ef6d 	mov	lr, #436	; 0x1b4
    2388:	e140ecb9 	strh	lr, [r0, #-201]
			FIO1PINU  =  data | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    238c:	e1403cb9 	strh	r3, [r0, #-201]
			idx++;
			data = *(buf+idx);
			FIO1PINU  = W530_DR0IDLEa;	// WLD-transparent Wr-1, CS-inactive
    2390:	e3a030bc 	mov	r3, #188	; 0xbc
    2394:	e1403cb9 	strh	r3, [r0, #-201]
		
			//WizWrR1 (IDM_DR1, (U8)(data));
			FIO1PINU  = W530_DR1a | LATCH_STRBa; // WLD Edge, Wr-0						
    2398:	e1406cb9 	strh	r6, [r0, #-201]
			FIO1PINU  = data | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    239c:	e5dc3001 	ldrb	r3, [ip, #1]
    23a0:	e3833c03 	orr	r3, r3, #768	; 0x300
    23a4:	e1403cb9 	strh	r3, [r0, #-201]
			idx++;
			data = *(buf+idx);
			FIO1PINU  = W530_DR1IDLEa; // WLD-transparent Wr-1, CS-inactive 
    23a8:	e3a0e0bd 	mov	lr, #189	; 0xbd
				
			//WizWrR0 (IDM_DR0, (U8)(data>>8));
			FIO1PINU  = W530_DR0a | LATCH_STRBa; // WLD Edge, Wr-0						
    23ac:	e3a03f6d 	mov	r3, #436	; 0x1b4
    23b0:	e140ecb9 	strh	lr, [r0, #-201]
    23b4:	e1403cb9 	strh	r3, [r0, #-201]
			FIO1PINU  =  data | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    23b8:	e5dc3002 	ldrb	r3, [ip, #2]
			idx++;
			data = *(buf+idx);
			FIO1PINU  = W530_DR0IDLEa;	// WLD-transparent Wr-1, CS-inactive
    23bc:	e3a0e0bc 	mov	lr, #188	; 0xbc
    23c0:	e3833c03 	orr	r3, r3, #768	; 0x300
    23c4:	e1403cb9 	strh	r3, [r0, #-201]
    23c8:	e140ecb9 	strh	lr, [r0, #-201]
		
			//WizWrR1 (IDM_DR1, (U8)(data));
			FIO1PINU  = W530_DR1a | LATCH_STRBa; // WLD Edge, Wr-0						
    23cc:	e1406cb9 	strh	r6, [r0, #-201]
			FIO1PINU  = data | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    23d0:	e5dc3003 	ldrb	r3, [ip, #3]
    23d4:	e3833c03 	orr	r3, r3, #768	; 0x300
    23d8:	e1403cb9 	strh	r3, [r0, #-201]
			idx++;
			data = *(buf+idx);
			FIO1PINU  = W530_DR1IDLEa; // WLD-transparent Wr-1, CS-inactive 
    23dc:	e3a030bd 	mov	r3, #189	; 0xbd
    23e0:	e5fce004 	ldrb	lr, [ip, #4]!
    23e4:	e1403cb9 	strh	r3, [r0, #-201]
			
			tcnt--;	
    23e8:	e2422001 	sub	r2, r2, #1	; 0x1
    23ec:	e3520000 	cmp	r2, #0	; 0x0
    23f0:	e59f006c 	ldr	r0, [pc, #108]	; 2464 <prog+0x2300>
    23f4:	e59f6074 	ldr	r6, [pc, #116]	; 2470 <prog+0x230c>
    23f8:	e38e3c03 	orr	r3, lr, #768	; 0x300
    23fc:	caffffe0 	bgt	2384 <wiz_write_buf+0x84>
    2400:	e0623005 	rsb	r3, r2, r5
    2404:	e1a0c103 	mov	ip, r3, lsl #2
    2408:	e081100c 	add	r1, r1, ip
    240c:	ea00000c 	b	2444 <wiz_write_buf+0x144>
		}
	}
  
  while ( idx < len ) {
		//WizWrR0 (IDM_DR0, (U8)(data>>8));
		FIO1PINU  = W530_DR0a | LATCH_STRBa; // WLD Edge, Wr-0						
    2410:	e3a0ef6d 	mov	lr, #436	; 0x1b4
    2414:	e140ecb9 	strh	lr, [r0, #-201]
		FIO1PINU  =  data | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    2418:	e1403cb9 	strh	r3, [r0, #-201]
		idx++;
		data = *(buf+idx);
		FIO1PINU  = W530_DR0IDLEa;	// WLD-transparent Wr-1, CS-inactive
		
		//WizWrR1 (IDM_DR1, (U8)(data));
		FIO1PINU  = W530_DR1a | LATCH_STRBa; // WLD Edge, Wr-0						
    241c:	e59f304c 	ldr	r3, [pc, #76]	; 2470 <prog+0x230c>
    2420:	e3a020bc 	mov	r2, #188	; 0xbc
    2424:	e1402cb9 	strh	r2, [r0, #-201]
    2428:	e1403cb9 	strh	r3, [r0, #-201]
		FIO1PINU  = data | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    242c:	e5d13001 	ldrb	r3, [r1, #1]
    2430:	e3833c03 	orr	r3, r3, #768	; 0x300
    2434:	e1403cb9 	strh	r3, [r0, #-201]
		idx++;
		data = *(buf+idx);
		FIO1PINU  = W530_DR1IDLEa; // WLD-transparent Wr-1, CS-inactive 	
    2438:	e3a030bd 	mov	r3, #189	; 0xbd
    243c:	e5f1e002 	ldrb	lr, [r1, #2]!
    2440:	e1403cb9 	strh	r3, [r0, #-201]
    2444:	e15c0004 	cmp	ip, r4
    2448:	e59f0014 	ldr	r0, [pc, #20]	; 2464 <prog+0x2300>
    244c:	e38e3c03 	orr	r3, lr, #768	; 0x300
    2450:	e28cc002 	add	ip, ip, #2	; 0x2
    2454:	3affffed 	bcc	2410 <wiz_write_buf+0x110>
	}
  //IINCHIP_CRITICAL_SECTION_EXIT();
	
  return len;   

}
    2458:	e1a00004 	mov	r0, r4
    245c:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    2460:	e12fff1e 	bx	lr
    2464:	3fffc0ff 	svccc	0x00ffc0ff
    2468:	000001b2 	streqh	r0, [r0], -r2
    246c:	000001b3 	streqh	r0, [r0], -r3
    2470:	000001b5 	streqh	r0, [r0], -r5

00002474 <wiz_read_buf>:


uint32   wiz_read_buf(SOCKET s, uint8* buf, uint32 len)
{
    2474:	e1a00300 	mov	r0, r0, lsl #6
  uint32 idx=0;
  uint16 addr;
  int	tcnt;
  
  addr = Sn_RX_FIFOR(s);		// Socket(s) RX_FIFO_REG addr
    2478:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    247c:	e2800e23 	add	r0, r0, #560	; 0x230
    2480:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  
  //WizWrR0 (IDM_AR0, (U8)(Addr>>8));
	FIO1PINU  = W530_AR0a | LATCH_STRBa; // WLD Edge, Wr-0				
	FIO1PINU  = ((addr&0xff00)>>8) | WIZ_CSa | LATCH_STRBa; // CS-active, WLD-locked
    2484:	e1a03420 	mov	r3, r0, lsr #8
    2488:	e59fe2b4 	ldr	lr, [pc, #692]	; 2744 <prog+0x25e0>
    248c:	e59fc2b4 	ldr	ip, [pc, #692]	; 2748 <prog+0x25e4>
    2490:	e3833c03 	orr	r3, r3, #768	; 0x300
    2494:	e14eccb9 	strh	ip, [lr, #-201]
    2498:	e1a09001 	mov	r9, r1
    249c:	e14e3cb9 	strh	r3, [lr, #-201]
    24a0:	e1a08002 	mov	r8, r2
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    24a4:	e1a00000 	nop			(mov r0,r0)
    24a8:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_AR0IDLEa;	// WLD-transparent Wr-1, CS-inactive 	
    24ac:	e3a030ba 	mov	r3, #186	; 0xba
    24b0:	e14e3cb9 	strh	r3, [lr, #-201]
	
	//WizWrR0 (IDM_AR1, (U8)(Addr));
	FIO1PINU  = W530_AR1a | LATCH_STRBa; // WLD Edge, Wr-0						
	FIO1PINU  = (addr&0x00ff) | WIZ_CSa | LATCH_STRBa;; // CS-active, WLD-locked
    24b4:	e20000ff 	and	r0, r0, #255	; 0xff
    24b8:	e59f328c 	ldr	r3, [pc, #652]	; 274c <prog+0x25e8>
    24bc:	e3800c03 	orr	r0, r0, #768	; 0x300
    24c0:	e14e3cb9 	strh	r3, [lr, #-201]
    24c4:	e14e0cb9 	strh	r0, [lr, #-201]
	// 2 NOPs here assures min 50ns CS (with LPC2148 run on 60MHz)
	NOP_2					
    24c8:	e1a00000 	nop			(mov r0,r0)
    24cc:	e1a00000 	nop			(mov r0,r0)
	FIO1PINU  = W530_AR1IDLEa;	// WLD-transparent Wr-1, CS-inactive 
	
	idx = 0;
	// For speed purpose read linear block 8-byte long
	if ( len > 8 )	{
    24d0:	e3520008 	cmp	r2, #8	; 0x8
    24d4:	e3a030bb 	mov	r3, #187	; 0xbb
		tcnt = len >> 3;	// len/8
    24d8:	81a0a1a2 	movhi	sl, r2, lsr #3
    24dc:	e14e3cb9 	strh	r3, [lr, #-201]
    24e0:	81a0700a 	movhi	r7, sl
    24e4:	93a0e000 	movls	lr, #0	; 0x0
    24e8:	81a04001 	movhi	r4, r1
    24ec:	8a000065 	bhi	2688 <wiz_read_buf+0x214>
    24f0:	ea00006b 	b	26a4 <wiz_read_buf+0x230>
	  while ( tcnt>0 ) {
   		//WizRdR0 (IDM_DR0, (U8)(val>>8));
			FIO1PINU  = R530_DR0a | LATCH_STRBa;	// WLD Edge, Rd-0	
    24f4:	e3a03f6b 	mov	r3, #428	; 0x1ac
    24f8:	e14e3cb9 	strh	r3, [lr, #-201]
  		FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    24fc:	e54e50dd 	strb	r5, [lr, #-221]
			FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    2500:	e54e60c8 	strb	r6, [lr, #-200]
			NOP_3					// Must be 3 NOPs here
    2504:	e1a00000 	nop			(mov r0,r0)
    2508:	e1a00000 	nop			(mov r0,r0)
    250c:	e1a00000 	nop			(mov r0,r0)
			*((uint8*)(buf+idx)) = FIO1PIN2;
    2510:	e55e30c9 	ldrb	r3, [lr, #-201]
		
			FIO1PINU  = R530_DR0IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
	  	FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
	  	FIO1CLR3 = LATCH_STRBb;
		
			//WizRdR1 (IDM_DR1, (U8)(val));
			FIO1PINU  = R530_DR1a | LATCH_STRBa;	// WLD Edge, Rd-0
    2514:	e59fc234 	ldr	ip, [pc, #564]	; 2750 <prog+0x25ec>
    2518:	e5c43000 	strb	r3, [r4]
    251c:	e3e02000 	mvn	r2, #0	; 0x0
    2520:	e3a01001 	mov	r1, #1	; 0x1
    2524:	e3a03f6f 	mov	r3, #444	; 0x1bc
    2528:	e14e3cb9 	strh	r3, [lr, #-201]
    252c:	e54e20dd 	strb	r2, [lr, #-221]
    2530:	e54e10c0 	strb	r1, [lr, #-192]
    2534:	e14eccb9 	strh	ip, [lr, #-201]
  		FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    2538:	e54e50dd 	strb	r5, [lr, #-221]
			FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    253c:	e54e60c8 	strb	r6, [lr, #-200]
			NOP_3					// Must be 3 NOPs here
    2540:	e1a00000 	nop			(mov r0,r0)
    2544:	e1a00000 	nop			(mov r0,r0)
    2548:	e1a00000 	nop			(mov r0,r0)
			*((uint8*)(buf+idx+1)) = FIO1PIN2;
    254c:	e55e30c9 	ldrb	r3, [lr, #-201]
		
			FIO1PINU  = R530_DR1IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    2550:	e59f01fc 	ldr	r0, [pc, #508]	; 2754 <prog+0x25f0>
    2554:	e5c43001 	strb	r3, [r4, #1]
	  	FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
	  	FIO1CLR3 = LATCH_STRBb;

   		//WizRdR0 (IDM_DR0, (U8)(val>>8));
			FIO1PINU  = R530_DR0a | LATCH_STRBa;	// WLD Edge, Rd-0	
    2558:	e3a03f6b 	mov	r3, #428	; 0x1ac
    255c:	e14e0cb9 	strh	r0, [lr, #-201]
    2560:	e54e20dd 	strb	r2, [lr, #-221]
    2564:	e54e10c0 	strb	r1, [lr, #-192]
    2568:	e14e3cb9 	strh	r3, [lr, #-201]
  		FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    256c:	e54e50dd 	strb	r5, [lr, #-221]
			FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    2570:	e54e60c8 	strb	r6, [lr, #-200]
			NOP_3					// Must be 3 NOPs here
    2574:	e1a00000 	nop			(mov r0,r0)
    2578:	e1a00000 	nop			(mov r0,r0)
    257c:	e1a00000 	nop			(mov r0,r0)
			*((uint8*)(buf+idx+2)) = FIO1PIN2;
    2580:	e55e30c9 	ldrb	r3, [lr, #-201]
    2584:	e5c43002 	strb	r3, [r4, #2]
		
			FIO1PINU  = R530_DR0IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    2588:	e3a03f6f 	mov	r3, #444	; 0x1bc
    258c:	e14e3cb9 	strh	r3, [lr, #-201]
	  	FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
    2590:	e54e20dd 	strb	r2, [lr, #-221]
	  	FIO1CLR3 = LATCH_STRBb;
    2594:	e54e10c0 	strb	r1, [lr, #-192]
		
			//WizRdR1 (IDM_DR1, (U8)(val));
			FIO1PINU  = R530_DR1a | LATCH_STRBa;	// WLD Edge, Rd-0
    2598:	e14eccb9 	strh	ip, [lr, #-201]
  		FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    259c:	e54e50dd 	strb	r5, [lr, #-221]
			FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    25a0:	e54e60c8 	strb	r6, [lr, #-200]
			NOP_3					// Must be 3 NOPs here
    25a4:	e1a00000 	nop			(mov r0,r0)
    25a8:	e1a00000 	nop			(mov r0,r0)
    25ac:	e1a00000 	nop			(mov r0,r0)
			*((uint8*)(buf+idx+3)) = FIO1PIN2;
    25b0:	e55e30c9 	ldrb	r3, [lr, #-201]
    25b4:	e5c43003 	strb	r3, [r4, #3]
		
			FIO1PINU  = R530_DR1IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
	  	FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
	  	FIO1CLR3 = LATCH_STRBb;
	  	
   		//WizRdR0 (IDM_DR0, (U8)(val>>8));
			FIO1PINU  = R530_DR0a | LATCH_STRBa;	// WLD Edge, Rd-0	
    25b8:	e3a03f6b 	mov	r3, #428	; 0x1ac
    25bc:	e14e0cb9 	strh	r0, [lr, #-201]
    25c0:	e54e20dd 	strb	r2, [lr, #-221]
    25c4:	e54e10c0 	strb	r1, [lr, #-192]
    25c8:	e14e3cb9 	strh	r3, [lr, #-201]
  		FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    25cc:	e54e50dd 	strb	r5, [lr, #-221]
			FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    25d0:	e54e60c8 	strb	r6, [lr, #-200]
			NOP_3					// Must be 3 NOPs here
    25d4:	e1a00000 	nop			(mov r0,r0)
    25d8:	e1a00000 	nop			(mov r0,r0)
    25dc:	e1a00000 	nop			(mov r0,r0)
			//asm volatile ("nop");
			*((uint8*)(buf+idx+4)) = FIO1PIN2;
    25e0:	e55e30c9 	ldrb	r3, [lr, #-201]
    25e4:	e5c43004 	strb	r3, [r4, #4]
		
			FIO1PINU  = R530_DR0IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    25e8:	e3a03f6f 	mov	r3, #444	; 0x1bc
    25ec:	e14e3cb9 	strh	r3, [lr, #-201]
	  	FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
    25f0:	e54e20dd 	strb	r2, [lr, #-221]
	  	FIO1CLR3 = LATCH_STRBb;
    25f4:	e54e10c0 	strb	r1, [lr, #-192]
		
			//WizRdR1 (IDM_DR1, (U8)(val));
			FIO1PINU  = R530_DR1a | LATCH_STRBa;	// WLD Edge, Rd-0
    25f8:	e14eccb9 	strh	ip, [lr, #-201]
  		FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    25fc:	e54e50dd 	strb	r5, [lr, #-221]
			FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    2600:	e54e60c8 	strb	r6, [lr, #-200]
			NOP_3					// Must be 3 NOPs here
    2604:	e1a00000 	nop			(mov r0,r0)
    2608:	e1a00000 	nop			(mov r0,r0)
    260c:	e1a00000 	nop			(mov r0,r0)
			*((uint8*)(buf+idx+5)) = FIO1PIN2;
    2610:	e55e30c9 	ldrb	r3, [lr, #-201]
    2614:	e5c43005 	strb	r3, [r4, #5]
		
			FIO1PINU  = R530_DR1IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
	  	FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
	  	FIO1CLR3 = LATCH_STRBb;

   		//WizRdR0 (IDM_DR0, (U8)(val>>8));
			FIO1PINU  = R530_DR0a | LATCH_STRBa;	// WLD Edge, Rd-0	
    2618:	e3a03f6b 	mov	r3, #428	; 0x1ac
    261c:	e14e0cb9 	strh	r0, [lr, #-201]
    2620:	e54e20dd 	strb	r2, [lr, #-221]
    2624:	e54e10c0 	strb	r1, [lr, #-192]
    2628:	e14e3cb9 	strh	r3, [lr, #-201]
  		FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    262c:	e54e50dd 	strb	r5, [lr, #-221]
			FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    2630:	e54e60c8 	strb	r6, [lr, #-200]
			NOP_3					// Must be 3 NOPs here
    2634:	e1a00000 	nop			(mov r0,r0)
    2638:	e1a00000 	nop			(mov r0,r0)
    263c:	e1a00000 	nop			(mov r0,r0)
			*((uint8*)(buf+idx+6)) = FIO1PIN2;
    2640:	e55e30c9 	ldrb	r3, [lr, #-201]
    2644:	e5c43006 	strb	r3, [r4, #6]
		
			FIO1PINU  = R530_DR0IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    2648:	e3a03f6f 	mov	r3, #444	; 0x1bc
    264c:	e14e3cb9 	strh	r3, [lr, #-201]
	  	FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
    2650:	e54e20dd 	strb	r2, [lr, #-221]
	  	FIO1CLR3 = LATCH_STRBb;
    2654:	e54e10c0 	strb	r1, [lr, #-192]
		
			//WizRdR1 (IDM_DR1, (U8)(val));
			FIO1PINU  = R530_DR1a | LATCH_STRBa;	// WLD Edge, Rd-0
    2658:	e14eccb9 	strh	ip, [lr, #-201]
  		FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    265c:	e54e50dd 	strb	r5, [lr, #-221]
			FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    2660:	e54e60c8 	strb	r6, [lr, #-200]
			asm volatile ("nop");			// Must be 3 instrustions here
    2664:	e1a00000 	nop			(mov r0,r0)
			tcnt--;
    2668:	e0877002 	add	r7, r7, r2
			asm volatile ("nop");
    266c:	e1a00000 	nop			(mov r0,r0)
			*((uint8*)(buf+idx+7)) = FIO1PIN2;
    2670:	e55e30c9 	ldrb	r3, [lr, #-201]
    2674:	e5c43007 	strb	r3, [r4, #7]
		
			FIO1PINU  = R530_DR1IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    2678:	e14e0cb9 	strh	r0, [lr, #-201]
	  	FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
    267c:	e54e20dd 	strb	r2, [lr, #-221]
	  	FIO1CLR3 = LATCH_STRBb;
    2680:	e54e10c0 	strb	r1, [lr, #-192]
    2684:	e2844008 	add	r4, r4, #8	; 0x8
    2688:	e3a05000 	mov	r5, #0	; 0x0
    268c:	e1570005 	cmp	r7, r5
    2690:	e59fe0ac 	ldr	lr, [pc, #172]	; 2744 <prog+0x25e0>
    2694:	e3a06003 	mov	r6, #3	; 0x3
    2698:	caffff95 	bgt	24f4 <wiz_read_buf+0x80>
    269c:	e067300a 	rsb	r3, r7, sl
    26a0:	e1a0e613 	mov	lr, r3, lsl r6
    26a4:	e089c00e 	add	ip, r9, lr
    26a8:	ea00001d 	b	2724 <wiz_read_buf+0x2b0>
	  	
			idx += 8;

		}
	}

  while ( idx < len ) {
   	//WizRdR0 (IDM_DR0, (U8)(val>>8));
		FIO1PINU  = R530_DR0a | LATCH_STRBa;	// WLD Edge, Rd-0	
    26ac:	e3a03f6b 	mov	r3, #428	; 0x1ac
    26b0:	e1403cb9 	strh	r3, [r0, #-201]
  	FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    26b4:	e54040dd 	strb	r4, [r0, #-221]
		FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    26b8:	e54050c8 	strb	r5, [r0, #-200]
		NOP_3					// Must be 3 NOPs here
    26bc:	e1a00000 	nop			(mov r0,r0)
    26c0:	e1a00000 	nop			(mov r0,r0)
    26c4:	e1a00000 	nop			(mov r0,r0)
		*((uint8*)(buf+idx)) = FIO1PIN2;
    26c8:	e55030c9 	ldrb	r3, [r0, #-201]
    26cc:	e5cc3000 	strb	r3, [ip]
		
		FIO1PINU  = R530_DR0IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    26d0:	e3a03f6f 	mov	r3, #444	; 0x1bc
    26d4:	e1403cb9 	strh	r3, [r0, #-201]
	  FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
	  FIO1CLR3 = LATCH_STRBb;
  	idx++;
		
		//WizRdR1 (IDM_DR1, (U8)(val));
		FIO1PINU  = R530_DR1a | LATCH_STRBa;	// WLD Edge, Rd-0
    26d8:	e59f3070 	ldr	r3, [pc, #112]	; 2750 <prog+0x25ec>
    26dc:	e3e02000 	mvn	r2, #0	; 0x0
    26e0:	e3a01001 	mov	r1, #1	; 0x1
    26e4:	e54020dd 	strb	r2, [r0, #-221]
    26e8:	e54010c0 	strb	r1, [r0, #-192]
    26ec:	e1403cb9 	strh	r3, [r0, #-201]
  	FIO1DIR2  = 0x00;				// P1.16 .. P1.23 Input
    26f0:	e54040dd 	strb	r4, [r0, #-221]
		FIO1PIN3  = WIZ_CSb | LATCH_STRBb; // CS-active, WLD-locked
    26f4:	e54050c8 	strb	r5, [r0, #-200]
		NOP_3					// Must be 3 NOPs here
    26f8:	e1a00000 	nop			(mov r0,r0)
    26fc:	e1a00000 	nop			(mov r0,r0)
    2700:	e1a00000 	nop			(mov r0,r0)
		*((uint8*)(buf+idx)) = FIO1PIN2;
    2704:	e55030c9 	ldrb	r3, [r0, #-201]
    2708:	e5cc3001 	strb	r3, [ip, #1]
		
		FIO1PINU  = R530_DR1IDLEa | LATCH_STRBa;	// WLD-transparent Rd-1, CS-inactive 		
    270c:	e59f3040 	ldr	r3, [pc, #64]	; 2754 <prog+0x25f0>
    2710:	e1403cb9 	strh	r3, [r0, #-201]
	  FIO1DIR2  = 0xFF;				// P1.16 .. P1.23 Output
    2714:	e54020dd 	strb	r2, [r0, #-221]
	  FIO1CLR3 = LATCH_STRBb;
    2718:	e54010c0 	strb	r1, [r0, #-192]
    271c:	e28ee002 	add	lr, lr, #2	; 0x2
    2720:	e28cc002 	add	ip, ip, #2	; 0x2
    2724:	e15e0008 	cmp	lr, r8
    2728:	e59f0014 	ldr	r0, [pc, #20]	; 2744 <prog+0x25e0>
    272c:	e3a04000 	mov	r4, #0	; 0x0
    2730:	e3a05003 	mov	r5, #3	; 0x3
    2734:	3affffdc 	bcc	26ac <wiz_read_buf+0x238>
  	idx++;
	}	
			
  //IINCHIP_CRITICAL_SECTION_EXIT();
	
  return len;
}
    2738:	e1a00008 	mov	r0, r8
    273c:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2740:	e12fff1e 	bx	lr
    2744:	3fffc0ff 	svccc	0x00ffc0ff
    2748:	000001b2 	streqh	r0, [r0], -r2
    274c:	000001b3 	streqh	r0, [r0], -r3
    2750:	000001ad 	andeq	r0, r0, sp, lsr #3
    2754:	000001bd 	streqh	r0, [r0], -sp

00002758 <Rd5300_bl>:

void W5300PwrOn(void)
{
  FIO1PIN    = WIZ_ON|WIZ_RD|WIZ_WR|WIZ_RES;		// WizOn=1, LATCH=0, CS=0, Rd=1, Wr=1, /RES=1
  delay(2000000);
  
  // Activate WIZ_RESET
	FIO1CLR    = WIZ_RES;	  
  delay(50);
	FIO1SET    = WIZ_RES;	  
  delay(200000);
}

void W5300PwrOff(void)
{
	// Set all W5300 signals at "0"
  FIO1CLR3 = LATCH_STRBb;			// Latch Transparent
  delay(100);
  FIO1CLR  = WIZ_A0|WIZ_A1|WIZ_A2|WIZ_RD|WIZ_WR|WIZ_RES;
  delay(100);
  FIO1SET3 = WIZ_CSb;
  delay(100);
  
	FIO1CLR  = WIZ_ON;		// WizOn=0
  delay(100);
}

void W5300Init2(void)
{
	int i;
	
  CRdyMax = 0;
  
	for (i = 0; i < MAX_SOCK_NUM; i++) {
		// Enable	only SENDOK & TIMEOUT Ints
		setSn_IMR(i, 0x10);
		
		ssrErr[i] = 0;
		EstbPhase[i] = 0;
	}	
}

int Rd5300_bl(uint16 addr, uint8* buf, int len)
{
    2758:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    275c:	e1a00800 	mov	r0, r0, lsl #16
    2760:	e1a08001 	mov	r8, r1
    2764:	e1a07002 	mov	r7, r2
    2768:	e1a04820 	mov	r4, r0, lsr #16
    276c:	e1a05001 	mov	r5, r1
    2770:	e3a06000 	mov	r6, #0	; 0x0
    2774:	ea000007 	b	2798 <Rd5300_bl+0x40>
  int idx = 0;
  uint16 v;

  for (idx = 0; idx < len; idx++ ) {
	  v = IINCHIP_READ( addr );
    2778:	ebfffe7b 	bl	216c <IINCHIP_READ>
	  *((uint8*)(buf+idx)) = (v&0xff00)>>8;
	  idx++;
		*((uint8*)(buf+idx)) = v&0xff;
  	addr += 2;
    277c:	e2842002 	add	r2, r4, #2	; 0x2
    2780:	e1a03420 	mov	r3, r0, lsr #8
    2784:	e7c63008 	strb	r3, [r6, r8]
    2788:	e1a02802 	mov	r2, r2, lsl #16
    278c:	e5450001 	strb	r0, [r5, #-1]
    2790:	e1a04822 	mov	r4, r2, lsr #16
    2794:	e2866002 	add	r6, r6, #2	; 0x2
    2798:	e1560007 	cmp	r6, r7
    279c:	e1a00004 	mov	r0, r4
    27a0:	e2855002 	add	r5, r5, #2	; 0x2
    27a4:	bafffff3 	blt	2778 <Rd5300_bl+0x20>
	}
	return len;
}
    27a8:	e1a00007 	mov	r0, r7
    27ac:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    27b0:	e12fff1e 	bx	lr

000027b4 <W5300Init2>:
    27b4:	e59f3040 	ldr	r3, [pc, #64]	; 27fc <prog+0x2698>
    27b8:	e3a02000 	mov	r2, #0	; 0x0
    27bc:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    27c0:	e5832000 	str	r2, [r3]
    27c4:	e59f6034 	ldr	r6, [pc, #52]	; 2800 <prog+0x269c>
    27c8:	e59f5034 	ldr	r5, [pc, #52]	; 2804 <prog+0x26a0>
    27cc:	e1a04002 	mov	r4, r2
    27d0:	e1a00004 	mov	r0, r4
    27d4:	e3a01010 	mov	r1, #16	; 0x10
    27d8:	e2844001 	add	r4, r4, #1	; 0x1
    27dc:	eb000563 	bl	3d70 <setSn_IMR>
    27e0:	e3a03000 	mov	r3, #0	; 0x0
    27e4:	e3540008 	cmp	r4, #8	; 0x8
    27e8:	e4c53001 	strb	r3, [r5], #1
    27ec:	e4863004 	str	r3, [r6], #4
    27f0:	1afffff6 	bne	27d0 <W5300Init2+0x1c>
    27f4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    27f8:	e12fff1e 	bx	lr
    27fc:	400002c4 	andmi	r0, r0, r4, asr #5
    2800:	40001cf0 	strmid	r1, [r0], -r0
    2804:	40001474 	andmi	r1, r0, r4, ror r4

00002808 <W5300PwrOff>:
    2808:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    280c:	e59f4048 	ldr	r4, [pc, #72]	; 285c <prog+0x26f8>
    2810:	e3a03001 	mov	r3, #1	; 0x1
    2814:	e59f5044 	ldr	r5, [pc, #68]	; 2860 <prog+0x26fc>
    2818:	e54430c0 	strb	r3, [r4, #-192]
    281c:	e3a00064 	mov	r0, #100	; 0x64
    2820:	ebfffdac 	bl	1ed8 <delay>
    2824:	e3a0383f 	mov	r3, #4128768	; 0x3f0000
    2828:	e5053fc3 	str	r3, [r5, #-4035]
    282c:	e3a00064 	mov	r0, #100	; 0x64
    2830:	ebfffda8 	bl	1ed8 <delay>
    2834:	e3a03002 	mov	r3, #2	; 0x2
    2838:	e54430c4 	strb	r3, [r4, #-196]
    283c:	e3a00064 	mov	r0, #100	; 0x64
    2840:	ebfffda4 	bl	1ed8 <delay>
    2844:	e3a03502 	mov	r3, #8388608	; 0x800000
    2848:	e3a00064 	mov	r0, #100	; 0x64
    284c:	e5053fc3 	str	r3, [r5, #-4035]
    2850:	ebfffda0 	bl	1ed8 <delay>
    2854:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    2858:	e12fff1e 	bx	lr
    285c:	3fffc0ff 	svccc	0x00ffc0ff
    2860:	3fffcfff 	svccc	0x00ffcfff

00002864 <W5300PwrOn>:
    2864:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    2868:	e59f4030 	ldr	r4, [pc, #48]	; 28a0 <prog+0x273c>
    286c:	e3a0372e 	mov	r3, #12058624	; 0xb80000
    2870:	e5043fcb 	str	r3, [r4, #-4043]
    2874:	e3a05602 	mov	r5, #2097152	; 0x200000
    2878:	e59f0024 	ldr	r0, [pc, #36]	; 28a4 <prog+0x2740>
    287c:	ebfffd95 	bl	1ed8 <delay>
    2880:	e3a00032 	mov	r0, #50	; 0x32
    2884:	e5045fc3 	str	r5, [r4, #-4035]
    2888:	ebfffd92 	bl	1ed8 <delay>
    288c:	e59f0014 	ldr	r0, [pc, #20]	; 28a8 <prog+0x2744>
    2890:	e5045fc7 	str	r5, [r4, #-4039]
    2894:	ebfffd8f 	bl	1ed8 <delay>
    2898:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    289c:	e12fff1e 	bx	lr
    28a0:	3fffcfff 	svccc	0x00ffcfff
    28a4:	001e8480 	andeqs	r8, lr, r0, lsl #9
    28a8:	00030d40 	andeq	r0, r3, r0, asr #26

000028ac <iinchip_init>:
    28ac:	e52de004 	str	lr, [sp, #-4]!
    28b0:	e3a00080 	mov	r0, #128	; 0x80
    28b4:	ebfffde4 	bl	204c <setMR>
    28b8:	e59f000c 	ldr	r0, [pc, #12]	; 28cc <prog+0x2768>
    28bc:	ebfffd85 	bl	1ed8 <delay>
    28c0:	e3a00001 	mov	r0, #1	; 0x1
    28c4:	e49de004 	ldr	lr, [sp], #4
    28c8:	eafffddf 	b	204c <setMR>
    28cc:	001e8480 	andeqs	r8, lr, r0, lsl #9

000028d0 <ToUpper>:
}
	

uint8 ToUpper(uint8 ch)
{
    28d0:	e1a02000 	mov	r2, r0
    28d4:	e20000ff 	and	r0, r0, #255	; 0xff
	if ( (ch>='a')&&(ch<='z') )  ch = ch & (~040);
    28d8:	e2403061 	sub	r3, r0, #97	; 0x61
    28dc:	e3530019 	cmp	r3, #25	; 0x19
    28e0:	920200df 	andls	r0, r2, #223	; 0xdf
	return ch;
}
    28e4:	e12fff1e 	bx	lr

000028e8 <PrepDwnldData>:

int	CheckRequest(int len)
{
	int i, id;
	char* p;
	char tstr[12];
	char c;
	
	for ( i = 0; i < len; i++ ) {
		inBuf[i] = ToUpper( inBuf[i] );
	}
	
	//printf("\n\rinBuf - %s", inBuf);
	if ( memcmp(inBuf, "GET ", 4)==0 ) {
		if ( memcmp(&inBuf[4], "/ HTTP", 6)==0 ) {
			return 0;
		}
			
		p = memchr( &inBuf[5], '.', len);
		if ( p == NULL ) return -1;
		
		memcpy (tstr, p-7, 7);
		tstr[7] = '\0';
		printf("\n\rDOT: %s", tstr);
		
		if ( memcmp(&tstr[2], "INDEX", 5)==0 ) {
			return 0;
		}			
			
		if ( memcmp(&tstr[0], "FAVICON", 7)==0 ) {
			return 1;
		}
		if ( (hex2int(tstr[5])>=0)&&(hex2int(tstr[6])>=0) ) {
			id = (hex2int(tstr[5])*16) + hex2int(tstr[6]);
			if ( id > 85 ) id = -1;
			return id;
		}			
		
		return -1;
	} // End GET Request
	
	if ( memcmp(inBuf, "POST ", 5)==0 ) {
		//c = inBuf[11];
		//inBuf[11] = 0;
		//printf("\n\rPOST inBuf=%s", inBuf);
		//inBuf[11] = c;
		return POST_REQ;
	}
	
	return -1;
}

void socket_return(void)
{
	int sn;
	
	for (sn = 0; sn < MAX_SOCK_NUM; sn++) {	
		if ( getSn_SSR(sn) == SOCK_CLOSED ) {
			socket(sn,  Sn_MR_TCP, (uint16)httpPort, 0x00);
			listen(sn);
		}
	}
}


void http_serv_machine(void)
{
	uint16 v, ts;
	int idx, icnt, pi, hlen, len_done, snd_typ;
	//char tbuf[10];
	//char* p;
	
	v = getSn_SSR(cSoc);
	switch ( v ) {	// sock status
	case SOCK_CLOSED:
		socket(cSoc,  Sn_MR_TCP, (uint16)httpPort, 0x0020);	// No Delayed ACK Enabled
		break;
		
	case SOCK_INIT:
		//printf( "\n\r***SockInit_%d MR=%04x", cSoc, getSn_MR(cSoc) );	
		listen(cSoc);
		break;
		
	case SOCK_LISTEN:
		EstbPhase[cSoc] = ESTB_NONE;
		break;
		
	case SOCK_ESTABLISHED:	{
		int i, EndFlag;
		unsigned int t;
		switch (EstbPhase[cSoc]) {
		case ESTB_NONE :
			ts = getSn_RX_RSR(cSoc);
			if ( ts>30 ) {
				// data available in RecvFIFO
				uint16 n = getSn_RX_RSR(cSoc);
				if (n > IBUF_SIZE) n = IBUF_SIZE;
				icnt = recv(cSoc, &inBuf[0], n);
				
				pi = CheckRequest(icnt);
				//putchar('&');
				
				switch (pi) {
				case POST_REQ:
					// POST Service
					inBuf[icnt] = 0;
					idx = findstr((char*)inBuf, "\r\n\r\n");
					//printf("\n\r***POST len=%d recl=%d DATA Indx=%d \n\r", icnt, n, idx);
					if ( idx != -1 ) {
						//printf("\n\r**POST DATA: ");
						//for ( i = 0; i < 4; i++ ) printf("%c", inBuf[idx+4+i]);
						//printf("   ");	
						//for ( i = 0; i < 4; i++ ) printf("%02x ", inBuf[idx+4+i]);
						//printf("\n\r**End DATA: ");
						idx = icnt-4;
						//for ( i = 0; i < 4; i++ ) printf("%02x ", inBuf[idx+i]);
						if ( (inBuf[idx] == '-')&&(inBuf[idx+1] == '-')&&(inBuf[idx+2] == '\r')&&(inBuf[idx+3] == '\n') ) {
							hlen = PrepHeader( sizeof(uplOKmsg)-1, TEXT_TYPE );
							//printf("\n\r## Post End hlen=%d uplMsgLen=%d", hlen, (int)sizeof(uplOKmsg));
							if ( hlen > 0 ) {
								send1st_DS(cSoc, &outBuf[0], hlen);			//send file header
								EstbPhase[cSoc] = ESTB_TRX;
								SndType[cSoc] = STATIC;						
								SndBPtr[cSoc] = (uint8 *)(uplOKmsg);
								SndLen[cSoc] = sizeof(uplOKmsg)-1;
								EndFlag = 1;
							}
							break;
						} else {
							timer1Clear();
							EstbPhase[cSoc] = ESTB_RCVD;
							break;
						}
					} else	{
						// POST Error
						printf("\n\r *** POST Error *** ");
				
						//send_err400(cSoc);
						send1st_DS( cSoc, (uint8 *)HD_ERRX, (sizeof(HD_ERRX)-1) );
						disconnect(cSoc);
						EstbPhase[cSoc] = ESTB_NONE; 
						break;
					}
						
					break;

				case -1:
					// Request Error
					printf("\n\r ***** RequestError ***** ");
				
					//send_err400(cSoc);
					send1st_DS( cSoc, (uint8 *)HD_ERRX, (sizeof(HD_ERRX)-1) );
					disconnect(cSoc);
					EstbPhase[cSoc] = ESTB_NONE; 
					break;
				
				default:
					// GET Service
					p_ptr = (struct p_rec*)PAGE_INFO_ADDR;
					printf("   PHead:%d size-%x, type-%d", pi, (p_ptr+pi)->size, (p_ptr+pi)->type );
					if ( (p_ptr+pi)->type == 0xff ) {
						printf(" ***ERROR*** ");
						//send_err400(cSoc);
						send1st_DS( cSoc, (uint8 *)HD_ERRX, (sizeof(HD_ERRX)-1) );
						disconnect(cSoc);
						EstbPhase[cSoc] = ESTB_NONE; 
						break;
					}
					
					if ( (p_ptr+pi)->type == PHP_TYPE ) {	// GET PHP Request
						uint8 *	tp;
						uint8	php_id;
						unsigned int tmpl;
						
						tp = (uint8 *)((p_ptr+pi)->offset+PAGE_INFO_ADDR) + (p_ptr+pi)->size;
						printf("\n\r ** PHP indx=%d id=%02x ", pi, *tp );
						for ( i = 0; i < 5; i++ ) {
							tp++;	printf("%02x ", *tp );
						}
						
						tp = (uint8 *)((p_ptr+pi)->offset+PAGE_INFO_ADDR) + (p_ptr+pi)->size + 4;
						tmpl = (*tp)<<24;	tp++;	tmpl += (*tp)<<16;
						tp -=3;
						tmpl += (*tp)<<8;	tp++;	tmpl += *tp;
						tmpl = (tmpl+1)*2;
						printf(" Length=%08x ", tmpl );
						
						tp = (uint8 *)((p_ptr+pi)->offset+PAGE_INFO_ADDR) + (p_ptr+pi)->size;
						php_id = (int)*tp;
						switch (php_id) {
						case VOLTM :
							//send php header
							send1st_DS(cSoc, (uint8 *)(((p_ptr+pi)->offset)+PAGE_INFO_ADDR+2), (p_ptr+pi)->size-2);	
							
							EstbPhase[cSoc] = ESTB_TRX;
							SndLen[cSoc] = tmpl;
							SndType[cSoc] = php_id;
							break;

						case DOWNLOAD :
							//send php header
							send1st_DS(cSoc, (uint8 *)(((p_ptr+pi)->offset)+PAGE_INFO_ADDR+2), (p_ptr+pi)->size-2);	
							
							EstbPhase[cSoc] = ESTB_TRX;
							SndLen[cSoc] = tmpl;
							SndType[cSoc] = php_id;
							break;
							
						default:
							printf(" ***ERROR*** ");
							//send_err400(cSoc);
							send1st_DS( cSoc, (uint8 *)HD_ERRX, (sizeof(HD_ERRX)-1) );
							disconnect(cSoc);
							EstbPhase[cSoc] = ESTB_NONE; 
							break;
						} // End Switch php_id
						break;
					} // End GET PHP
					
					hlen = PrepHeader( (p_ptr+pi)->size, (p_ptr+pi)->type );
					if ( hlen > 0 ) {
						send1st_DS(cSoc, &outBuf[0], hlen);			//send file header
					
						EstbPhase[cSoc] = ESTB_TRX;
						SndType[cSoc] = STATIC;						
						SndBPtr[cSoc] = (uint8 *)((p_ptr+pi)->offset+PAGE_INFO_ADDR);
						SndLen[cSoc] = (p_ptr+pi)->size;
					}
					break;
				} // End Switch pi
			} // End data available in RecvFIFO
			break;
			
		case ESTB_RCVD :
			ts = getSn_RX_RSR(cSoc);
			EndFlag = 0;
			while ( ts>0 ) {
				// data available in RecvFIFO
				uint16 n = getSn_RX_RSR(cSoc);
				if (n > IBUF_SIZE) n = IBUF_SIZE;
				icnt = recv(cSoc, &inBuf[0], n);
				//LogWr(0x25); LogWr((uint16)icnt); LogWrTim();
				Snd0Flag = 0;
				idx = icnt-4;
				//printf("\n\r**End DATA: ");
				//for ( i = 0; i < 4; i++ ) printf("%02x ", inBuf[idx+i]);
				if ( (inBuf[idx] == '-')&&(inBuf[idx+1] == '-')&&(inBuf[idx+2] == '\r')&&(inBuf[idx+3] == '\n') ) {
					hlen = PrepHeader( sizeof(uplOKmsg)-1, TEXT_TYPE );
					//printf("\n\r## Post End hlen=%d uplMsgLen=%d", hlen, (int)sizeof(uplOKmsg));
					if ( hlen > 0 ) {
						send1st_DS(cSoc, &outBuf[0], hlen);			//send file header
					
						EstbPhase[cSoc] = ESTB_TRX;
						SndType[cSoc] = STATIC;						
						SndBPtr[cSoc] = (uint8 *)(uplOKmsg);
						SndLen[cSoc] = sizeof(uplOKmsg)-1;
						EndFlag = 1;
						break;
					}
				}
				ts = getSn_RX_RSR(cSoc);
			}
			if ( EndFlag > 0 )
				break;
				
			//Recv Empty
			if ( !Snd0Flag )	{
				setSn_TX_WRSR(cSoc, 2);
				IINCHIP_WRITE(Sn_TX_FIFOR(cSoc), 0x2020);
				setSn_CR(cSoc, Sn_CR_SEND);
				//t = getT1();
				//LogWr(0x24); 
				//LogWr( (uint16)((t&0xffff0000)>>16) ); 
				//LogWr( (uint16)(t&0xffff) ); 

				while( !(getSn_IR(cSoc) & Sn_IR_SENDOK) ) ;
				Snd0Flag = 1;
				setSn_IR(cSoc, Sn_IR_SENDOK);             // clear Sn_IR_SENDOK	
			}
			break;

		case ESTB_TRX :
			// send chunk of data body (TXWRMAX-max size)
			snd_typ = SndType[cSoc];
			switch (snd_typ) {
			case STATIC :
				len_done = send_DS(cSoc, (uint8 *)SndBPtr[cSoc], SndLen[cSoc]);
				SndBPtr[cSoc] += len_done;
				break;
				
			case VOLTM :
				UpdateVoltage();
				len_done = send_DS(cSoc, voltBuf, VOLT_LEN);
				break;
				
			case DOWNLOAD :
				PrepDwnldData();
				len_done = send_DS(cSoc, (uint8 *)tmpBuf, SndLen[cSoc]);
				break;
				
			default:
				len_done = 0;
				break;
			}// End Switch snd_typ
								
			if ( len_done == 0 )
				break;
				
			SndLen[cSoc] -= len_done;
			if ( wait4sendDone(cSoc) == 0 ) {
				EstbPhase[cSoc] = ESTB_TXNRDY;
				break;
			} 
			if ( SndLen[cSoc] == 0 ) {
				// last chunk was sent
				setSn_CR(cSoc, Sn_CR_DISCON);     // Disconnect
				EstbPhase[cSoc] = ESTB_NONE;
			}
			socket_return();
			break;
			
		case ESTB_TXNRDY :
			// wait for previous SendOK acknowledge (Int)
			if ( wait4sendDone(cSoc) == 1 ) {
				if ( SndLen[cSoc] == 0 ) {
					// last chunk was sent
					setSn_CR(cSoc, Sn_CR_DISCON);     // Disconnect
					EstbPhase[cSoc] = ESTB_NONE;
					socket_return();
					break;
				} else
					EstbPhase[cSoc] = ESTB_TRX;
			}
			break;
			
		default:
			break;
		} // End Switch EstbPhase[cSoc]
		break;
	} // End case Sn_SSR(cSoc) == SOCK_ESTABLISHED
						
	case SOCK_CLOSE_WAIT:
		printf("\n\r*Soc_Close_Wait*");
		disconnect(cSoc);
		close(cSoc);
		break;
		
	} // End Switch v = Sn_SSR(cSoc)
	
	cSoc++;
	if ( cSoc >= MAX_SOCK_NUM )	
		cSoc = 0;
}

int	send1st_DS(SOCKET s, uint8 * buf, int len)
{
	wiz_write_buf(s, buf, len);    // copy data

	setSn_TX_WRSR(s, len);   
	setSn_CR(s,Sn_CR_SEND);
	
	return 1;
}

int	send_DS(SOCKET s, uint8 * buf, int len)
{
	int cnt;
		
	txfree_size = (int)getSn_TX_FSR(s);
	if ( txfree_size == 0 ) 
		return 0;
			
	cnt = len;
	if ( cnt > txfree_size )	cnt = txfree_size;
	if ( cnt > TXWRMAX )	cnt = TXWRMAX;

	wiz_write_buf(s, buf, cnt);    // copy data
	
	setSn_TX_WRSR(s, cnt);   			

	return cnt;
}

//int	wait4sendDone(SOCKET s, int length)	
int	wait4sendDone(SOCKET s)	
{
	uint8 isr;
	
	isr=0;
	// wait previous SEND command completion.
	if ( !((isr = getSn_IR(s)) & Sn_IR_SENDOK) ) {
		return 0;
	}
	
	setSn_IR(s, Sn_IR_SENDOK);             // clear Sn_IR_SENDOK	
   
	setSn_CR(s,Sn_CR_SEND);
	
	return 1;
}

void	PrepDwnldData(void)
{
    28e8:	e59f101c 	ldr	r1, [pc, #28]	; 290c <prog+0x27a8>
    28ec:	e59f201c 	ldr	r2, [pc, #28]	; 2910 <prog+0x27ac>
	int i;
	uint32 * p;
	uint32 v;
	
	p = &tmpBuf[0];
	v = 0x12345678;
	
	for ( i = 0; i < (1480/4); i++ ) {
    28f0:	e59f301c 	ldr	r3, [pc, #28]	; 2914 <prog+0x27b0>
		*p = v;
    28f4:	e5012004 	str	r2, [r1, #-4]
		p++;
		v += 3;
    28f8:	e2822003 	add	r2, r2, #3	; 0x3
    28fc:	e1520003 	cmp	r2, r3
    2900:	e2811004 	add	r1, r1, #4	; 0x4
    2904:	1afffff9 	bne	28f0 <PrepDwnldData+0x8>
	}
}
    2908:	e12fff1e 	bx	lr
    290c:	40001480 	andmi	r1, r0, r0, lsl #9
    2910:	12345678 	eornes	r5, r4, #125829120	; 0x7800000
    2914:	12345ace 	eornes	r5, r4, #843776	; 0xce000

00002918 <wait4sendDone>:
    2918:	e92d4010 	stmdb	sp!, {r4, lr}
    291c:	e20040ff 	and	r4, r0, #255	; 0xff
    2920:	e1a00004 	mov	r0, r4
    2924:	eb000694 	bl	437c <getSn_IR>
    2928:	e3a01010 	mov	r1, #16	; 0x10
    292c:	e0103001 	ands	r3, r0, r1
    2930:	e1a00004 	mov	r0, r4
    2934:	0a000004 	beq	294c <wait4sendDone+0x34>
    2938:	eb000503 	bl	3d4c <setSn_IR>
    293c:	e1a00004 	mov	r0, r4
    2940:	e3a01020 	mov	r1, #32	; 0x20
    2944:	eb00069d 	bl	43c0 <setSn_CR>
    2948:	e3a03001 	mov	r3, #1	; 0x1
    294c:	e1a00003 	mov	r0, r3
    2950:	e8bd4010 	ldmia	sp!, {r4, lr}
    2954:	e12fff1e 	bx	lr

00002958 <send_DS>:
    2958:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    295c:	e20050ff 	and	r5, r0, #255	; 0xff
    2960:	e1a00005 	mov	r0, r5
    2964:	e1a04001 	mov	r4, r1
    2968:	e1a06002 	mov	r6, r2
    296c:	eb0005e2 	bl	40fc <getSn_TX_FSR>
    2970:	e59f3050 	ldr	r3, [pc, #80]	; 29c8 <prog+0x2864>
    2974:	e1a02000 	mov	r2, r0
    2978:	e3520000 	cmp	r2, #0	; 0x0
    297c:	e1a01004 	mov	r1, r4
    2980:	e1a00005 	mov	r0, r5
    2984:	e1a04002 	mov	r4, r2
    2988:	e5832000 	str	r2, [r3]
    298c:	0a00000a 	beq	29bc <send_DS+0x64>
    2990:	e59f3034 	ldr	r3, [pc, #52]	; 29cc <prog+0x2868>
    2994:	e1560003 	cmp	r6, r3
    2998:	b1a03006 	movlt	r3, r6
    299c:	e1520003 	cmp	r2, r3
    29a0:	b1a04002 	movlt	r4, r2
    29a4:	a1a04003 	movge	r4, r3
    29a8:	e1a02004 	mov	r2, r4
    29ac:	ebfffe53 	bl	2300 <wiz_write_buf>
    29b0:	e1a00005 	mov	r0, r5
    29b4:	e1a01004 	mov	r1, r4
    29b8:	eb000491 	bl	3c04 <setSn_TX_WRSR>
    29bc:	e1a00004 	mov	r0, r4
    29c0:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    29c4:	e12fff1e 	bx	lr
    29c8:	40001ce4 	andmi	r1, r0, r4, ror #25
    29cc:	000005b4 	streqh	r0, [r0], -r4

000029d0 <send1st_DS>:
    29d0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    29d4:	e20040ff 	and	r4, r0, #255	; 0xff
    29d8:	e1a05002 	mov	r5, r2
    29dc:	e1a00004 	mov	r0, r4
    29e0:	ebfffe46 	bl	2300 <wiz_write_buf>
    29e4:	e1a00004 	mov	r0, r4
    29e8:	e1a01005 	mov	r1, r5
    29ec:	eb000484 	bl	3c04 <setSn_TX_WRSR>
    29f0:	e1a00004 	mov	r0, r4
    29f4:	e3a01020 	mov	r1, #32	; 0x20
    29f8:	eb000670 	bl	43c0 <setSn_CR>
    29fc:	e3a00001 	mov	r0, #1	; 0x1
    2a00:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    2a04:	e12fff1e 	bx	lr

00002a08 <socket_return>:
    2a08:	e92d4010 	stmdb	sp!, {r4, lr}
    2a0c:	e3a04000 	mov	r4, #0	; 0x0
    2a10:	e1a00004 	mov	r0, r4
    2a14:	eb000633 	bl	42e8 <getSn_SSR>
    2a18:	e2503000 	subs	r3, r0, #0	; 0x0
    2a1c:	e3a01001 	mov	r1, #1	; 0x1
    2a20:	e1a00004 	mov	r0, r4
    2a24:	1a000004 	bne	2a3c <socket_return+0x34>
    2a28:	e59f2020 	ldr	r2, [pc, #32]	; 2a50 <prog+0x28ec>
    2a2c:	e1d220b0 	ldrh	r2, [r2]
    2a30:	eb00032e 	bl	36f0 <socket>
    2a34:	e1a00004 	mov	r0, r4
    2a38:	eb0002dd 	bl	35b4 <listen>
    2a3c:	e2844001 	add	r4, r4, #1	; 0x1
    2a40:	e3540008 	cmp	r4, #8	; 0x8
    2a44:	1afffff1 	bne	2a10 <socket_return+0x8>
    2a48:	e8bd4010 	ldmia	sp!, {r4, lr}
    2a4c:	e12fff1e 	bx	lr
    2a50:	40001470 	andmi	r1, r0, r0, ror r4

00002a54 <CheckRequest>:
    2a54:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    2a58:	e59fc14c 	ldr	ip, [pc, #332]	; 2bac <prog+0x2a48>
    2a5c:	e1a04000 	mov	r4, r0
    2a60:	e24dd00c 	sub	sp, sp, #12	; 0xc
    2a64:	e3a00000 	mov	r0, #0	; 0x0
    2a68:	ea000005 	b	2a84 <CheckRequest+0x30>
    2a6c:	e5dc1000 	ldrb	r1, [ip]
    2a70:	e20120ff 	and	r2, r1, #255	; 0xff
    2a74:	e2423061 	sub	r3, r2, #97	; 0x61
    2a78:	e3530019 	cmp	r3, #25	; 0x19
    2a7c:	920120df 	andls	r2, r1, #223	; 0xdf
    2a80:	e4cc2001 	strb	r2, [ip], #1
    2a84:	e1500004 	cmp	r0, r4
    2a88:	e2800001 	add	r0, r0, #1	; 0x1
    2a8c:	bafffff6 	blt	2a6c <CheckRequest+0x18>
    2a90:	e59f0114 	ldr	r0, [pc, #276]	; 2bac <prog+0x2a48>
    2a94:	e59f1114 	ldr	r1, [pc, #276]	; 2bb0 <prog+0x2a4c>
    2a98:	e3a02004 	mov	r2, #4	; 0x4
    2a9c:	eb000ab9 	bl	5588 <memcmp>
    2aa0:	e2505000 	subs	r5, r0, #0	; 0x0
    2aa4:	1a000032 	bne	2b74 <CheckRequest+0x120>
    2aa8:	e59f0104 	ldr	r0, [pc, #260]	; 2bb4 <prog+0x2a50>
    2aac:	e59f1104 	ldr	r1, [pc, #260]	; 2bb8 <prog+0x2a54>
    2ab0:	e3a02006 	mov	r2, #6	; 0x6
    2ab4:	eb000ab3 	bl	5588 <memcmp>
    2ab8:	e3500000 	cmp	r0, #0	; 0x0
    2abc:	0a000034 	beq	2b94 <CheckRequest+0x140>
    2ac0:	e1a02004 	mov	r2, r4
    2ac4:	e59f00f0 	ldr	r0, [pc, #240]	; 2bbc <prog+0x2a58>
    2ac8:	e3a0102e 	mov	r1, #46	; 0x2e
    2acc:	eb000a6d 	bl	5488 <memchr>
    2ad0:	e3500000 	cmp	r0, #0	; 0x0
    2ad4:	0a000030 	beq	2b9c <CheckRequest+0x148>
    2ad8:	e2401007 	sub	r1, r0, #7	; 0x7
    2adc:	e3a02007 	mov	r2, #7	; 0x7
    2ae0:	e1a0000d 	mov	r0, sp
    2ae4:	eb000acd 	bl	5620 <memcpy>
    2ae8:	e1a0100d 	mov	r1, sp
    2aec:	e59f00cc 	ldr	r0, [pc, #204]	; 2bc0 <prog+0x2a5c>
    2af0:	e5cd5007 	strb	r5, [sp, #7]
    2af4:	ebfffcea 	bl	1ea4 <printf>
    2af8:	e28d0002 	add	r0, sp, #2	; 0x2
    2afc:	e59f10c0 	ldr	r1, [pc, #192]	; 2bc4 <prog+0x2a60>
    2b00:	e3a02005 	mov	r2, #5	; 0x5
    2b04:	eb000a9f 	bl	5588 <memcmp>
    2b08:	e3500000 	cmp	r0, #0	; 0x0
    2b0c:	e1a0400d 	mov	r4, sp
    2b10:	0a00001f 	beq	2b94 <CheckRequest+0x140>
    2b14:	e1a0000d 	mov	r0, sp
    2b18:	e59f10a8 	ldr	r1, [pc, #168]	; 2bc8 <prog+0x2a64>
    2b1c:	e3a02007 	mov	r2, #7	; 0x7
    2b20:	eb000a98 	bl	5588 <memcmp>
    2b24:	e3500000 	cmp	r0, #0	; 0x0
    2b28:	02800001 	addeq	r0, r0, #1	; 0x1
    2b2c:	0a00001b 	beq	2ba0 <CheckRequest+0x14c>
    2b30:	e5dd0005 	ldrb	r0, [sp, #5]
    2b34:	ebfffd0c 	bl	1f6c <hex2int>
    2b38:	e3500000 	cmp	r0, #0	; 0x0
    2b3c:	ba000016 	blt	2b9c <CheckRequest+0x148>
    2b40:	e5dd0006 	ldrb	r0, [sp, #6]
    2b44:	ebfffd08 	bl	1f6c <hex2int>
    2b48:	e3500000 	cmp	r0, #0	; 0x0
    2b4c:	ba000012 	blt	2b9c <CheckRequest+0x148>
    2b50:	e5dd0005 	ldrb	r0, [sp, #5]
    2b54:	ebfffd04 	bl	1f6c <hex2int>
    2b58:	e1a04000 	mov	r4, r0
    2b5c:	e5dd0006 	ldrb	r0, [sp, #6]
    2b60:	ebfffd01 	bl	1f6c <hex2int>
    2b64:	e0800204 	add	r0, r0, r4, lsl #4
    2b68:	e3500055 	cmp	r0, #85	; 0x55
    2b6c:	da00000b 	ble	2ba0 <CheckRequest+0x14c>
    2b70:	ea000009 	b	2b9c <CheckRequest+0x148>
    2b74:	e59f0030 	ldr	r0, [pc, #48]	; 2bac <prog+0x2a48>
    2b78:	e59f104c 	ldr	r1, [pc, #76]	; 2bcc <prog+0x2a68>
    2b7c:	e3a02005 	mov	r2, #5	; 0x5
    2b80:	eb000a80 	bl	5588 <memcmp>
    2b84:	e3500000 	cmp	r0, #0	; 0x0
    2b88:	02800a01 	addeq	r0, r0, #4096	; 0x1000
    2b8c:	0a000003 	beq	2ba0 <CheckRequest+0x14c>
    2b90:	ea000001 	b	2b9c <CheckRequest+0x148>
    2b94:	e3a00000 	mov	r0, #0	; 0x0
    2b98:	ea000000 	b	2ba0 <CheckRequest+0x14c>
    2b9c:	e3e00000 	mvn	r0, #0	; 0x0
    2ba0:	e28dd00c 	add	sp, sp, #12	; 0xc
    2ba4:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    2ba8:	e12fff1e 	bx	lr
    2bac:	40000e60 	andmi	r0, r0, r0, ror #28
    2bb0:	00005e9c 	muleq	r0, ip, lr
    2bb4:	40000e64 	andmi	r0, r0, r4, ror #28
    2bb8:	00005ea4 	andeq	r5, r0, r4, lsr #29
    2bbc:	40000e65 	andmi	r0, r0, r5, ror #28
    2bc0:	00005eac 	andeq	r5, r0, ip, lsr #29
    2bc4:	00005eb8 	streqh	r5, [r0], -r8
    2bc8:	00005ec0 	andeq	r5, r0, r0, asr #29
    2bcc:	00005ec8 	andeq	r5, r0, r8, asr #29

00002bd0 <PrepHeader>:
    2bd0:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bd4:	e20110ff 	and	r1, r1, #255	; 0xff
    2bd8:	e2411001 	sub	r1, r1, #1	; 0x1
    2bdc:	e24dd014 	sub	sp, sp, #20	; 0x14
    2be0:	e1a04000 	mov	r4, r0
    2be4:	e3510008 	cmp	r1, #8	; 0x8
    2be8:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    2bec:	ea000032 	b	2cbc <prog+0x2b58>
    2bf0:	00002cbc 	streqh	r2, [r0], -ip
    2bf4:	00002c14 	andeq	r2, r0, r4, lsl ip
    2bf8:	00002c20 	andeq	r2, r0, r0, lsr #24
    2bfc:	00002c38 	andeq	r2, r0, r8, lsr ip
    2c00:	00002c50 	andeq	r2, r0, r0, asr ip
    2c04:	00002c68 	andeq	r2, r0, r8, ror #24
    2c08:	00002c80 	andeq	r2, r0, r0, lsl #25
    2c0c:	00002c8c 	andeq	r2, r0, ip, lsl #25
    2c10:	00002ca4 	andeq	r2, r0, r4, lsr #25
    2c14:	e59f0118 	ldr	r0, [pc, #280]	; 2d34 <prog+0x2bd0>
    2c18:	e59f1118 	ldr	r1, [pc, #280]	; 2d38 <prog+0x2bd4>
    2c1c:	ea000028 	b	2cc4 <prog+0x2b60>
    2c20:	e59f010c 	ldr	r0, [pc, #268]	; 2d34 <prog+0x2bd0>
    2c24:	e59f1110 	ldr	r1, [pc, #272]	; 2d3c <prog+0x2bd8>
    2c28:	e3a0205f 	mov	r2, #95	; 0x5f
    2c2c:	eb000a7b 	bl	5620 <memcpy>
    2c30:	e3a0805f 	mov	r8, #95	; 0x5f
    2c34:	ea000025 	b	2cd0 <prog+0x2b6c>
    2c38:	e59f00f4 	ldr	r0, [pc, #244]	; 2d34 <prog+0x2bd0>
    2c3c:	e59f10fc 	ldr	r1, [pc, #252]	; 2d40 <prog+0x2bdc>
    2c40:	e3a02078 	mov	r2, #120	; 0x78
    2c44:	eb000a75 	bl	5620 <memcpy>
    2c48:	e3a08078 	mov	r8, #120	; 0x78
    2c4c:	ea00001f 	b	2cd0 <prog+0x2b6c>
    2c50:	e59f00dc 	ldr	r0, [pc, #220]	; 2d34 <prog+0x2bd0>
    2c54:	e59f10e8 	ldr	r1, [pc, #232]	; 2d44 <prog+0x2be0>
    2c58:	e3a02077 	mov	r2, #119	; 0x77
    2c5c:	eb000a6f 	bl	5620 <memcpy>
    2c60:	e3a08077 	mov	r8, #119	; 0x77
    2c64:	ea000019 	b	2cd0 <prog+0x2b6c>
    2c68:	e59f00c4 	ldr	r0, [pc, #196]	; 2d34 <prog+0x2bd0>
    2c6c:	e59f10d4 	ldr	r1, [pc, #212]	; 2d48 <prog+0x2be4>
    2c70:	e3a02061 	mov	r2, #97	; 0x61
    2c74:	eb000a69 	bl	5620 <memcpy>
    2c78:	e3a08061 	mov	r8, #97	; 0x61
    2c7c:	ea000013 	b	2cd0 <prog+0x2b6c>
    2c80:	e59f00ac 	ldr	r0, [pc, #172]	; 2d34 <prog+0x2bd0>
    2c84:	e59f10c0 	ldr	r1, [pc, #192]	; 2d4c <prog+0x2be8>
    2c88:	ea00000d 	b	2cc4 <prog+0x2b60>
    2c8c:	e59f00a0 	ldr	r0, [pc, #160]	; 2d34 <prog+0x2bd0>
    2c90:	e59f10b8 	ldr	r1, [pc, #184]	; 2d50 <prog+0x2bec>
    2c94:	e3a02063 	mov	r2, #99	; 0x63
    2c98:	eb000a60 	bl	5620 <memcpy>
    2c9c:	e3a08063 	mov	r8, #99	; 0x63
    2ca0:	ea00000a 	b	2cd0 <prog+0x2b6c>
    2ca4:	e59f0088 	ldr	r0, [pc, #136]	; 2d34 <prog+0x2bd0>
    2ca8:	e59f10a4 	ldr	r1, [pc, #164]	; 2d54 <prog+0x2bf0>
    2cac:	e3a0208a 	mov	r2, #138	; 0x8a
    2cb0:	eb000a5a 	bl	5620 <memcpy>
    2cb4:	e3a0808a 	mov	r8, #138	; 0x8a
    2cb8:	ea000004 	b	2cd0 <prog+0x2b6c>
    2cbc:	e59f0070 	ldr	r0, [pc, #112]	; 2d34 <prog+0x2bd0>
    2cc0:	e59f1090 	ldr	r1, [pc, #144]	; 2d58 <prog+0x2bf4>
    2cc4:	e3a02060 	mov	r2, #96	; 0x60
    2cc8:	eb000a54 	bl	5620 <memcpy>
    2ccc:	e3a08060 	mov	r8, #96	; 0x60
    2cd0:	e1a0100d 	mov	r1, sp
    2cd4:	e3a0200a 	mov	r2, #10	; 0xa
    2cd8:	e1a00004 	mov	r0, r4
    2cdc:	ebfffc83 	bl	1ef0 <itoa>
    2ce0:	e1a06000 	mov	r6, r0
    2ce4:	eb000a9a 	bl	5754 <strlen>
    2ce8:	e59f7044 	ldr	r7, [pc, #68]	; 2d34 <prog+0x2bd0>
    2cec:	e1a04000 	mov	r4, r0
    2cf0:	e0885007 	add	r5, r8, r7
    2cf4:	e1a01006 	mov	r1, r6
    2cf8:	e1a02004 	mov	r2, r4
    2cfc:	e1a00005 	mov	r0, r5
    2d00:	eb000a46 	bl	5620 <memcpy>
    2d04:	e0850004 	add	r0, r5, r4
    2d08:	e59f104c 	ldr	r1, [pc, #76]	; 2d5c <prog+0x2bf8>
    2d0c:	e3a02004 	mov	r2, #4	; 0x4
    2d10:	eb000a42 	bl	5620 <memcpy>
    2d14:	e2844004 	add	r4, r4, #4	; 0x4
    2d18:	e0884004 	add	r4, r8, r4
    2d1c:	e3a03000 	mov	r3, #0	; 0x0
    2d20:	e1a00004 	mov	r0, r4
    2d24:	e7c73004 	strb	r3, [r7, r4]
    2d28:	e28dd014 	add	sp, sp, #20	; 0x14
    2d2c:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    2d30:	e12fff1e 	bx	lr
    2d34:	40001abc 	strmih	r1, [r0], -ip
    2d38:	00005f34 	andeq	r5, r0, r4, lsr pc
    2d3c:	00005f98 	muleq	r0, r8, pc
    2d40:	00005ff8 	streqd	r5, [r0], -r8
    2d44:	00006074 	andeq	r6, r0, r4, ror r0
    2d48:	000060ec 	andeq	r6, r0, ip, ror #1
    2d4c:	00006150 	andeq	r6, r0, r0, asr r1
    2d50:	000061b4 	streqh	r6, [r0], -r4
    2d54:	00006218 	andeq	r6, r0, r8, lsl r2
    2d58:	00005ed0 	ldreqd	r5, [r0], -r0
    2d5c:	00005e78 	andeq	r5, r0, r8, ror lr

00002d60 <http_serv_machine>:
    2d60:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d64:	e59f4700 	ldr	r4, [pc, #1792]	; 346c <prog+0x3308>
    2d68:	e5d40000 	ldrb	r0, [r4]
    2d6c:	eb00055d 	bl	42e8 <getSn_SSR>
    2d70:	e3500014 	cmp	r0, #20	; 0x14
    2d74:	0a0000e6 	beq	3114 <prog+0x2fb0>
    2d78:	8a000004 	bhi	2d90 <http_serv_machine+0x30>
    2d7c:	e3500000 	cmp	r0, #0	; 0x0
    2d80:	0a000007 	beq	2da4 <http_serv_machine+0x44>
    2d84:	e3500013 	cmp	r0, #19	; 0x13
    2d88:	1a0001a9 	bne	3434 <prog+0x32d0>
    2d8c:	ea00000b 	b	2dc0 <http_serv_machine+0x60>
    2d90:	e3500017 	cmp	r0, #23	; 0x17
    2d94:	0a00000c 	beq	2dcc <http_serv_machine+0x6c>
    2d98:	e350001c 	cmp	r0, #28	; 0x1c
    2d9c:	1a0001a4 	bne	3434 <prog+0x32d0>
    2da0:	ea00019d 	b	341c <prog+0x32b8>
    2da4:	e59f36c4 	ldr	r3, [pc, #1732]	; 3470 <prog+0x330c>
    2da8:	e5d40000 	ldrb	r0, [r4]
    2dac:	e1d320b0 	ldrh	r2, [r3]
    2db0:	e3a01001 	mov	r1, #1	; 0x1
    2db4:	e3a03020 	mov	r3, #32	; 0x20
    2db8:	eb00024c 	bl	36f0 <socket>
    2dbc:	ea00019c 	b	3434 <prog+0x32d0>
    2dc0:	e5d40000 	ldrb	r0, [r4]
    2dc4:	eb0001fa 	bl	35b4 <listen>
    2dc8:	ea000199 	b	3434 <prog+0x32d0>
    2dcc:	e5941000 	ldr	r1, [r4]
    2dd0:	e59f369c 	ldr	r3, [pc, #1692]	; 3474 <prog+0x3310>
    2dd4:	e7d33001 	ldrb	r3, [r3, r1]
    2dd8:	e3530003 	cmp	r3, #3	; 0x3
    2ddc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    2de0:	ea000193 	b	3434 <prog+0x32d0>
    2de4:	00002df4 	streqd	r2, [r0], -r4
    2de8:	0000317c 	andeq	r3, r0, ip, ror r1
    2dec:	00003290 	muleq	r0, r0, r2
    2df0:	00003388 	andeq	r3, r0, r8, lsl #7
    2df4:	e20100ff 	and	r0, r1, #255	; 0xff
    2df8:	eb0004ad 	bl	40b4 <getSn_RX_RSR>
    2dfc:	e1a00800 	mov	r0, r0, lsl #16
    2e00:	e350081e 	cmp	r0, #1966080	; 0x1e0000
    2e04:	9a00018a 	bls	3434 <prog+0x32d0>
    2e08:	e59f665c 	ldr	r6, [pc, #1628]	; 346c <prog+0x3308>
    2e0c:	e5d60000 	ldrb	r0, [r6]
    2e10:	eb0004a7 	bl	40b4 <getSn_RX_RSR>
    2e14:	e59f565c 	ldr	r5, [pc, #1628]	; 3478 <prog+0x3314>
    2e18:	e1a00800 	mov	r0, r0, lsl #16
    2e1c:	e59f2658 	ldr	r2, [pc, #1624]	; 347c <prog+0x3318>
    2e20:	e1a00820 	mov	r0, r0, lsr #16
    2e24:	e1500002 	cmp	r0, r2
    2e28:	31a02000 	movcc	r2, r0
    2e2c:	e1a01005 	mov	r1, r5
    2e30:	e5d60000 	ldrb	r0, [r6]
    2e34:	eb0001ac 	bl	34ec <recv>
    2e38:	e1a07000 	mov	r7, r0
    2e3c:	ebffff04 	bl	2a54 <CheckRequest>
    2e40:	e3700001 	cmn	r0, #1	; 0x1
    2e44:	e1a04000 	mov	r4, r0
    2e48:	0a00003c 	beq	2f40 <prog+0x2ddc>
    2e4c:	e3500a01 	cmp	r0, #4096	; 0x1000
    2e50:	1a000045 	bne	2f6c <prog+0x2e08>
    2e54:	e2404a01 	sub	r4, r0, #4096	; 0x1000
    2e58:	e59f1620 	ldr	r1, [pc, #1568]	; 3480 <prog+0x331c>
    2e5c:	e1a00005 	mov	r0, r5
    2e60:	e7c54007 	strb	r4, [r5, r7]
    2e64:	ebfffc4b 	bl	1f98 <findstr>
    2e68:	e3700001 	cmn	r0, #1	; 0x1
    2e6c:	0a000027 	beq	2f10 <prog+0x2dac>
    2e70:	e2470004 	sub	r0, r7, #4	; 0x4
    2e74:	e7d53000 	ldrb	r3, [r5, r0]
    2e78:	e353002d 	cmp	r3, #45	; 0x2d
    2e7c:	1a00001c 	bne	2ef4 <prog+0x2d90>
    2e80:	e0800005 	add	r0, r0, r5
    2e84:	e5d03001 	ldrb	r3, [r0, #1]
    2e88:	e353002d 	cmp	r3, #45	; 0x2d
    2e8c:	1a000018 	bne	2ef4 <prog+0x2d90>
    2e90:	e5d03002 	ldrb	r3, [r0, #2]
    2e94:	e353000d 	cmp	r3, #13	; 0xd
    2e98:	1a000015 	bne	2ef4 <prog+0x2d90>
    2e9c:	e5d03003 	ldrb	r3, [r0, #3]
    2ea0:	e353000a 	cmp	r3, #10	; 0xa
    2ea4:	1a000012 	bne	2ef4 <prog+0x2d90>
    2ea8:	e3a0001e 	mov	r0, #30	; 0x1e
    2eac:	e3a01001 	mov	r1, #1	; 0x1
    2eb0:	ebffff46 	bl	2bd0 <PrepHeader>
    2eb4:	e3500000 	cmp	r0, #0	; 0x0
    2eb8:	da00015d 	ble	3434 <prog+0x32d0>
    2ebc:	e1a02000 	mov	r2, r0
    2ec0:	e59f15bc 	ldr	r1, [pc, #1468]	; 3484 <prog+0x3320>
    2ec4:	e5d60000 	ldrb	r0, [r6]
    2ec8:	ebfffec0 	bl	29d0 <send1st_DS>
    2ecc:	e5961000 	ldr	r1, [r6]
    2ed0:	e59f35b0 	ldr	r3, [pc, #1456]	; 3488 <prog+0x3324>
    2ed4:	e3a0201e 	mov	r2, #30	; 0x1e
    2ed8:	e7832101 	str	r2, [r3, r1, lsl #2]
    2edc:	e59f3590 	ldr	r3, [pc, #1424]	; 3474 <prog+0x3310>
    2ee0:	e3a02002 	mov	r2, #2	; 0x2
    2ee4:	e7c32001 	strb	r2, [r3, r1]
    2ee8:	e59f359c 	ldr	r3, [pc, #1436]	; 348c <prog+0x3328>
    2eec:	e7c34001 	strb	r4, [r3, r1]
    2ef0:	ea000145 	b	340c <prog+0x32a8>
    2ef4:	ebfff6af 	bl	9b8 <timer1Clear>
    2ef8:	e59f356c 	ldr	r3, [pc, #1388]	; 346c <prog+0x3308>
    2efc:	e5931000 	ldr	r1, [r3]
    2f00:	e3a02001 	mov	r2, #1	; 0x1
    2f04:	e59f3568 	ldr	r3, [pc, #1384]	; 3474 <prog+0x3310>
    2f08:	e7c32001 	strb	r2, [r3, r1]
    2f0c:	ea000148 	b	3434 <prog+0x32d0>
    2f10:	e59f0578 	ldr	r0, [pc, #1400]	; 3490 <prog+0x332c>
    2f14:	ebfffbe2 	bl	1ea4 <printf>
    2f18:	e3a02041 	mov	r2, #65	; 0x41
    2f1c:	e59f1570 	ldr	r1, [pc, #1392]	; 3494 <prog+0x3330>
    2f20:	e5d60000 	ldrb	r0, [r6]
    2f24:	ebfffea9 	bl	29d0 <send1st_DS>
    2f28:	e5d60000 	ldrb	r0, [r6]
    2f2c:	eb000168 	bl	34d4 <disconnect>
    2f30:	e5962000 	ldr	r2, [r6]
    2f34:	e59f3538 	ldr	r3, [pc, #1336]	; 3474 <prog+0x3310>
    2f38:	e7c34002 	strb	r4, [r3, r2]
    2f3c:	ea00013c 	b	3434 <prog+0x32d0>
    2f40:	e59f0550 	ldr	r0, [pc, #1360]	; 3498 <prog+0x3334>
    2f44:	ebfffbd6 	bl	1ea4 <printf>
    2f48:	e59f1544 	ldr	r1, [pc, #1348]	; 3494 <prog+0x3330>
    2f4c:	e3a02041 	mov	r2, #65	; 0x41
    2f50:	e5d60000 	ldrb	r0, [r6]
    2f54:	ebfffe9d 	bl	29d0 <send1st_DS>
    2f58:	e5d60000 	ldrb	r0, [r6]
    2f5c:	eb00015c 	bl	34d4 <disconnect>
    2f60:	e5961000 	ldr	r1, [r6]
    2f64:	e3a02000 	mov	r2, #0	; 0x0
    2f68:	eaffffe5 	b	2f04 <prog+0x2da0>
    2f6c:	e3a0300c 	mov	r3, #12	; 0xc
    2f70:	e0050390 	mul	r5, r0, r3
    2f74:	e59f7520 	ldr	r7, [pc, #1312]	; 349c <prog+0x3338>
    2f78:	e2852803 	add	r2, r5, #196608	; 0x30000
    2f7c:	e3a08803 	mov	r8, #196608	; 0x30000
    2f80:	e5923008 	ldr	r3, [r2, #8]
    2f84:	e1a01004 	mov	r1, r4
    2f88:	e5922004 	ldr	r2, [r2, #4]
    2f8c:	e59f050c 	ldr	r0, [pc, #1292]	; 34a0 <prog+0x333c>
    2f90:	e5878000 	str	r8, [r7]
    2f94:	ebfffbc2 	bl	1ea4 <printf>
    2f98:	e5972000 	ldr	r2, [r7]
    2f9c:	e0853002 	add	r3, r5, r2
    2fa0:	e5931008 	ldr	r1, [r3, #8]
    2fa4:	e35100ff 	cmp	r1, #255	; 0xff
    2fa8:	059f04f4 	ldreq	r0, [pc, #1268]	; 34a4 <prog+0x3340>
    2fac:	0affffe4 	beq	2f44 <prog+0x2de0>
    2fb0:	e3510009 	cmp	r1, #9	; 0x9
    2fb4:	1a000058 	bne	311c <prog+0x2fb8>
    2fb8:	e7952002 	ldr	r2, [r5, r2]
    2fbc:	e5933004 	ldr	r3, [r3, #4]
    2fc0:	e0826003 	add	r6, r2, r3
    2fc4:	e1a01004 	mov	r1, r4
    2fc8:	e7d62008 	ldrb	r2, [r6, r8]
    2fcc:	e59f04d4 	ldr	r0, [pc, #1236]	; 34a8 <prog+0x3344>
    2fd0:	ebfffbb3 	bl	1ea4 <printf>
    2fd4:	e3a04000 	mov	r4, #0	; 0x0
    2fd8:	e59f34cc 	ldr	r3, [pc, #1228]	; 34ac <prog+0x3348>
    2fdc:	e0862004 	add	r2, r6, r4
    2fe0:	e7d21003 	ldrb	r1, [r2, r3]
    2fe4:	e2844001 	add	r4, r4, #1	; 0x1
    2fe8:	e59f04c0 	ldr	r0, [pc, #1216]	; 34b0 <prog+0x334c>
    2fec:	ebfffbac 	bl	1ea4 <printf>
    2ff0:	e3540005 	cmp	r4, #5	; 0x5
    2ff4:	1afffff7 	bne	2fd8 <prog+0x2e74>
    2ff8:	e59f449c 	ldr	r4, [pc, #1180]	; 349c <prog+0x3338>
    2ffc:	e5943000 	ldr	r3, [r4]
    3000:	e0851003 	add	r1, r5, r3
    3004:	e7952003 	ldr	r2, [r5, r3]
    3008:	e5913004 	ldr	r3, [r1, #4]
    300c:	e0822003 	add	r2, r2, r3
    3010:	e2822803 	add	r2, r2, #196608	; 0x30000
    3014:	e2822004 	add	r2, r2, #4	; 0x4
    3018:	e5d23001 	ldrb	r3, [r2, #1]
    301c:	e5d21000 	ldrb	r1, [r2]
    3020:	e5520001 	ldrb	r0, [r2, #-1]
    3024:	e1a03803 	mov	r3, r3, lsl #16
    3028:	e5522002 	ldrb	r2, [r2, #-2]
    302c:	e0833c01 	add	r3, r3, r1, lsl #24
    3030:	e0833000 	add	r3, r3, r0
    3034:	e0833402 	add	r3, r3, r2, lsl #8
    3038:	e1a03083 	mov	r3, r3, lsl #1
    303c:	e2836002 	add	r6, r3, #2	; 0x2
    3040:	e1a01006 	mov	r1, r6
    3044:	e59f0468 	ldr	r0, [pc, #1128]	; 34b4 <prog+0x3350>
    3048:	ebfffb95 	bl	1ea4 <printf>
    304c:	e5943000 	ldr	r3, [r4]
    3050:	e0852003 	add	r2, r5, r3
    3054:	e7951003 	ldr	r1, [r5, r3]
    3058:	e5922004 	ldr	r2, [r2, #4]
    305c:	e0813002 	add	r3, r1, r2
    3060:	e2833803 	add	r3, r3, #196608	; 0x30000
    3064:	e5d35000 	ldrb	r5, [r3]
    3068:	e3550001 	cmp	r5, #1	; 0x1
    306c:	0a000002 	beq	307c <prog+0x2f18>
    3070:	e3550002 	cmp	r5, #2	; 0x2
    3074:	1a00001d 	bne	30f0 <prog+0x2f8c>
    3078:	ea00000e 	b	30b8 <prog+0x2f54>
    307c:	e59f43e8 	ldr	r4, [pc, #1000]	; 346c <prog+0x3308>
    3080:	e2811803 	add	r1, r1, #196608	; 0x30000
    3084:	e2811002 	add	r1, r1, #2	; 0x2
    3088:	e2422002 	sub	r2, r2, #2	; 0x2
    308c:	e5d40000 	ldrb	r0, [r4]
    3090:	ebfffe4e 	bl	29d0 <send1st_DS>
    3094:	e5942000 	ldr	r2, [r4]
    3098:	e59f33ec 	ldr	r3, [pc, #1004]	; 348c <prog+0x3328>
    309c:	e7c35002 	strb	r5, [r3, r2]
    30a0:	e59f33cc 	ldr	r3, [pc, #972]	; 3474 <prog+0x3310>
    30a4:	e3a01002 	mov	r1, #2	; 0x2
    30a8:	e7c31002 	strb	r1, [r3, r2]
    30ac:	e59f33d4 	ldr	r3, [pc, #980]	; 3488 <prog+0x3324>
    30b0:	e7836102 	str	r6, [r3, r2, lsl #2]
    30b4:	ea0000de 	b	3434 <prog+0x32d0>
    30b8:	e59f43ac 	ldr	r4, [pc, #940]	; 346c <prog+0x3308>
    30bc:	e2811803 	add	r1, r1, #196608	; 0x30000
    30c0:	e2422002 	sub	r2, r2, #2	; 0x2
    30c4:	e2811002 	add	r1, r1, #2	; 0x2
    30c8:	e5d40000 	ldrb	r0, [r4]
    30cc:	ebfffe3f 	bl	29d0 <send1st_DS>
    30d0:	e5942000 	ldr	r2, [r4]
    30d4:	e59f33b0 	ldr	r3, [pc, #944]	; 348c <prog+0x3328>
    30d8:	e7c35002 	strb	r5, [r3, r2]
    30dc:	e59f33a4 	ldr	r3, [pc, #932]	; 3488 <prog+0x3324>
    30e0:	e7836102 	str	r6, [r3, r2, lsl #2]
    30e4:	e59f3388 	ldr	r3, [pc, #904]	; 3474 <prog+0x3310>
    30e8:	e7c35002 	strb	r5, [r3, r2]
    30ec:	ea0000d0 	b	3434 <prog+0x32d0>
    30f0:	e59f4374 	ldr	r4, [pc, #884]	; 346c <prog+0x3308>
    30f4:	e59f03a8 	ldr	r0, [pc, #936]	; 34a4 <prog+0x3340>
    30f8:	ebfffb69 	bl	1ea4 <printf>
    30fc:	e59f1390 	ldr	r1, [pc, #912]	; 3494 <prog+0x3330>
    3100:	e3a02041 	mov	r2, #65	; 0x41
    3104:	e5d40000 	ldrb	r0, [r4]
    3108:	ebfffe30 	bl	29d0 <send1st_DS>
    310c:	e5d40000 	ldrb	r0, [r4]
    3110:	eb0000ef 	bl	34d4 <disconnect>
    3114:	e5941000 	ldr	r1, [r4]
    3118:	eaffff91 	b	2f64 <prog+0x2e00>
    311c:	e20110ff 	and	r1, r1, #255	; 0xff
    3120:	e5930004 	ldr	r0, [r3, #4]
    3124:	ebfffea9 	bl	2bd0 <PrepHeader>
    3128:	e3500000 	cmp	r0, #0	; 0x0
    312c:	da0000c0 	ble	3434 <prog+0x32d0>
    3130:	e1a02000 	mov	r2, r0
    3134:	e59f1348 	ldr	r1, [pc, #840]	; 3484 <prog+0x3320>
    3138:	e5d60000 	ldrb	r0, [r6]
    313c:	ebfffe23 	bl	29d0 <send1st_DS>
    3140:	e5961000 	ldr	r1, [r6]
    3144:	e59f3328 	ldr	r3, [pc, #808]	; 3474 <prog+0x3310>
    3148:	e3a02002 	mov	r2, #2	; 0x2
    314c:	e7c32001 	strb	r2, [r3, r1]
    3150:	e59f3334 	ldr	r3, [pc, #820]	; 348c <prog+0x3328>
    3154:	e3a02000 	mov	r2, #0	; 0x0
    3158:	e7c32001 	strb	r2, [r3, r1]
    315c:	e5973000 	ldr	r3, [r7]
    3160:	e7952003 	ldr	r2, [r5, r3]
    3164:	e0853003 	add	r3, r5, r3
    3168:	e5930004 	ldr	r0, [r3, #4]
    316c:	e59f3314 	ldr	r3, [pc, #788]	; 3488 <prog+0x3324>
    3170:	e2822803 	add	r2, r2, #196608	; 0x30000
    3174:	e7830101 	str	r0, [r3, r1, lsl #2]
    3178:	ea0000a4 	b	3410 <prog+0x32ac>
    317c:	e20100ff 	and	r0, r1, #255	; 0xff
    3180:	ea000020 	b	3208 <prog+0x30a4>
    3184:	e5d50000 	ldrb	r0, [r5]
    3188:	eb0003c9 	bl	40b4 <getSn_RX_RSR>
    318c:	e59f22e8 	ldr	r2, [pc, #744]	; 347c <prog+0x3318>
    3190:	e1a00800 	mov	r0, r0, lsl #16
    3194:	e1a00820 	mov	r0, r0, lsr #16
    3198:	e1500002 	cmp	r0, r2
    319c:	31a02000 	movcc	r2, r0
    31a0:	e1a01004 	mov	r1, r4
    31a4:	e5d50000 	ldrb	r0, [r5]
    31a8:	eb0000cf 	bl	34ec <recv>
    31ac:	e2400004 	sub	r0, r0, #4	; 0x4
    31b0:	e7d43000 	ldrb	r3, [r4, r0]
    31b4:	e353002d 	cmp	r3, #45	; 0x2d
    31b8:	e59f32f8 	ldr	r3, [pc, #760]	; 34b8 <prog+0x3354>
    31bc:	e0802004 	add	r2, r0, r4
    31c0:	e5836000 	str	r6, [r3]
    31c4:	1a00000d 	bne	3200 <prog+0x309c>
    31c8:	e5d23001 	ldrb	r3, [r2, #1]
    31cc:	e353002d 	cmp	r3, #45	; 0x2d
    31d0:	1a00000a 	bne	3200 <prog+0x309c>
    31d4:	e5d23002 	ldrb	r3, [r2, #2]
    31d8:	e353000d 	cmp	r3, #13	; 0xd
    31dc:	1a000007 	bne	3200 <prog+0x309c>
    31e0:	e5d23003 	ldrb	r3, [r2, #3]
    31e4:	e353000a 	cmp	r3, #10	; 0xa
    31e8:	e3a01001 	mov	r1, #1	; 0x1
    31ec:	e3a0001e 	mov	r0, #30	; 0x1e
    31f0:	1a000002 	bne	3200 <prog+0x309c>
    31f4:	ebfffe75 	bl	2bd0 <PrepHeader>
    31f8:	e3500000 	cmp	r0, #0	; 0x0
    31fc:	ca000075 	bgt	33d8 <prog+0x3274>
    3200:	e59f3264 	ldr	r3, [pc, #612]	; 346c <prog+0x3308>
    3204:	e5d30000 	ldrb	r0, [r3]
    3208:	eb0003a9 	bl	40b4 <getSn_RX_RSR>
    320c:	e1a00800 	mov	r0, r0, lsl #16
    3210:	e1a00820 	mov	r0, r0, lsr #16
    3214:	e3500000 	cmp	r0, #0	; 0x0
    3218:	e59f524c 	ldr	r5, [pc, #588]	; 346c <prog+0x3308>
    321c:	e59f4254 	ldr	r4, [pc, #596]	; 3478 <prog+0x3314>
    3220:	e3a06000 	mov	r6, #0	; 0x0
    3224:	1affffd6 	bne	3184 <prog+0x3020>
    3228:	ea00008a 	b	3458 <prog+0x32f4>
    322c:	e59f4238 	ldr	r4, [pc, #568]	; 346c <prog+0x3308>
    3230:	e3a01002 	mov	r1, #2	; 0x2
    3234:	e5d40000 	ldrb	r0, [r4]
    3238:	eb000271 	bl	3c04 <setSn_TX_WRSR>
    323c:	e5940000 	ldr	r0, [r4]
    3240:	e1a00300 	mov	r0, r0, lsl #6
    3244:	e2800f8b 	add	r0, r0, #556	; 0x22c
    3248:	e2800002 	add	r0, r0, #2	; 0x2
    324c:	e59f1268 	ldr	r1, [pc, #616]	; 34bc <prog+0x3358>
    3250:	ebfffbfe 	bl	2250 <IINCHIP_WRITE>
    3254:	e5d40000 	ldrb	r0, [r4]
    3258:	e3a01020 	mov	r1, #32	; 0x20
    325c:	eb000457 	bl	43c0 <setSn_CR>
    3260:	e59f4204 	ldr	r4, [pc, #516]	; 346c <prog+0x3308>
    3264:	e5d40000 	ldrb	r0, [r4]
    3268:	eb000443 	bl	437c <getSn_IR>
    326c:	e3100010 	tst	r0, #16	; 0x10
    3270:	0afffffa 	beq	3260 <prog+0x30fc>
    3274:	e59f323c 	ldr	r3, [pc, #572]	; 34b8 <prog+0x3354>
    3278:	e3a02001 	mov	r2, #1	; 0x1
    327c:	e5d40000 	ldrb	r0, [r4]
    3280:	e3a01010 	mov	r1, #16	; 0x10
    3284:	e5832000 	str	r2, [r3]
    3288:	eb0002af 	bl	3d4c <setSn_IR>
    328c:	ea000068 	b	3434 <prog+0x32d0>
    3290:	e59f31f4 	ldr	r3, [pc, #500]	; 348c <prog+0x3328>
    3294:	e7d33001 	ldrb	r3, [r3, r1]
    3298:	e3530001 	cmp	r3, #1	; 0x1
    329c:	0a000010 	beq	32e4 <prog+0x3180>
    32a0:	3a000002 	bcc	32b0 <prog+0x314c>
    32a4:	e3530002 	cmp	r3, #2	; 0x2
    32a8:	0a000013 	beq	32fc <prog+0x3198>
    32ac:	ea000060 	b	3434 <prog+0x32d0>
    32b0:	e59f4208 	ldr	r4, [pc, #520]	; 34c0 <prog+0x335c>
    32b4:	e59f31cc 	ldr	r3, [pc, #460]	; 3488 <prog+0x3324>
    32b8:	e20100ff 	and	r0, r1, #255	; 0xff
    32bc:	e7932101 	ldr	r2, [r3, r1, lsl #2]
    32c0:	e7941101 	ldr	r1, [r4, r1, lsl #2]
    32c4:	ebfffda3 	bl	2958 <send_DS>
    32c8:	e59f319c 	ldr	r3, [pc, #412]	; 346c <prog+0x3308>
    32cc:	e5932000 	ldr	r2, [r3]
    32d0:	e7943102 	ldr	r3, [r4, r2, lsl #2]
    32d4:	e1a01000 	mov	r1, r0
    32d8:	e0833000 	add	r3, r3, r0
    32dc:	e7843102 	str	r3, [r4, r2, lsl #2]
    32e0:	ea00000e 	b	3320 <prog+0x31bc>
    32e4:	ebfff42f 	bl	3a8 <UpdateVoltage>
    32e8:	e59f317c 	ldr	r3, [pc, #380]	; 346c <prog+0x3308>
    32ec:	e59f11d0 	ldr	r1, [pc, #464]	; 34c4 <prog+0x3360>
    32f0:	e5d30000 	ldrb	r0, [r3]
    32f4:	e3a02008 	mov	r2, #8	; 0x8
    32f8:	ea000006 	b	3318 <prog+0x31b4>
    32fc:	ebfffd79 	bl	28e8 <PrepDwnldData>
    3300:	e59f1164 	ldr	r1, [pc, #356]	; 346c <prog+0x3308>
    3304:	e59f317c 	ldr	r3, [pc, #380]	; 3488 <prog+0x3324>
    3308:	e5912000 	ldr	r2, [r1]
    330c:	e5d10000 	ldrb	r0, [r1]
    3310:	e7932102 	ldr	r2, [r3, r2, lsl #2]
    3314:	e59f11ac 	ldr	r1, [pc, #428]	; 34c8 <prog+0x3364>
    3318:	ebfffd8e 	bl	2958 <send_DS>
    331c:	e1a01000 	mov	r1, r0
    3320:	e3510000 	cmp	r1, #0	; 0x0
    3324:	0a000042 	beq	3434 <prog+0x32d0>
    3328:	e59f513c 	ldr	r5, [pc, #316]	; 346c <prog+0x3308>
    332c:	e59f4154 	ldr	r4, [pc, #340]	; 3488 <prog+0x3324>
    3330:	e5953000 	ldr	r3, [r5]
    3334:	e7942103 	ldr	r2, [r4, r3, lsl #2]
    3338:	e0612002 	rsb	r2, r1, r2
    333c:	e20300ff 	and	r0, r3, #255	; 0xff
    3340:	e7842103 	str	r2, [r4, r3, lsl #2]
    3344:	ebfffd73 	bl	2918 <wait4sendDone>
    3348:	e3500000 	cmp	r0, #0	; 0x0
    334c:	e5950000 	ldr	r0, [r5]
    3350:	059f311c 	ldreq	r3, [pc, #284]	; 3474 <prog+0x3310>
    3354:	03a02003 	moveq	r2, #3	; 0x3
    3358:	07c32000 	streqb	r2, [r3, r0]
    335c:	0a000034 	beq	3434 <prog+0x32d0>
    3360:	e7944100 	ldr	r4, [r4, r0, lsl #2]
    3364:	e3540000 	cmp	r4, #0	; 0x0
    3368:	1a000018 	bne	33d0 <prog+0x326c>
    336c:	e20000ff 	and	r0, r0, #255	; 0xff
    3370:	e3a01008 	mov	r1, #8	; 0x8
    3374:	eb000411 	bl	43c0 <setSn_CR>
    3378:	e5952000 	ldr	r2, [r5]
    337c:	e59f30f0 	ldr	r3, [pc, #240]	; 3474 <prog+0x3310>
    3380:	e7c34002 	strb	r4, [r3, r2]
    3384:	ea000011 	b	33d0 <prog+0x326c>
    3388:	e20100ff 	and	r0, r1, #255	; 0xff
    338c:	ebfffd61 	bl	2918 <wait4sendDone>
    3390:	e3500001 	cmp	r0, #1	; 0x1
    3394:	1a000026 	bne	3434 <prog+0x32d0>
    3398:	e59f60cc 	ldr	r6, [pc, #204]	; 346c <prog+0x3308>
    339c:	e59f30e4 	ldr	r3, [pc, #228]	; 3488 <prog+0x3324>
    33a0:	e5960000 	ldr	r0, [r6]
    33a4:	e7934100 	ldr	r4, [r3, r0, lsl #2]
    33a8:	e59f50c4 	ldr	r5, [pc, #196]	; 3474 <prog+0x3310>
    33ac:	e3540000 	cmp	r4, #0	; 0x0
    33b0:	13a03002 	movne	r3, #2	; 0x2
    33b4:	17c53000 	strneb	r3, [r5, r0]
    33b8:	1a00001d 	bne	3434 <prog+0x32d0>
    33bc:	e20000ff 	and	r0, r0, #255	; 0xff
    33c0:	e3a01008 	mov	r1, #8	; 0x8
    33c4:	eb0003fd 	bl	43c0 <setSn_CR>
    33c8:	e5963000 	ldr	r3, [r6]
    33cc:	e7c54003 	strb	r4, [r5, r3]
    33d0:	ebfffd8c 	bl	2a08 <socket_return>
    33d4:	ea000016 	b	3434 <prog+0x32d0>
    33d8:	e1a02000 	mov	r2, r0
    33dc:	e59f10a0 	ldr	r1, [pc, #160]	; 3484 <prog+0x3320>
    33e0:	e5d50000 	ldrb	r0, [r5]
    33e4:	ebfffd79 	bl	29d0 <send1st_DS>
    33e8:	e5951000 	ldr	r1, [r5]
    33ec:	e59f3094 	ldr	r3, [pc, #148]	; 3488 <prog+0x3324>
    33f0:	e3a0201e 	mov	r2, #30	; 0x1e
    33f4:	e7832101 	str	r2, [r3, r1, lsl #2]
    33f8:	e59f3074 	ldr	r3, [pc, #116]	; 3474 <prog+0x3310>
    33fc:	e3a02002 	mov	r2, #2	; 0x2
    3400:	e7c32001 	strb	r2, [r3, r1]
    3404:	e59f3080 	ldr	r3, [pc, #128]	; 348c <prog+0x3328>
    3408:	e7c36001 	strb	r6, [r3, r1]
    340c:	e59f20b8 	ldr	r2, [pc, #184]	; 34cc <prog+0x3368>
    3410:	e59f30a8 	ldr	r3, [pc, #168]	; 34c0 <prog+0x335c>
    3414:	e7832101 	str	r2, [r3, r1, lsl #2]
    3418:	ea000005 	b	3434 <prog+0x32d0>
    341c:	e59f00ac 	ldr	r0, [pc, #172]	; 34d0 <prog+0x336c>
    3420:	ebfffa9f 	bl	1ea4 <printf>
    3424:	e5d40000 	ldrb	r0, [r4]
    3428:	eb000029 	bl	34d4 <disconnect>
    342c:	e5d40000 	ldrb	r0, [r4]
    3430:	eb0000cf 	bl	3774 <close>
    3434:	e59f2030 	ldr	r2, [pc, #48]	; 346c <prog+0x3308>
    3438:	e5923000 	ldr	r3, [r2]
    343c:	e2833001 	add	r3, r3, #1	; 0x1
    3440:	e3530007 	cmp	r3, #7	; 0x7
    3444:	e5823000 	str	r3, [r2]
    3448:	c3a03000 	movgt	r3, #0	; 0x0
    344c:	c5823000 	strgt	r3, [r2]
    3450:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    3454:	e12fff1e 	bx	lr
    3458:	e59f3058 	ldr	r3, [pc, #88]	; 34b8 <prog+0x3354>
    345c:	e5933000 	ldr	r3, [r3]
    3460:	e3530000 	cmp	r3, #0	; 0x0
    3464:	1afffff2 	bne	3434 <prog+0x32d0>
    3468:	eaffff6f 	b	322c <prog+0x30c8>
    346c:	4000144c 	andmi	r1, r0, ip, asr #8
    3470:	40001470 	andmi	r1, r0, r0, ror r4
    3474:	40001474 	andmi	r1, r0, r4, ror r4
    3478:	40000e60 	andmi	r0, r0, r0, ror #28
    347c:	000005dc 	ldreqd	r0, [r0], -ip
    3480:	00005e78 	andeq	r5, r0, r8, ror lr
    3484:	40001abc 	strmih	r1, [r0], -ip
    3488:	40001cc0 	andmi	r1, r0, r0, asr #25
    348c:	40001444 	andmi	r1, r0, r4, asr #8
    3490:	000062a4 	andeq	r6, r0, r4, lsr #5
    3494:	000062bc 	streqh	r6, [r0], -ip
    3498:	00006300 	andeq	r6, r0, r0, lsl #6
    349c:	40001440 	andmi	r1, r0, r0, asr #8
    34a0:	00006320 	andeq	r6, r0, r0, lsr #6
    34a4:	00006340 	andeq	r6, r0, r0, asr #6
    34a8:	00006350 	andeq	r6, r0, r0, asr r3
    34ac:	00030001 	andeq	r0, r3, r1
    34b0:	00005c88 	andeq	r5, r0, r8, lsl #25
    34b4:	0000636c 	andeq	r6, r0, ip, ror #6
    34b8:	40001ce0 	andmi	r1, r0, r0, ror #25
    34bc:	00002020 	andeq	r2, r0, r0, lsr #32
    34c0:	40001450 	andmi	r1, r0, r0, asr r4
    34c4:	400001fc 	strmid	r0, [r0], -ip
    34c8:	4000147c 	andmi	r1, r0, ip, ror r4
    34cc:	4000023c 	andmi	r0, r0, ip, lsr r2
    34d0:	0000637c 	andeq	r6, r0, ip, ror r3

000034d4 <disconnect>:
   return 1;   
}

void     disconnect(SOCKET s)
{
    34d4:	e52de004 	str	lr, [sp, #-4]!
    34d8:	e20000ff 	and	r0, r0, #255	; 0xff

	setSn_CR(s,Sn_CR_DISCON);     // Disconnect
    34dc:	e3a01008 	mov	r1, #8	; 0x8
    34e0:	eb0003b6 	bl	43c0 <setSn_CR>
}
    34e4:	e49de004 	ldr	lr, [sp], #4
    34e8:	e12fff1e 	bx	lr

000034ec <recv>:

uint8    listen(SOCKET s)
{

  if (getSn_SSR(s) != SOCK_INIT)    {
      #ifdef __DEF_IINCHIP_DBG__
         printf("\n\r%d : SOCKET is not created!",s);
      #endif
      return 0;
  }
  
	setSn_CR(s,Sn_CR_LISTEN);     // listen
   
  return 1;
}  

uint32   recv(SOCKET s, uint8 * buf, uint32 len)
{
    34ec:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    34f0:	e20050ff 	and	r5, r0, #255	; 0xff
  uint16 pack_size=0;
  uint16 v1, tps;

  v1 = IINCHIP_READ(Sn_MR(s)); 
    34f4:	e1a00305 	mov	r0, r5, lsl #6
    34f8:	e24dd004 	sub	sp, sp, #4	; 0x4
    34fc:	e3a03000 	mov	r3, #0	; 0x0
    3500:	e2800c02 	add	r0, r0, #512	; 0x200
    3504:	e1a07001 	mov	r7, r1
    3508:	e1a04002 	mov	r4, r2
    350c:	e1cd30b2 	strh	r3, [sp, #2]
    3510:	ebfffb15 	bl	216c <IINCHIP_READ>
	if( v1 & Sn_MR_ALIGN ) {
    3514:	e3100c01 	tst	r0, #256	; 0x100
		wiz_read_buf(s, buf, (uint32)len);
    3518:	e1a01007 	mov	r1, r7
    351c:	e1a02004 	mov	r2, r4
		setSn_CR(s,Sn_CR_RECV);
		return len;
	}
   
	wiz_read_buf(s, (uint8*)&pack_size, 2);        // extract the PACKET-INFO(DATA packet length)
	pack_size = ((((pack_size << 8 ) & 0xFF00)) | ((pack_size >> 8)& 0x00FF));
	if ( pack_size>IBUF_SIZE ) {
    3520:	e59f6084 	ldr	r6, [pc, #132]	; 35ac <prog+0x3448>
    3524:	e1a00005 	mov	r0, r5
    3528:	1a000017 	bne	358c <recv+0xa0>
    352c:	e28d1002 	add	r1, sp, #2	; 0x2
    3530:	e3a02002 	mov	r2, #2	; 0x2
    3534:	e1a00005 	mov	r0, r5
    3538:	ebfffbcd 	bl	2474 <wiz_read_buf>
    353c:	e1dd20b2 	ldrh	r2, [sp, #2]
    3540:	e1a03402 	mov	r3, r2, lsl #8
    3544:	e2033cff 	and	r3, r3, #65280	; 0xff00
    3548:	e1833422 	orr	r3, r3, r2, lsr #8
    354c:	e1530006 	cmp	r3, r6
		printf("\n\rPack_size too big %d", pack_size);
    3550:	e59f0058 	ldr	r0, [pc, #88]	; 35b0 <prog+0x344c>
    3554:	e1a01003 	mov	r1, r3
    3558:	e1cd30b2 	strh	r3, [sp, #2]
    355c:	9a000003 	bls	3570 <recv+0x84>
    3560:	ebfffa4f 	bl	1ea4 <printf>
		pack_size = IBUF_SIZE;
    3564:	e1a03006 	mov	r3, r6
    3568:	e1cd60b2 	strh	r6, [sp, #2]
    356c:	ea000002 	b	357c <recv+0x90>
	}
	tps = pack_size; 											// ***JD tps keeps original packet size without adjustment to even	
		 
	if ( pack_size&0x01 ) pack_size++;
    3570:	e3130001 	tst	r3, #1	; 0x1
    3574:	e2832001 	add	r2, r3, #1	; 0x1
    3578:	11cd20b2 	strneh	r2, [sp, #2]
	
	wiz_read_buf(s, buf, pack_size);     // copy data 
    357c:	e1dd20b2 	ldrh	r2, [sp, #2]
    3580:	e1a01007 	mov	r1, r7
    3584:	e1a00005 	mov	r0, r5
	setSn_CR(s,Sn_CR_RECV);                      // recv
	
	return (uint32)tps;
    3588:	e1a04003 	mov	r4, r3
    358c:	ebfffbb8 	bl	2474 <wiz_read_buf>
    3590:	e1a00005 	mov	r0, r5
    3594:	e3a01040 	mov	r1, #64	; 0x40
    3598:	eb000388 	bl	43c0 <setSn_CR>
}
    359c:	e1a00004 	mov	r0, r4
    35a0:	e28dd004 	add	sp, sp, #4	; 0x4
    35a4:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    35a8:	e12fff1e 	bx	lr
    35ac:	000005dc 	ldreqd	r0, [r0], -ip
    35b0:	00006390 	muleq	r0, r0, r3

000035b4 <listen>:
    35b4:	e92d4010 	stmdb	sp!, {r4, lr}
    35b8:	e20040ff 	and	r4, r0, #255	; 0xff
    35bc:	e1a00004 	mov	r0, r4
    35c0:	eb000348 	bl	42e8 <getSn_SSR>
    35c4:	e3500013 	cmp	r0, #19	; 0x13
    35c8:	e1a01004 	mov	r1, r4
    35cc:	e59f0024 	ldr	r0, [pc, #36]	; 35f8 <prog+0x3494>
    35d0:	0a000002 	beq	35e0 <listen+0x2c>
    35d4:	ebfffa32 	bl	1ea4 <printf>
    35d8:	e3a00000 	mov	r0, #0	; 0x0
    35dc:	ea000003 	b	35f0 <listen+0x3c>
    35e0:	e1a00004 	mov	r0, r4
    35e4:	e3a01002 	mov	r1, #2	; 0x2
    35e8:	eb000374 	bl	43c0 <setSn_CR>
    35ec:	e3a00001 	mov	r0, #1	; 0x1
    35f0:	e8bd4010 	ldmia	sp!, {r4, lr}
    35f4:	e12fff1e 	bx	lr
    35f8:	000063a8 	andeq	r6, r0, r8, lsr #7

000035fc <connect>:
    35fc:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    3600:	e5d1c000 	ldrb	ip, [r1]
    3604:	e1a02802 	mov	r2, r2, lsl #16
    3608:	e35c00ff 	cmp	ip, #255	; 0xff
    360c:	e1a05001 	mov	r5, r1
    3610:	e20060ff 	and	r6, r0, #255	; 0xff
    3614:	e1a07822 	mov	r7, r2, lsr #16
    3618:	1a000008 	bne	3640 <connect+0x44>
    361c:	e5d13001 	ldrb	r3, [r1, #1]
    3620:	e35300ff 	cmp	r3, #255	; 0xff
    3624:	1a000010 	bne	366c <connect+0x70>
    3628:	e5d13002 	ldrb	r3, [r1, #2]
    362c:	e35300ff 	cmp	r3, #255	; 0xff
    3630:	1a00000d 	bne	366c <connect+0x70>
    3634:	e5d13003 	ldrb	r3, [r1, #3]
    3638:	e35300ff 	cmp	r3, #255	; 0xff
    363c:	ea000009 	b	3668 <connect+0x6c>
    3640:	e35c0000 	cmp	ip, #0	; 0x0
    3644:	1a000008 	bne	366c <connect+0x70>
    3648:	e5d13001 	ldrb	r3, [r1, #1]
    364c:	e3530000 	cmp	r3, #0	; 0x0
    3650:	1a000005 	bne	366c <connect+0x70>
    3654:	e5d13002 	ldrb	r3, [r1, #2]
    3658:	e3530000 	cmp	r3, #0	; 0x0
    365c:	1a000002 	bne	366c <connect+0x70>
    3660:	e5d13003 	ldrb	r3, [r1, #3]
    3664:	e3530000 	cmp	r3, #0	; 0x0
    3668:	0a000001 	beq	3674 <connect+0x78>
    366c:	e3570000 	cmp	r7, #0	; 0x0
    3670:	1a000004 	bne	3688 <connect+0x8c>
    3674:	e1a01006 	mov	r1, r6
    3678:	e59f006c 	ldr	r0, [pc, #108]	; 36ec <prog+0x3588>
    367c:	ebfffa08 	bl	1ea4 <printf>
    3680:	e3a00000 	mov	r0, #0	; 0x0
    3684:	ea000016 	b	36e4 <connect+0xe8>
    3688:	e5d51001 	ldrb	r1, [r5, #1]
    368c:	e081140c 	add	r1, r1, ip, lsl #8
    3690:	e1a04306 	mov	r4, r6, lsl #6
    3694:	e1a01801 	mov	r1, r1, lsl #16
    3698:	e1a01821 	mov	r1, r1, lsr #16
    369c:	e2840f85 	add	r0, r4, #532	; 0x214
    36a0:	ebfffaea 	bl	2250 <IINCHIP_WRITE>
    36a4:	e5d53002 	ldrb	r3, [r5, #2]
    36a8:	e5d51003 	ldrb	r1, [r5, #3]
    36ac:	e0811403 	add	r1, r1, r3, lsl #8
    36b0:	e1a01801 	mov	r1, r1, lsl #16
    36b4:	e2840f85 	add	r0, r4, #532	; 0x214
    36b8:	e2800002 	add	r0, r0, #2	; 0x2
    36bc:	e1a01821 	mov	r1, r1, lsr #16
    36c0:	ebfffae2 	bl	2250 <IINCHIP_WRITE>
    36c4:	e2840e21 	add	r0, r4, #528	; 0x210
    36c8:	e1a01007 	mov	r1, r7
    36cc:	e2800002 	add	r0, r0, #2	; 0x2
    36d0:	ebfffade 	bl	2250 <IINCHIP_WRITE>
    36d4:	e1a00006 	mov	r0, r6
    36d8:	e3a01004 	mov	r1, #4	; 0x4
    36dc:	eb000337 	bl	43c0 <setSn_CR>
    36e0:	e3a00001 	mov	r0, #1	; 0x1
    36e4:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    36e8:	e12fff1e 	bx	lr
    36ec:	000063c8 	andeq	r6, r0, r8, asr #7

000036f0 <socket>:
    36f0:	e20110ff 	and	r1, r1, #255	; 0xff
    36f4:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    36f8:	e1833001 	orr	r3, r3, r1
    36fc:	e20060ff 	and	r6, r0, #255	; 0xff
    3700:	e1a04802 	mov	r4, r2, lsl #16
    3704:	e1a03803 	mov	r3, r3, lsl #16
    3708:	e1a05306 	mov	r5, r6, lsl #6
    370c:	e2850c02 	add	r0, r5, #512	; 0x200
    3710:	e1a04824 	mov	r4, r4, lsr #16
    3714:	e1a01823 	mov	r1, r3, lsr #16
    3718:	e2855f82 	add	r5, r5, #520	; 0x208
    371c:	ebfffacb 	bl	2250 <IINCHIP_WRITE>
    3720:	e2855002 	add	r5, r5, #2	; 0x2
    3724:	e3540000 	cmp	r4, #0	; 0x0
    3728:	e1a01004 	mov	r1, r4
    372c:	e59f203c 	ldr	r2, [pc, #60]	; 3770 <prog+0x360c>
    3730:	e1a00005 	mov	r0, r5
    3734:	1a000006 	bne	3754 <socket+0x64>
    3738:	e1d230b0 	ldrh	r3, [r2]
    373c:	e2833001 	add	r3, r3, #1	; 0x1
    3740:	e1a03803 	mov	r3, r3, lsl #16
    3744:	e1a03823 	mov	r3, r3, lsr #16
    3748:	e1c230b0 	strh	r3, [r2]
    374c:	e1a00005 	mov	r0, r5
    3750:	e1a01003 	mov	r1, r3
    3754:	ebfffabd 	bl	2250 <IINCHIP_WRITE>
    3758:	e1a00006 	mov	r0, r6
    375c:	e3a01001 	mov	r1, #1	; 0x1
    3760:	eb000316 	bl	43c0 <setSn_CR>
    3764:	e3a00001 	mov	r0, #1	; 0x1
    3768:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    376c:	e12fff1e 	bx	lr
    3770:	40001d10 	andmi	r1, r0, r0, lsl sp

00003774 <close>:
    3774:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    3778:	e20050ff 	and	r5, r0, #255	; 0xff
    377c:	e24dd004 	sub	sp, sp, #4	; 0x4
    3780:	e1a00005 	mov	r0, r5
    3784:	eb000359 	bl	44f0 <getSn_MR>
    3788:	e200000f 	and	r0, r0, #15	; 0xf
    378c:	e3500001 	cmp	r0, #1	; 0x1
    3790:	1a00001e 	bne	3810 <close+0x9c>
    3794:	e1a00005 	mov	r0, r5
    3798:	eb000257 	bl	40fc <getSn_TX_FSR>
    379c:	e1a04000 	mov	r4, r0
    37a0:	e1a00005 	mov	r0, r5
    37a4:	eb000058 	bl	390c <getIINCHIP_TxMAX>
    37a8:	e1540000 	cmp	r4, r0
    37ac:	0a000017 	beq	3810 <close+0x9c>
    37b0:	e59f007c 	ldr	r0, [pc, #124]	; 3834 <prog+0x36d0>
    37b4:	ebfff9ba 	bl	1ea4 <printf>
    37b8:	e3a06000 	mov	r6, #0	; 0x0
    37bc:	ea000009 	b	37e8 <close+0x74>
    37c0:	e353080a 	cmp	r3, #655360	; 0xa0000
    37c4:	9a000005 	bls	37e0 <close+0x6c>
    37c8:	eb0003b9 	bl	46b4 <getSIPR>
    37cc:	e1a00005 	mov	r0, r5
    37d0:	e3a01002 	mov	r1, #2	; 0x2
    37d4:	e3a02a03 	mov	r2, #12288	; 0x3000
    37d8:	e3a03000 	mov	r3, #0	; 0x0
    37dc:	ebffffc3 	bl	36f0 <socket>
    37e0:	e3a0000a 	mov	r0, #10	; 0xa
    37e4:	eb00005e 	bl	3964 <wait_10ms>
    37e8:	e1a00005 	mov	r0, r5
    37ec:	eb000242 	bl	40fc <getSn_TX_FSR>
    37f0:	e1a04000 	mov	r4, r0
    37f4:	e1a00005 	mov	r0, r5
    37f8:	eb000043 	bl	390c <getIINCHIP_TxMAX>
    37fc:	e1540000 	cmp	r4, r0
    3800:	e1a03806 	mov	r3, r6, lsl #16
    3804:	e1a0000d 	mov	r0, sp
    3808:	e2866001 	add	r6, r6, #1	; 0x1
    380c:	1affffeb 	bne	37c0 <close+0x4c>
    3810:	e1a00005 	mov	r0, r5
    3814:	e3a010ff 	mov	r1, #255	; 0xff
    3818:	eb00014b 	bl	3d4c <setSn_IR>
    381c:	e1a00005 	mov	r0, r5
    3820:	e3a01010 	mov	r1, #16	; 0x10
    3824:	eb0002e5 	bl	43c0 <setSn_CR>
    3828:	e28dd004 	add	sp, sp, #4	; 0x4
    382c:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    3830:	e12fff1e 	bx	lr
    3834:	000063e8 	andeq	r6, r0, r8, ror #7

00003838 <swaps>:
uint16 swaps(u_int i);
uint32 swapl(uint32 l);

uint16 swaps(u_int i)
{
    3838:	e1a03000 	mov	r3, r0
	u_short ret=0;
	ret = (i & 0xFF) << 8;
    383c:	e1a00420 	mov	r0, r0, lsr #8
    3840:	e1a03c03 	mov	r3, r3, lsl #24
    3844:	e20000ff 	and	r0, r0, #255	; 0xff
	ret |= ((i >> 8)& 0xFF);
	return ret;	
}
    3848:	e1800823 	orr	r0, r0, r3, lsr #16
    384c:	e12fff1e 	bx	lr

00003850 <swapl>:

uint32 swapl(uint32 l)
{
	u_long ret=0;
	ret = (l & 0xFF) << 24;
	ret |= ((l >> 8) & 0xFF) << 16;
    3850:	e1a03400 	mov	r3, r0, lsl #8
    3854:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
    3858:	e1833c00 	orr	r3, r3, r0, lsl #24
	ret |= ((l >> 16) & 0xFF) << 8;
    385c:	e1a02420 	mov	r2, r0, lsr #8
    3860:	e1833c20 	orr	r3, r3, r0, lsr #24
    3864:	e2022cff 	and	r2, r2, #65280	; 0xff00
	ret |= ((l >> 24) & 0xFF);
	return ret;
}
    3868:	e1820003 	orr	r0, r2, r3
    386c:	e12fff1e 	bx	lr

00003870 <htons>:


/**
@brief	Convert 32bit Address(Host Ordering) into Dotted Decimal Format
@return 	a char pointer to a static buffer containing the text address in standard ".'' notation. Otherwise, it returns NULL. 
*/  
char* inet_ntoa(
	unsigned long addr	/**< Pointer variable to store converted value(INPUT) */
	)
{
	static char addr_str[16];
	memset(addr_str,0,16);
	sprintf(addr_str,"%d.%d.%d.%d",(int)(addr>>24 & 0xFF),(int)(addr>>16 & 0xFF),(int)(addr>>8 & 0xFF),(int)(addr & 0xFF));
	return addr_str;
}

#if 0
char* inet_ntoa_pad(unsigned long addr)
{
	static char addr_str[16];
	memset(addr_str,0,16);
	sprintf(addr_str,"%03d.%03d.%03d.%03d",(int)(addr>>24 & 0xFF),(int)(addr>>16 & 0xFF),(int)(addr>>8 & 0xFF),(int)(addr & 0xFF));
	return addr_str;
}

/**
@brief	Converts a string containing an (Ipv4) Internet Protocol decimal dotted address into a 32bit address 
@return 	32bit address (Host Odering)
*/  
uint32 inet_addr(
	unsigned char* addr	/**< dotted notation address string.  */
	)
{
	char i;
	uint32 inetaddr = 0;
	char taddr[30];
	char * nexttok;
	int num;
	strcpy(taddr,addr);
	
	nexttok = taddr;
	for(i = 0; i < 4 ; i++)
	{
		nexttok = strtok(nexttok,".");
		if(nexttok[0] == '0' && nexttok[1] == 'x') num = ATOI(nexttok+2,0x10);
		else num = ATOI(nexttok,10);
		inetaddr = inetaddr << 8;		
		inetaddr |= (num & 0xFF);
		nexttok = NULL;
	}
	return inetaddr;	
}	


/**
@brief	Verify dotted notation IP address string
@return 	success - 1, fail - 0
*/ 
char VerifyIPAddress(
	char* src	/**< pointer to IP address string */
	)
{
	int i;
	int tnum;
	char tsrc[50];
	char* tok = tsrc;
	
	strcpy(tsrc,src);
	
	for(i = 0; i < 4; i++)
	{
		tok = strtok(tok,".");
		if ( !tok ) return 0;
		if(tok[0] == '0' && tok[1] == 'x')
		{
			if(!ValidATOI(tok+2,0x10,&tnum)) return 0;
		}
		else if(!ValidATOI(tok,10,&tnum)) return 0;
		
		if(tnum < 0 || tnum > 255) return 0;
		tok = NULL;
	}
	return 1;	
}


/**
@brief	Output destination IP address of appropriate channel
@return 	32bit destination address (Host Ordering)
*/ 
uint32 GetDestAddr(
	SOCKET s	/**< Channel number which try to get destination IP Address */
	)
{
	uint32 addr=0;
	int i = 0;
	for(i=0; i < 4; i++)
	{
		addr <<=8;
		addr += IINCHIP_READ(Sn_DIPR0(s)+i);
	}
	return addr;
}

/**
@brief	Output destination port number of appropriate channel
@return 	16bit destination port number
*/ 
unsigned int GetDestPort(
	SOCKET s	/**< Channel number which try to get destination port */
	)
{
	u_int port;
	port = ((u_int) IINCHIP_READ(Sn_DPORT0(s))) & 0x00FF;
	port <<= 8;
	port += ((u_int) IINCHIP_READ(Sn_DPORT0(s)+1)) & 0x00FF;
	return port;
}
#endif

/**
@brief	htons function converts a unsigned short from host to TCP/IP network byte order (which is big-endian).
@return 	the value in TCP/IP network byte order
*/ 
uint16 htons( uint16 hostshort )	/**< A 16-bit number in host byte order.  */
{
    3870:	e1a00800 	mov	r0, r0, lsl #16
    3874:	e52de004 	str	lr, [sp, #-4]!
	return swaps(hostshort);
    3878:	e1a00820 	mov	r0, r0, lsr #16
    387c:	ebffffed 	bl	3838 <swaps>
}
    3880:	e49de004 	ldr	lr, [sp], #4
    3884:	e12fff1e 	bx	lr

00003888 <htonl>:


/**
@brief	htonl function converts a unsigned long from host to TCP/IP network byte order (which is big-endian).
@return 	the value in TCP/IP network byte order
*/ 
uint32 htonl( uint32 hostlong )		/**< hostshort  - A 32-bit number in host byte order.  */
{
	return swapl(hostlong);
    3888:	eafffff0 	b	3850 <swapl>

0000388c <ntohs>:
}


/**
@brief	ntohs function converts a unsigned short from TCP/IP network byte order to host byte order (which is little-endian on Intel processors).
@return 	a 16-bit number in host byte order
*/ 
unsigned long ntohs( 	unsigned short netshort )	/**< netshort - network odering 16bit value */
{
    388c:	e1a00800 	mov	r0, r0, lsl #16
    3890:	e52de004 	str	lr, [sp, #-4]!
	return htons(netshort);
    3894:	e1a00820 	mov	r0, r0, lsr #16
    3898:	ebfffff4 	bl	3870 <htons>
}
    389c:	e49de004 	ldr	lr, [sp], #4
    38a0:	e12fff1e 	bx	lr

000038a4 <ntohl>:


/**
@brief	converts a unsigned long from TCP/IP network byte order to host byte order (which is little-endian on Intel processors).
@return 	a 16-bit number in host byte order
*/ 
unsigned long ntohl(unsigned long netlong)
{
	return htonl(netlong);
    38a4:	eafffff7 	b	3888 <htonl>

000038a8 <inet_ntoa>:
    38a8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    38ac:	e59f5050 	ldr	r5, [pc, #80]	; 3904 <prog+0x37a0>
    38b0:	e24dd008 	sub	sp, sp, #8	; 0x8
    38b4:	e1a04000 	mov	r4, r0
    38b8:	e3a01000 	mov	r1, #0	; 0x0
    38bc:	e3a02010 	mov	r2, #16	; 0x10
    38c0:	e1a00005 	mov	r0, r5
    38c4:	eb00077c 	bl	56bc <memset>
    38c8:	e1a03824 	mov	r3, r4, lsr #16
    38cc:	e1a0c424 	mov	ip, r4, lsr #8
    38d0:	e20cc0ff 	and	ip, ip, #255	; 0xff
    38d4:	e1a02c24 	mov	r2, r4, lsr #24
    38d8:	e20330ff 	and	r3, r3, #255	; 0xff
    38dc:	e20440ff 	and	r4, r4, #255	; 0xff
    38e0:	e1a00005 	mov	r0, r5
    38e4:	e59f101c 	ldr	r1, [pc, #28]	; 3908 <prog+0x37a4>
    38e8:	e58dc000 	str	ip, [sp]
    38ec:	e58d4004 	str	r4, [sp, #4]
    38f0:	ebfff95d 	bl	1e6c <sprintf>
    38f4:	e1a00005 	mov	r0, r5
    38f8:	e28dd008 	add	sp, sp, #8	; 0x8
    38fc:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    3900:	e12fff1e 	bx	lr
    3904:	400002b4 	strmih	r0, [r0], -r4
    3908:	00005e10 	andeq	r5, r0, r0, lsl lr

0000390c <getIINCHIP_TxMAX>:

uint32   getIINCHIP_TxMAX(SOCKET s)
{
   return TXMEM_SIZE[s];
}
    390c:	e59f3008 	ldr	r3, [pc, #8]	; 391c <prog+0x37b8>
    3910:	e20000ff 	and	r0, r0, #255	; 0xff
    3914:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    3918:	e12fff1e 	bx	lr
    391c:	40001d34 	andmi	r1, r0, r4, lsr sp

00003920 <getIINCHIP_RxMAX>:

uint32   getIINCHIP_RxMAX(SOCKET s)
{
   return RXMEM_SIZE[s];
}
    3920:	e59f3008 	ldr	r3, [pc, #8]	; 3930 <prog+0x37cc>
    3924:	e20000ff 	and	r0, r0, #255	; 0xff
    3928:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    392c:	e12fff1e 	bx	lr
    3930:	40001d14 	andmi	r1, r0, r4, lsl sp

00003934 <wait_1us>:


void  wait_1us(uint32 us)
{
   uint32 i,j;
   for(i = 0; i < us ; i++)
   {
      for(j = 0; j < 100; j++);
   }
}
    3934:	e12fff1e 	bx	lr

00003938 <wait_1ms>:

void  wait_1ms(uint32 ms)
{
    3938:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    393c:	e1a05000 	mov	r5, r0
    3940:	e3a04000 	mov	r4, #0	; 0x0
    3944:	ea000000 	b	394c <wait_1ms+0x14>
   uint32 i;
   for(i = 0; i < ms ; i++)
   {
     wait_1us(1000);
    3948:	ebfffff9 	bl	3934 <wait_1us>
    394c:	e1540005 	cmp	r4, r5
    3950:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    3954:	e2844001 	add	r4, r4, #1	; 0x1
    3958:	1afffffa 	bne	3948 <wait_1ms+0x10>
   }
   
}
    395c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    3960:	e12fff1e 	bx	lr

00003964 <wait_10ms>:

void  wait_10ms(uint32 ms)
{
    3964:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3968:	e1a05000 	mov	r5, r0
    396c:	e3a04000 	mov	r4, #0	; 0x0
    3970:	ea000000 	b	3978 <wait_10ms+0x14>
   uint32 i;
   for(i = 0; i < ms ; i++)
   {
     wait_1ms(10);
    3974:	ebffffef 	bl	3938 <wait_1ms>
    3978:	e1540005 	cmp	r4, r5
    397c:	e3a0000a 	mov	r0, #10	; 0xa
    3980:	e2844001 	add	r4, r4, #1	; 0x1
    3984:	1afffffa 	bne	3974 <wait_10ms+0x10>
   }
}
    3988:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    398c:	e12fff1e 	bx	lr

00003990 <sysinit>:
    3990:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3994:	e3a06000 	mov	r6, #0	; 0x0
    3998:	e59f81c4 	ldr	r8, [pc, #452]	; 3b64 <prog+0x3a00>
    399c:	e59f71c4 	ldr	r7, [pc, #452]	; 3b68 <prog+0x3a04>
    39a0:	e1a04000 	mov	r4, r0
    39a4:	e1a05001 	mov	r5, r1
    39a8:	e1a0c006 	mov	ip, r6
    39ac:	e1a00006 	mov	r0, r6
    39b0:	e7d03004 	ldrb	r3, [r0, r4]
    39b4:	e0862003 	add	r2, r6, r3
    39b8:	e1a0e503 	mov	lr, r3, lsl #10
    39bc:	e1a02802 	mov	r2, r2, lsl #16
    39c0:	e3530040 	cmp	r3, #64	; 0x40
    39c4:	e1a03800 	mov	r3, r0, lsl #16
    39c8:	e1a06822 	mov	r6, r2, lsr #16
    39cc:	e1a01823 	mov	r1, r3, lsr #16
    39d0:	8a000014 	bhi	3a28 <sysinit+0x98>
    39d4:	e7d02005 	ldrb	r2, [r0, r5]
    39d8:	e08c3002 	add	r3, ip, r2
    39dc:	e1a03803 	mov	r3, r3, lsl #16
    39e0:	e3520040 	cmp	r2, #64	; 0x40
    39e4:	e1a0c823 	mov	ip, r3, lsr #16
    39e8:	8a000012 	bhi	3a38 <sysinit+0xa8>
    39ec:	e488e004 	str	lr, [r8], #4
    39f0:	e7d03005 	ldrb	r3, [r0, r5]
    39f4:	e2800001 	add	r0, r0, #1	; 0x1
    39f8:	e1a03503 	mov	r3, r3, lsl #10
    39fc:	e3500008 	cmp	r0, #8	; 0x8
    3a00:	e4873004 	str	r3, [r7], #4
    3a04:	1affffe9 	bne	39b0 <sysinit+0x20>
    3a08:	e2167007 	ands	r7, r6, #7	; 0x7
    3a0c:	1a000002 	bne	3a1c <sysinit+0x8c>
    3a10:	e086300c 	add	r3, r6, ip
    3a14:	e3530080 	cmp	r3, #128	; 0x80
    3a18:	0a000008 	beq	3a40 <sysinit+0xb0>
    3a1c:	e59f0148 	ldr	r0, [pc, #328]	; 3b6c <prog+0x3a08>
    3a20:	ebfff91f 	bl	1ea4 <printf>
    3a24:	ea000001 	b	3a30 <sysinit+0xa0>
    3a28:	e59f0140 	ldr	r0, [pc, #320]	; 3b70 <prog+0x3a0c>
    3a2c:	ebfff91c 	bl	1ea4 <printf>
    3a30:	e3a00000 	mov	r0, #0	; 0x0
    3a34:	ea000048 	b	3b5c <sysinit+0x1cc>
    3a38:	e59f0134 	ldr	r0, [pc, #308]	; 3b74 <prog+0x3a10>
    3a3c:	eafffffa 	b	3a2c <sysinit+0x9c>
    3a40:	e5d43000 	ldrb	r3, [r4]
    3a44:	e5d41001 	ldrb	r1, [r4, #1]
    3a48:	e0811403 	add	r1, r1, r3, lsl #8
    3a4c:	e1a01801 	mov	r1, r1, lsl #16
    3a50:	e1a01821 	mov	r1, r1, lsr #16
    3a54:	e3a00020 	mov	r0, #32	; 0x20
    3a58:	ebfff9fc 	bl	2250 <IINCHIP_WRITE>
    3a5c:	e5d43002 	ldrb	r3, [r4, #2]
    3a60:	e5d41003 	ldrb	r1, [r4, #3]
    3a64:	e0811403 	add	r1, r1, r3, lsl #8
    3a68:	e1a01801 	mov	r1, r1, lsl #16
    3a6c:	e1a01821 	mov	r1, r1, lsr #16
    3a70:	e3a00022 	mov	r0, #34	; 0x22
    3a74:	ebfff9f5 	bl	2250 <IINCHIP_WRITE>
    3a78:	e5d43004 	ldrb	r3, [r4, #4]
    3a7c:	e5d41005 	ldrb	r1, [r4, #5]
    3a80:	e0811403 	add	r1, r1, r3, lsl #8
    3a84:	e1a01801 	mov	r1, r1, lsl #16
    3a88:	e1a01821 	mov	r1, r1, lsr #16
    3a8c:	e3a00024 	mov	r0, #36	; 0x24
    3a90:	ebfff9ee 	bl	2250 <IINCHIP_WRITE>
    3a94:	e5d43006 	ldrb	r3, [r4, #6]
    3a98:	e5d41007 	ldrb	r1, [r4, #7]
    3a9c:	e0811403 	add	r1, r1, r3, lsl #8
    3aa0:	e1a01801 	mov	r1, r1, lsl #16
    3aa4:	e1a01821 	mov	r1, r1, lsr #16
    3aa8:	e3a00026 	mov	r0, #38	; 0x26
    3aac:	ebfff9e7 	bl	2250 <IINCHIP_WRITE>
    3ab0:	e5d53000 	ldrb	r3, [r5]
    3ab4:	e5d51001 	ldrb	r1, [r5, #1]
    3ab8:	e0811403 	add	r1, r1, r3, lsl #8
    3abc:	e1a01801 	mov	r1, r1, lsl #16
    3ac0:	e1a01821 	mov	r1, r1, lsr #16
    3ac4:	e3a00028 	mov	r0, #40	; 0x28
    3ac8:	ebfff9e0 	bl	2250 <IINCHIP_WRITE>
    3acc:	e5d53002 	ldrb	r3, [r5, #2]
    3ad0:	e5d51003 	ldrb	r1, [r5, #3]
    3ad4:	e0811403 	add	r1, r1, r3, lsl #8
    3ad8:	e1a01801 	mov	r1, r1, lsl #16
    3adc:	e1a01821 	mov	r1, r1, lsr #16
    3ae0:	e3a0002a 	mov	r0, #42	; 0x2a
    3ae4:	ebfff9d9 	bl	2250 <IINCHIP_WRITE>
    3ae8:	e5d53004 	ldrb	r3, [r5, #4]
    3aec:	e5d51005 	ldrb	r1, [r5, #5]
    3af0:	e0811403 	add	r1, r1, r3, lsl #8
    3af4:	e1a01801 	mov	r1, r1, lsl #16
    3af8:	e1a01821 	mov	r1, r1, lsr #16
    3afc:	e3a0002c 	mov	r0, #44	; 0x2c
    3b00:	ebfff9d2 	bl	2250 <IINCHIP_WRITE>
    3b04:	e5d51007 	ldrb	r1, [r5, #7]
    3b08:	e5d53006 	ldrb	r3, [r5, #6]
    3b0c:	e0811403 	add	r1, r1, r3, lsl #8
    3b10:	e1a01801 	mov	r1, r1, lsl #16
    3b14:	e1a01821 	mov	r1, r1, lsr #16
    3b18:	e3a0002e 	mov	r0, #46	; 0x2e
    3b1c:	ebfff9cb 	bl	2250 <IINCHIP_WRITE>
    3b20:	e1a01007 	mov	r1, r7
    3b24:	e1a00007 	mov	r0, r7
    3b28:	ea000001 	b	3b34 <sysinit+0x1a4>
    3b2c:	e1a03081 	mov	r3, r1, lsl #1
    3b30:	e3831001 	orr	r1, r3, #1	; 0x1
    3b34:	e1a02800 	mov	r2, r0, lsl #16
    3b38:	e1a031a6 	mov	r3, r6, lsr #3
    3b3c:	e1530822 	cmp	r3, r2, lsr #16
    3b40:	e2800001 	add	r0, r0, #1	; 0x1
    3b44:	8afffff8 	bhi	3b2c <sysinit+0x19c>
    3b48:	e1a01801 	mov	r1, r1, lsl #16
    3b4c:	e3a00030 	mov	r0, #48	; 0x30
    3b50:	e1a01821 	mov	r1, r1, lsr #16
    3b54:	ebfff9bd 	bl	2250 <IINCHIP_WRITE>
    3b58:	e3a00001 	mov	r0, #1	; 0x1
    3b5c:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    3b60:	e12fff1e 	bx	lr
    3b64:	40001d34 	andmi	r1, r0, r4, lsr sp
    3b68:	40001d14 	andmi	r1, r0, r4, lsl sp
    3b6c:	00006448 	andeq	r6, r0, r8, asr #8
    3b70:	000063f8 	streqd	r6, [r0], -r8
    3b74:	00006420 	andeq	r6, r0, r0, lsr #8

00003b78 <setSn_FRAGR>:
    3b78:	e1a00300 	mov	r0, r0, lsl #6
    3b7c:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3b80:	e52de004 	str	lr, [sp, #-4]!
    3b84:	e20110ff 	and	r1, r1, #255	; 0xff
    3b88:	e2800f8b 	add	r0, r0, #556	; 0x22c
    3b8c:	ebfff9af 	bl	2250 <IINCHIP_WRITE>
    3b90:	e49de004 	ldr	lr, [sp], #4
    3b94:	e12fff1e 	bx	lr

00003b98 <setSn_TTLR>:
    3b98:	e1a00300 	mov	r0, r0, lsl #6
    3b9c:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3ba0:	e2800f87 	add	r0, r0, #540	; 0x21c
    3ba4:	e52de004 	str	lr, [sp, #-4]!
    3ba8:	e20110ff 	and	r1, r1, #255	; 0xff
    3bac:	e2800002 	add	r0, r0, #2	; 0x2
    3bb0:	ebfff9a6 	bl	2250 <IINCHIP_WRITE>
    3bb4:	e49de004 	ldr	lr, [sp], #4
    3bb8:	e12fff1e 	bx	lr

00003bbc <setSn_TOSR>:
    3bbc:	e1a00300 	mov	r0, r0, lsl #6
    3bc0:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3bc4:	e52de004 	str	lr, [sp, #-4]!
    3bc8:	e20110ff 	and	r1, r1, #255	; 0xff
    3bcc:	e2800f87 	add	r0, r0, #540	; 0x21c
    3bd0:	ebfff99e 	bl	2250 <IINCHIP_WRITE>
    3bd4:	e49de004 	ldr	lr, [sp], #4
    3bd8:	e12fff1e 	bx	lr

00003bdc <setSn_TX_FIFOR>:
    3bdc:	e1a00300 	mov	r0, r0, lsl #6
    3be0:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3be4:	e1a01801 	mov	r1, r1, lsl #16
    3be8:	e2800f8b 	add	r0, r0, #556	; 0x22c
    3bec:	e52de004 	str	lr, [sp, #-4]!
    3bf0:	e2800002 	add	r0, r0, #2	; 0x2
    3bf4:	e1a01821 	mov	r1, r1, lsr #16
    3bf8:	ebfff994 	bl	2250 <IINCHIP_WRITE>
    3bfc:	e49de004 	ldr	lr, [sp], #4
    3c00:	e12fff1e 	bx	lr

00003c04 <setSn_TX_WRSR>:
    3c04:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3c08:	e1a04300 	mov	r4, r0, lsl #6
    3c0c:	e2044dff 	and	r4, r4, #16320	; 0x3fc0
    3c10:	e2840e22 	add	r0, r4, #544	; 0x220
    3c14:	e1a05001 	mov	r5, r1
    3c18:	e1a01821 	mov	r1, r1, lsr #16
    3c1c:	ebfff98b 	bl	2250 <IINCHIP_WRITE>
    3c20:	e1a05805 	mov	r5, r5, lsl #16
    3c24:	e2840e22 	add	r0, r4, #544	; 0x220
    3c28:	e2800002 	add	r0, r0, #2	; 0x2
    3c2c:	e1a01825 	mov	r1, r5, lsr #16
    3c30:	ebfff986 	bl	2250 <IINCHIP_WRITE>
    3c34:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    3c38:	e12fff1e 	bx	lr

00003c3c <setSn_MSSR>:
    3c3c:	e1a00300 	mov	r0, r0, lsl #6
    3c40:	e1a01801 	mov	r1, r1, lsl #16
    3c44:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3c48:	e52de004 	str	lr, [sp, #-4]!
    3c4c:	e2800f86 	add	r0, r0, #536	; 0x218
    3c50:	e1a01821 	mov	r1, r1, lsr #16
    3c54:	ebfff97d 	bl	2250 <IINCHIP_WRITE>
    3c58:	e49de004 	ldr	lr, [sp], #4
    3c5c:	e12fff1e 	bx	lr

00003c60 <setSn_DIPR>:
    3c60:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3c64:	e1a05001 	mov	r5, r1
    3c68:	e5d13000 	ldrb	r3, [r1]
    3c6c:	e5d11001 	ldrb	r1, [r1, #1]
    3c70:	e1a04300 	mov	r4, r0, lsl #6
    3c74:	e0811403 	add	r1, r1, r3, lsl #8
    3c78:	e2044dff 	and	r4, r4, #16320	; 0x3fc0
    3c7c:	e1a01801 	mov	r1, r1, lsl #16
    3c80:	e2840f85 	add	r0, r4, #532	; 0x214
    3c84:	e1a01821 	mov	r1, r1, lsr #16
    3c88:	ebfff970 	bl	2250 <IINCHIP_WRITE>
    3c8c:	e5d51003 	ldrb	r1, [r5, #3]
    3c90:	e5d53002 	ldrb	r3, [r5, #2]
    3c94:	e0811403 	add	r1, r1, r3, lsl #8
    3c98:	e2840f85 	add	r0, r4, #532	; 0x214
    3c9c:	e1a01801 	mov	r1, r1, lsl #16
    3ca0:	e2800002 	add	r0, r0, #2	; 0x2
    3ca4:	e1a01821 	mov	r1, r1, lsr #16
    3ca8:	ebfff968 	bl	2250 <IINCHIP_WRITE>
    3cac:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    3cb0:	e12fff1e 	bx	lr

00003cb4 <setSn_DPORTR>:
    3cb4:	e1a00300 	mov	r0, r0, lsl #6
    3cb8:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3cbc:	e1a01801 	mov	r1, r1, lsl #16
    3cc0:	e2800e21 	add	r0, r0, #528	; 0x210
    3cc4:	e52de004 	str	lr, [sp, #-4]!
    3cc8:	e2800002 	add	r0, r0, #2	; 0x2
    3ccc:	e1a01821 	mov	r1, r1, lsr #16
    3cd0:	ebfff95e 	bl	2250 <IINCHIP_WRITE>
    3cd4:	e49de004 	ldr	lr, [sp], #4
    3cd8:	e12fff1e 	bx	lr

00003cdc <setSn_DHAR>:
    3cdc:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3ce0:	e1a04001 	mov	r4, r1
    3ce4:	e5d13000 	ldrb	r3, [r1]
    3ce8:	e5d11001 	ldrb	r1, [r1, #1]
    3cec:	e1a05300 	mov	r5, r0, lsl #6
    3cf0:	e0811403 	add	r1, r1, r3, lsl #8
    3cf4:	e2055dff 	and	r5, r5, #16320	; 0x3fc0
    3cf8:	e1a01801 	mov	r1, r1, lsl #16
    3cfc:	e2850f83 	add	r0, r5, #524	; 0x20c
    3d00:	e1a01821 	mov	r1, r1, lsr #16
    3d04:	ebfff951 	bl	2250 <IINCHIP_WRITE>
    3d08:	e5d43002 	ldrb	r3, [r4, #2]
    3d0c:	e5d41003 	ldrb	r1, [r4, #3]
    3d10:	e0811403 	add	r1, r1, r3, lsl #8
    3d14:	e2850f83 	add	r0, r5, #524	; 0x20c
    3d18:	e1a01801 	mov	r1, r1, lsl #16
    3d1c:	e2800002 	add	r0, r0, #2	; 0x2
    3d20:	e1a01821 	mov	r1, r1, lsr #16
    3d24:	ebfff949 	bl	2250 <IINCHIP_WRITE>
    3d28:	e5d41005 	ldrb	r1, [r4, #5]
    3d2c:	e5d43004 	ldrb	r3, [r4, #4]
    3d30:	e0811403 	add	r1, r1, r3, lsl #8
    3d34:	e1a01801 	mov	r1, r1, lsl #16
    3d38:	e2850e21 	add	r0, r5, #528	; 0x210
    3d3c:	e1a01821 	mov	r1, r1, lsr #16
    3d40:	ebfff942 	bl	2250 <IINCHIP_WRITE>
    3d44:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    3d48:	e12fff1e 	bx	lr

00003d4c <setSn_IR>:
    3d4c:	e1a00300 	mov	r0, r0, lsl #6
    3d50:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3d54:	e2800f81 	add	r0, r0, #516	; 0x204
    3d58:	e52de004 	str	lr, [sp, #-4]!
    3d5c:	e20110ff 	and	r1, r1, #255	; 0xff
    3d60:	e2800002 	add	r0, r0, #2	; 0x2
    3d64:	ebfff939 	bl	2250 <IINCHIP_WRITE>
    3d68:	e49de004 	ldr	lr, [sp], #4
    3d6c:	e12fff1e 	bx	lr

00003d70 <setSn_IMR>:
    3d70:	e1a00300 	mov	r0, r0, lsl #6
    3d74:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3d78:	e52de004 	str	lr, [sp, #-4]!
    3d7c:	e20110ff 	and	r1, r1, #255	; 0xff
    3d80:	e2800f81 	add	r0, r0, #516	; 0x204
    3d84:	ebfff931 	bl	2250 <IINCHIP_WRITE>
    3d88:	e49de004 	ldr	lr, [sp], #4
    3d8c:	e12fff1e 	bx	lr

00003d90 <setSn_MR>:
    3d90:	e1a00300 	mov	r0, r0, lsl #6
    3d94:	e1a01801 	mov	r1, r1, lsl #16
    3d98:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3d9c:	e52de004 	str	lr, [sp, #-4]!
    3da0:	e2800c02 	add	r0, r0, #512	; 0x200
    3da4:	e1a01821 	mov	r1, r1, lsr #16
    3da8:	ebfff928 	bl	2250 <IINCHIP_WRITE>
    3dac:	e49de004 	ldr	lr, [sp], #4
    3db0:	e12fff1e 	bx	lr

00003db4 <setPn_BDPTHR>:
    3db4:	e1a00100 	mov	r0, r0, lsl #2
    3db8:	e1a01801 	mov	r1, r1, lsl #16
    3dbc:	e2000fff 	and	r0, r0, #1020	; 0x3fc
    3dc0:	e52de004 	str	lr, [sp, #-4]!
    3dc4:	e2800062 	add	r0, r0, #98	; 0x62
    3dc8:	e1a01821 	mov	r1, r1, lsr #16
    3dcc:	ebfff91f 	bl	2250 <IINCHIP_WRITE>
    3dd0:	e49de004 	ldr	lr, [sp], #4
    3dd4:	e12fff1e 	bx	lr

00003dd8 <setPn_BRDYR>:
    3dd8:	e1a00100 	mov	r0, r0, lsl #2
    3ddc:	e2000fff 	and	r0, r0, #1020	; 0x3fc
    3de0:	e52de004 	str	lr, [sp, #-4]!
    3de4:	e20110ff 	and	r1, r1, #255	; 0xff
    3de8:	e2800060 	add	r0, r0, #96	; 0x60
    3dec:	ebfff917 	bl	2250 <IINCHIP_WRITE>
    3df0:	e49de004 	ldr	lr, [sp], #4
    3df4:	e12fff1e 	bx	lr

00003df8 <setPMAGICR>:
    3df8:	e20010ff 	and	r1, r0, #255	; 0xff
    3dfc:	e52de004 	str	lr, [sp, #-4]!
    3e00:	e3a00038 	mov	r0, #56	; 0x38
    3e04:	ebfff911 	bl	2250 <IINCHIP_WRITE>
    3e08:	e49de004 	ldr	lr, [sp], #4
    3e0c:	e12fff1e 	bx	lr

00003e10 <setPTIMER>:
    3e10:	e20010ff 	and	r1, r0, #255	; 0xff
    3e14:	e52de004 	str	lr, [sp, #-4]!
    3e18:	e3a00036 	mov	r0, #54	; 0x36
    3e1c:	ebfff90b 	bl	2250 <IINCHIP_WRITE>
    3e20:	e49de004 	ldr	lr, [sp], #4
    3e24:	e12fff1e 	bx	lr

00003e28 <setRCR>:
    3e28:	e20010ff 	and	r1, r0, #255	; 0xff
    3e2c:	e52de004 	str	lr, [sp, #-4]!
    3e30:	e3a0001e 	mov	r0, #30	; 0x1e
    3e34:	ebfff905 	bl	2250 <IINCHIP_WRITE>
    3e38:	e49de004 	ldr	lr, [sp], #4
    3e3c:	e12fff1e 	bx	lr

00003e40 <setRTR>:
    3e40:	e1a01800 	mov	r1, r0, lsl #16
    3e44:	e52de004 	str	lr, [sp, #-4]!
    3e48:	e1a01821 	mov	r1, r1, lsr #16
    3e4c:	e3a0001c 	mov	r0, #28	; 0x1c
    3e50:	ebfff8fe 	bl	2250 <IINCHIP_WRITE>
    3e54:	e49de004 	ldr	lr, [sp], #4
    3e58:	e12fff1e 	bx	lr

00003e5c <setSIPR>:
    3e5c:	e92d4010 	stmdb	sp!, {r4, lr}
    3e60:	e5d03000 	ldrb	r3, [r0]
    3e64:	e5d01001 	ldrb	r1, [r0, #1]
    3e68:	e0811403 	add	r1, r1, r3, lsl #8
    3e6c:	e1a01801 	mov	r1, r1, lsl #16
    3e70:	e1a04000 	mov	r4, r0
    3e74:	e1a01821 	mov	r1, r1, lsr #16
    3e78:	e3a00018 	mov	r0, #24	; 0x18
    3e7c:	ebfff8f3 	bl	2250 <IINCHIP_WRITE>
    3e80:	e5d41003 	ldrb	r1, [r4, #3]
    3e84:	e5d43002 	ldrb	r3, [r4, #2]
    3e88:	e0811403 	add	r1, r1, r3, lsl #8
    3e8c:	e1a01801 	mov	r1, r1, lsl #16
    3e90:	e1a01821 	mov	r1, r1, lsr #16
    3e94:	e3a0001a 	mov	r0, #26	; 0x1a
    3e98:	ebfff8ec 	bl	2250 <IINCHIP_WRITE>
    3e9c:	e8bd4010 	ldmia	sp!, {r4, lr}
    3ea0:	e12fff1e 	bx	lr

00003ea4 <setSUBR>:
    3ea4:	e92d4010 	stmdb	sp!, {r4, lr}
    3ea8:	e5d03000 	ldrb	r3, [r0]
    3eac:	e5d01001 	ldrb	r1, [r0, #1]
    3eb0:	e0811403 	add	r1, r1, r3, lsl #8
    3eb4:	e1a01801 	mov	r1, r1, lsl #16
    3eb8:	e1a04000 	mov	r4, r0
    3ebc:	e1a01821 	mov	r1, r1, lsr #16
    3ec0:	e3a00014 	mov	r0, #20	; 0x14
    3ec4:	ebfff8e1 	bl	2250 <IINCHIP_WRITE>
    3ec8:	e5d41003 	ldrb	r1, [r4, #3]
    3ecc:	e5d43002 	ldrb	r3, [r4, #2]
    3ed0:	e0811403 	add	r1, r1, r3, lsl #8
    3ed4:	e1a01801 	mov	r1, r1, lsl #16
    3ed8:	e1a01821 	mov	r1, r1, lsr #16
    3edc:	e3a00016 	mov	r0, #22	; 0x16
    3ee0:	ebfff8da 	bl	2250 <IINCHIP_WRITE>
    3ee4:	e8bd4010 	ldmia	sp!, {r4, lr}
    3ee8:	e12fff1e 	bx	lr

00003eec <setGAR>:
    3eec:	e92d4010 	stmdb	sp!, {r4, lr}
    3ef0:	e5d03000 	ldrb	r3, [r0]
    3ef4:	e5d01001 	ldrb	r1, [r0, #1]
    3ef8:	e0811403 	add	r1, r1, r3, lsl #8
    3efc:	e1a01801 	mov	r1, r1, lsl #16
    3f00:	e1a04000 	mov	r4, r0
    3f04:	e1a01821 	mov	r1, r1, lsr #16
    3f08:	e3a00010 	mov	r0, #16	; 0x10
    3f0c:	ebfff8cf 	bl	2250 <IINCHIP_WRITE>
    3f10:	e5d41003 	ldrb	r1, [r4, #3]
    3f14:	e5d43002 	ldrb	r3, [r4, #2]
    3f18:	e0811403 	add	r1, r1, r3, lsl #8
    3f1c:	e1a01801 	mov	r1, r1, lsl #16
    3f20:	e1a01821 	mov	r1, r1, lsr #16
    3f24:	e3a00012 	mov	r0, #18	; 0x12
    3f28:	ebfff8c8 	bl	2250 <IINCHIP_WRITE>
    3f2c:	e8bd4010 	ldmia	sp!, {r4, lr}
    3f30:	e12fff1e 	bx	lr

00003f34 <setSHAR>:
    3f34:	e92d4010 	stmdb	sp!, {r4, lr}
    3f38:	e5d03000 	ldrb	r3, [r0]
    3f3c:	e5d01001 	ldrb	r1, [r0, #1]
    3f40:	e0811403 	add	r1, r1, r3, lsl #8
    3f44:	e1a01801 	mov	r1, r1, lsl #16
    3f48:	e1a04000 	mov	r4, r0
    3f4c:	e1a01821 	mov	r1, r1, lsr #16
    3f50:	e3a00008 	mov	r0, #8	; 0x8
    3f54:	ebfff8bd 	bl	2250 <IINCHIP_WRITE>
    3f58:	e5d43002 	ldrb	r3, [r4, #2]
    3f5c:	e5d41003 	ldrb	r1, [r4, #3]
    3f60:	e0811403 	add	r1, r1, r3, lsl #8
    3f64:	e1a01801 	mov	r1, r1, lsl #16
    3f68:	e1a01821 	mov	r1, r1, lsr #16
    3f6c:	e3a0000a 	mov	r0, #10	; 0xa
    3f70:	ebfff8b6 	bl	2250 <IINCHIP_WRITE>
    3f74:	e5d41005 	ldrb	r1, [r4, #5]
    3f78:	e5d43004 	ldrb	r3, [r4, #4]
    3f7c:	e0811403 	add	r1, r1, r3, lsl #8
    3f80:	e1a01801 	mov	r1, r1, lsl #16
    3f84:	e1a01821 	mov	r1, r1, lsr #16
    3f88:	e3a0000c 	mov	r0, #12	; 0xc
    3f8c:	ebfff8af 	bl	2250 <IINCHIP_WRITE>
    3f90:	e8bd4010 	ldmia	sp!, {r4, lr}
    3f94:	e12fff1e 	bx	lr

00003f98 <setIMR>:
    3f98:	e1a01800 	mov	r1, r0, lsl #16
    3f9c:	e52de004 	str	lr, [sp, #-4]!
    3fa0:	e1a01821 	mov	r1, r1, lsr #16
    3fa4:	e3a00004 	mov	r0, #4	; 0x4
    3fa8:	ebfff8a8 	bl	2250 <IINCHIP_WRITE>
    3fac:	e49de004 	ldr	lr, [sp], #4
    3fb0:	e12fff1e 	bx	lr

00003fb4 <setIR>:
    3fb4:	e1a01800 	mov	r1, r0, lsl #16
    3fb8:	e52de004 	str	lr, [sp, #-4]!
    3fbc:	e1a01821 	mov	r1, r1, lsr #16
    3fc0:	e3a00002 	mov	r0, #2	; 0x2
    3fc4:	ebfff8a1 	bl	2250 <IINCHIP_WRITE>
    3fc8:	e49de004 	ldr	lr, [sp], #4
    3fcc:	e12fff1e 	bx	lr

00003fd0 <getSn_FRAGR>:
    3fd0:	e1a00300 	mov	r0, r0, lsl #6
    3fd4:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3fd8:	e52de004 	str	lr, [sp, #-4]!
    3fdc:	e2800f8b 	add	r0, r0, #556	; 0x22c
    3fe0:	ebfff861 	bl	216c <IINCHIP_READ>
    3fe4:	e20000ff 	and	r0, r0, #255	; 0xff
    3fe8:	e49de004 	ldr	lr, [sp], #4
    3fec:	e12fff1e 	bx	lr

00003ff0 <getSn_TTLR>:
    3ff0:	e1a00300 	mov	r0, r0, lsl #6
    3ff4:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    3ff8:	e2800f87 	add	r0, r0, #540	; 0x21c
    3ffc:	e52de004 	str	lr, [sp, #-4]!
    4000:	e2800002 	add	r0, r0, #2	; 0x2
    4004:	ebfff858 	bl	216c <IINCHIP_READ>
    4008:	e20000ff 	and	r0, r0, #255	; 0xff
    400c:	e49de004 	ldr	lr, [sp], #4
    4010:	e12fff1e 	bx	lr

00004014 <getSn_TOSR>:
    4014:	e1a00300 	mov	r0, r0, lsl #6
    4018:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    401c:	e52de004 	str	lr, [sp, #-4]!
    4020:	e2800f87 	add	r0, r0, #540	; 0x21c
    4024:	ebfff850 	bl	216c <IINCHIP_READ>
    4028:	e20000ff 	and	r0, r0, #255	; 0xff
    402c:	e49de004 	ldr	lr, [sp], #4
    4030:	e12fff1e 	bx	lr

00004034 <setSn_PROTOR>:
    4034:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    4038:	e1a04300 	mov	r4, r0, lsl #6
    403c:	e2044dff 	and	r4, r4, #16320	; 0x3fc0
    4040:	e2844f86 	add	r4, r4, #536	; 0x218
    4044:	e2844002 	add	r4, r4, #2	; 0x2
    4048:	e1a00004 	mov	r0, r4
    404c:	e20150ff 	and	r5, r1, #255	; 0xff
    4050:	ebfff845 	bl	216c <IINCHIP_READ>
    4054:	e2001cff 	and	r1, r0, #65280	; 0xff00
    4058:	e0811005 	add	r1, r1, r5
    405c:	e1a01801 	mov	r1, r1, lsl #16
    4060:	e1a00004 	mov	r0, r4
    4064:	e1a01821 	mov	r1, r1, lsr #16
    4068:	ebfff878 	bl	2250 <IINCHIP_WRITE>
    406c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    4070:	e12fff1e 	bx	lr

00004074 <getSn_PROTOR>:
    4074:	e1a00300 	mov	r0, r0, lsl #6
    4078:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    407c:	e2800f86 	add	r0, r0, #536	; 0x218
    4080:	e52de004 	str	lr, [sp, #-4]!
    4084:	e2800002 	add	r0, r0, #2	; 0x2
    4088:	ebfff837 	bl	216c <IINCHIP_READ>
    408c:	e20000ff 	and	r0, r0, #255	; 0xff
    4090:	e49de004 	ldr	lr, [sp], #4
    4094:	e12fff1e 	bx	lr

00004098 <getSn_RX_FIFOR>:
    4098:	e1a00300 	mov	r0, r0, lsl #6
    409c:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    40a0:	e52de004 	str	lr, [sp, #-4]!
    40a4:	e2800e23 	add	r0, r0, #560	; 0x230
    40a8:	ebfff82f 	bl	216c <IINCHIP_READ>
    40ac:	e49de004 	ldr	lr, [sp], #4
    40b0:	e12fff1e 	bx	lr

000040b4 <getSn_RX_RSR>:
    40b4:	e1a00300 	mov	r0, r0, lsl #6
    40b8:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    40bc:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    40c0:	e2805f8a 	add	r5, r0, #552	; 0x228
    40c4:	e2855002 	add	r5, r5, #2	; 0x2
    40c8:	e2806f8a 	add	r6, r0, #552	; 0x228
    40cc:	e3a07001 	mov	r7, #1	; 0x1
    40d0:	e1a00006 	mov	r0, r6
    40d4:	ebfff824 	bl	216c <IINCHIP_READ>
    40d8:	e1a04000 	mov	r4, r0
    40dc:	e1a00005 	mov	r0, r5
    40e0:	ebfff821 	bl	216c <IINCHIP_READ>
    40e4:	e0800804 	add	r0, r0, r4, lsl #16
    40e8:	e1500007 	cmp	r0, r7
    40ec:	e1a07000 	mov	r7, r0
    40f0:	1afffff6 	bne	40d0 <getSn_RX_RSR+0x1c>
    40f4:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    40f8:	e12fff1e 	bx	lr

000040fc <getSn_TX_FSR>:
    40fc:	e1a00300 	mov	r0, r0, lsl #6
    4100:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    4104:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    4108:	e2805f89 	add	r5, r0, #548	; 0x224
    410c:	e2855002 	add	r5, r5, #2	; 0x2
    4110:	e2806f89 	add	r6, r0, #548	; 0x224
    4114:	e3a07000 	mov	r7, #0	; 0x0
    4118:	e1a00006 	mov	r0, r6
    411c:	ebfff812 	bl	216c <IINCHIP_READ>
    4120:	e1a04000 	mov	r4, r0
    4124:	e1a00005 	mov	r0, r5
    4128:	ebfff80f 	bl	216c <IINCHIP_READ>
    412c:	e0800804 	add	r0, r0, r4, lsl #16
    4130:	e1500007 	cmp	r0, r7
    4134:	e1a07000 	mov	r7, r0
    4138:	1afffff6 	bne	4118 <getSn_TX_FSR+0x1c>
    413c:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    4140:	e12fff1e 	bx	lr

00004144 <getSn_TX_WRSR>:
    4144:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    4148:	e1a04300 	mov	r4, r0, lsl #6
    414c:	e2044dff 	and	r4, r4, #16320	; 0x3fc0
    4150:	e2840e22 	add	r0, r4, #544	; 0x220
    4154:	ebfff804 	bl	216c <IINCHIP_READ>
    4158:	e1a05000 	mov	r5, r0
    415c:	e2840e22 	add	r0, r4, #544	; 0x220
    4160:	e2800002 	add	r0, r0, #2	; 0x2
    4164:	ebfff800 	bl	216c <IINCHIP_READ>
    4168:	e0800805 	add	r0, r0, r5, lsl #16
    416c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    4170:	e12fff1e 	bx	lr

00004174 <setSn_KPALVTR>:
    4174:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    4178:	e1a04300 	mov	r4, r0, lsl #6
    417c:	e2044dff 	and	r4, r4, #16320	; 0x3fc0
    4180:	e2844f86 	add	r4, r4, #536	; 0x218
    4184:	e2844002 	add	r4, r4, #2	; 0x2
    4188:	e1a00004 	mov	r0, r4
    418c:	e20150ff 	and	r5, r1, #255	; 0xff
    4190:	ebfff7f5 	bl	216c <IINCHIP_READ>
    4194:	e20010ff 	and	r1, r0, #255	; 0xff
    4198:	e0811405 	add	r1, r1, r5, lsl #8
    419c:	e1a01801 	mov	r1, r1, lsl #16
    41a0:	e1a00004 	mov	r0, r4
    41a4:	e1a01821 	mov	r1, r1, lsr #16
    41a8:	ebfff828 	bl	2250 <IINCHIP_WRITE>
    41ac:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    41b0:	e12fff1e 	bx	lr

000041b4 <getSn_KPALVTR>:
    41b4:	e1a00300 	mov	r0, r0, lsl #6
    41b8:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    41bc:	e2800f86 	add	r0, r0, #536	; 0x218
    41c0:	e52de004 	str	lr, [sp, #-4]!
    41c4:	e2800002 	add	r0, r0, #2	; 0x2
    41c8:	ebfff7e7 	bl	216c <IINCHIP_READ>
    41cc:	e1a00420 	mov	r0, r0, lsr #8
    41d0:	e20000ff 	and	r0, r0, #255	; 0xff
    41d4:	e49de004 	ldr	lr, [sp], #4
    41d8:	e12fff1e 	bx	lr

000041dc <getSn_MSSR>:
    41dc:	e1a00300 	mov	r0, r0, lsl #6
    41e0:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    41e4:	e52de004 	str	lr, [sp, #-4]!
    41e8:	e2800f86 	add	r0, r0, #536	; 0x218
    41ec:	ebfff7de 	bl	216c <IINCHIP_READ>
    41f0:	e49de004 	ldr	lr, [sp], #4
    41f4:	e12fff1e 	bx	lr

000041f8 <getSn_DIPR>:
    41f8:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    41fc:	e1a04300 	mov	r4, r0, lsl #6
    4200:	e2044dff 	and	r4, r4, #16320	; 0x3fc0
    4204:	e2846f85 	add	r6, r4, #532	; 0x214
    4208:	e1a00006 	mov	r0, r6
    420c:	e1a05001 	mov	r5, r1
    4210:	ebfff7d5 	bl	216c <IINCHIP_READ>
    4214:	e1a00420 	mov	r0, r0, lsr #8
    4218:	e5c50000 	strb	r0, [r5]
    421c:	e1a00006 	mov	r0, r6
    4220:	ebfff7d1 	bl	216c <IINCHIP_READ>
    4224:	e5c50001 	strb	r0, [r5, #1]
    4228:	e2860002 	add	r0, r6, #2	; 0x2
    422c:	ebfff7ce 	bl	216c <IINCHIP_READ>
    4230:	e1a03420 	mov	r3, r0, lsr #8
    4234:	e2840f83 	add	r0, r4, #524	; 0x20c
    4238:	e5c53002 	strb	r3, [r5, #2]
    423c:	e2800002 	add	r0, r0, #2	; 0x2
    4240:	ebfff7c9 	bl	216c <IINCHIP_READ>
    4244:	e5c50003 	strb	r0, [r5, #3]
    4248:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    424c:	e12fff1e 	bx	lr

00004250 <getSn_DPORTR>:
    4250:	e1a00300 	mov	r0, r0, lsl #6
    4254:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    4258:	e2800e21 	add	r0, r0, #528	; 0x210
    425c:	e52de004 	str	lr, [sp, #-4]!
    4260:	e2800002 	add	r0, r0, #2	; 0x2
    4264:	ebfff7c0 	bl	216c <IINCHIP_READ>
    4268:	e49de004 	ldr	lr, [sp], #4
    426c:	e12fff1e 	bx	lr

00004270 <getSn_DHAR>:
    4270:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    4274:	e1a05300 	mov	r5, r0, lsl #6
    4278:	e2055dff 	and	r5, r5, #16320	; 0x3fc0
    427c:	e2854f83 	add	r4, r5, #524	; 0x20c
    4280:	e1a00004 	mov	r0, r4
    4284:	e1a06001 	mov	r6, r1
    4288:	ebfff7b7 	bl	216c <IINCHIP_READ>
    428c:	e1a00420 	mov	r0, r0, lsr #8
    4290:	e5c60000 	strb	r0, [r6]
    4294:	e1a00004 	mov	r0, r4
    4298:	ebfff7b3 	bl	216c <IINCHIP_READ>
    429c:	e2844002 	add	r4, r4, #2	; 0x2
    42a0:	e5c60001 	strb	r0, [r6, #1]
    42a4:	e1a00004 	mov	r0, r4
    42a8:	ebfff7af 	bl	216c <IINCHIP_READ>
    42ac:	e1a00420 	mov	r0, r0, lsr #8
    42b0:	e5c60002 	strb	r0, [r6, #2]
    42b4:	e1a00004 	mov	r0, r4
    42b8:	ebfff7ab 	bl	216c <IINCHIP_READ>
    42bc:	e2855e21 	add	r5, r5, #528	; 0x210
    42c0:	e5c60003 	strb	r0, [r6, #3]
    42c4:	e1a00005 	mov	r0, r5
    42c8:	ebfff7a7 	bl	216c <IINCHIP_READ>
    42cc:	e1a00420 	mov	r0, r0, lsr #8
    42d0:	e5c60004 	strb	r0, [r6, #4]
    42d4:	e1a00005 	mov	r0, r5
    42d8:	ebfff7a3 	bl	216c <IINCHIP_READ>
    42dc:	e5c60005 	strb	r0, [r6, #5]
    42e0:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    42e4:	e12fff1e 	bx	lr

000042e8 <getSn_SSR>:
    42e8:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    42ec:	e20070ff 	and	r7, r0, #255	; 0xff
    42f0:	e1a03307 	mov	r3, r7, lsl #6
    42f4:	e2836f82 	add	r6, r3, #520	; 0x208
    42f8:	e1a00006 	mov	r0, r6
    42fc:	ebfff79a 	bl	216c <IINCHIP_READ>
    4300:	e20050ff 	and	r5, r0, #255	; 0xff
    4304:	e1a00006 	mov	r0, r6
    4308:	ebfff797 	bl	216c <IINCHIP_READ>
    430c:	e1a03000 	mov	r3, r0
    4310:	e20340ff 	and	r4, r3, #255	; 0xff
    4314:	e1550004 	cmp	r5, r4
    4318:	e1a00006 	mov	r0, r6
    431c:	0a000004 	beq	4334 <getSn_SSR+0x4c>
    4320:	ebfff791 	bl	216c <IINCHIP_READ>
    4324:	e1a00006 	mov	r0, r6
    4328:	ebfff78f 	bl	216c <IINCHIP_READ>
    432c:	e1a05004 	mov	r5, r4
    4330:	eafffff3 	b	4304 <getSn_SSR+0x1c>
    4334:	e3550000 	cmp	r5, #0	; 0x0
    4338:	1a00000a 	bne	4368 <getSn_SSR+0x80>
    433c:	e59f3030 	ldr	r3, [pc, #48]	; 4374 <prog+0x4210>
    4340:	e7d33007 	ldrb	r3, [r3, r7]
    4344:	e3530000 	cmp	r3, #0	; 0x0
    4348:	0a000006 	beq	4368 <getSn_SSR+0x80>
    434c:	e59f2024 	ldr	r2, [pc, #36]	; 4378 <prog+0x4214>
    4350:	e7923107 	ldr	r3, [r2, r7, lsl #2]
    4354:	e2833001 	add	r3, r3, #1	; 0x1
    4358:	e3530002 	cmp	r3, #2	; 0x2
    435c:	e7823107 	str	r3, [r2, r7, lsl #2]
    4360:	d1a00006 	movle	r0, r6
    4364:	dbfff780 	blle	216c <IINCHIP_READ>
    4368:	e1a00005 	mov	r0, r5
    436c:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    4370:	e12fff1e 	bx	lr
    4374:	40001ce8 	andmi	r1, r0, r8, ror #25
    4378:	40001cf0 	strmid	r1, [r0], -r0

0000437c <getSn_IR>:
    437c:	e1a00300 	mov	r0, r0, lsl #6
    4380:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    4384:	e2800f81 	add	r0, r0, #516	; 0x204
    4388:	e52de004 	str	lr, [sp, #-4]!
    438c:	e2800002 	add	r0, r0, #2	; 0x2
    4390:	ebfff775 	bl	216c <IINCHIP_READ>
    4394:	e20000ff 	and	r0, r0, #255	; 0xff
    4398:	e49de004 	ldr	lr, [sp], #4
    439c:	e12fff1e 	bx	lr

000043a0 <getSn_IMR>:
    43a0:	e1a00300 	mov	r0, r0, lsl #6
    43a4:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    43a8:	e52de004 	str	lr, [sp, #-4]!
    43ac:	e2800f81 	add	r0, r0, #516	; 0x204
    43b0:	ebfff76d 	bl	216c <IINCHIP_READ>
    43b4:	e20000ff 	and	r0, r0, #255	; 0xff
    43b8:	e49de004 	ldr	lr, [sp], #4
    43bc:	e12fff1e 	bx	lr

000043c0 <setSn_CR>:
    43c0:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43c4:	e59f20e4 	ldr	r2, [pc, #228]	; 44b0 <prog+0x434c>
    43c8:	e20070ff 	and	r7, r0, #255	; 0xff
    43cc:	e1a03307 	mov	r3, r7, lsl #6
    43d0:	e2834c02 	add	r4, r3, #512	; 0x200
    43d4:	e5923000 	ldr	r3, [r2]
    43d8:	e1a01801 	mov	r1, r1, lsl #16
    43dc:	e2833001 	add	r3, r3, #1	; 0x1
    43e0:	e1a08821 	mov	r8, r1, lsr #16
    43e4:	e2844002 	add	r4, r4, #2	; 0x2
    43e8:	e24dd004 	sub	sp, sp, #4	; 0x4
    43ec:	e1a00004 	mov	r0, r4
    43f0:	e1a01008 	mov	r1, r8
    43f4:	e5823000 	str	r3, [r2]
    43f8:	ebfff794 	bl	2250 <IINCHIP_WRITE>
    43fc:	e3a05000 	mov	r5, #0	; 0x0
    4400:	ea000021 	b	448c <setSn_CR+0xcc>
    4404:	e5923000 	ldr	r3, [r2]
    4408:	e1550003 	cmp	r5, r3
    440c:	e59f30a0 	ldr	r3, [pc, #160]	; 44b4 <prog+0x4350>
    4410:	c5825000 	strgt	r5, [r2]
    4414:	e1550003 	cmp	r5, r3
    4418:	1a00001b 	bne	448c <setSn_CR+0xcc>
    441c:	e1a00004 	mov	r0, r4
    4420:	ebfff751 	bl	216c <IINCHIP_READ>
    4424:	e1a06000 	mov	r6, r0
    4428:	e1a00007 	mov	r0, r7
    442c:	ebffffd2 	bl	437c <getSn_IR>
    4430:	e1a04000 	mov	r4, r0
    4434:	e1a00007 	mov	r0, r7
    4438:	ebffffaa 	bl	42e8 <getSn_SSR>
    443c:	e59f106c 	ldr	r1, [pc, #108]	; 44b0 <prog+0x434c>
    4440:	e1a02008 	mov	r2, r8
    4444:	e1a03007 	mov	r3, r7
    4448:	e5911000 	ldr	r1, [r1]
    444c:	e1a05000 	mov	r5, r0
    4450:	e1a04804 	mov	r4, r4, lsl #16
    4454:	e59f005c 	ldr	r0, [pc, #92]	; 44b8 <prog+0x4354>
    4458:	e58d6000 	str	r6, [sp]
    445c:	e1a05805 	mov	r5, r5, lsl #16
    4460:	ebfff68f 	bl	1ea4 <printf>
    4464:	e1a01824 	mov	r1, r4, lsr #16
    4468:	e59f004c 	ldr	r0, [pc, #76]	; 44bc <prog+0x4358>
    446c:	ebfff68c 	bl	1ea4 <printf>
    4470:	e1a01825 	mov	r1, r5, lsr #16
    4474:	e59f0044 	ldr	r0, [pc, #68]	; 44c0 <prog+0x435c>
    4478:	ebfff689 	bl	1ea4 <printf>
    447c:	e59f3040 	ldr	r3, [pc, #64]	; 44c4 <prog+0x4360>
    4480:	e3a02001 	mov	r2, #1	; 0x1
    4484:	e5832000 	str	r2, [r3]
    4488:	ea000005 	b	44a4 <setSn_CR+0xe4>
    448c:	e1a00004 	mov	r0, r4
    4490:	ebfff735 	bl	216c <IINCHIP_READ>
    4494:	e3500000 	cmp	r0, #0	; 0x0
    4498:	e59f2028 	ldr	r2, [pc, #40]	; 44c8 <prog+0x4364>
    449c:	e2855001 	add	r5, r5, #1	; 0x1
    44a0:	1affffd7 	bne	4404 <setSn_CR+0x44>
    44a4:	e28dd004 	add	sp, sp, #4	; 0x4
    44a8:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    44ac:	e12fff1e 	bx	lr
    44b0:	400002cc 	andmi	r0, r0, ip, asr #5
    44b4:	00004e21 	andeq	r4, r0, r1, lsr #28
    44b8:	00006464 	andeq	r6, r0, r4, ror #8
    44bc:	0000649c 	muleq	r0, ip, r4
    44c0:	000064ac 	andeq	r6, r0, ip, lsr #9
    44c4:	400002f0 	strmid	r0, [r0], -r0
    44c8:	400002c4 	andmi	r0, r0, r4, asr #5

000044cc <getSn_CR>:
    44cc:	e1a00300 	mov	r0, r0, lsl #6
    44d0:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    44d4:	e2800c02 	add	r0, r0, #512	; 0x200
    44d8:	e52de004 	str	lr, [sp, #-4]!
    44dc:	e2800002 	add	r0, r0, #2	; 0x2
    44e0:	ebfff721 	bl	216c <IINCHIP_READ>
    44e4:	e20000ff 	and	r0, r0, #255	; 0xff
    44e8:	e49de004 	ldr	lr, [sp], #4
    44ec:	e12fff1e 	bx	lr

000044f0 <getSn_MR>:
    44f0:	e1a00300 	mov	r0, r0, lsl #6
    44f4:	e2000dff 	and	r0, r0, #16320	; 0x3fc0
    44f8:	e52de004 	str	lr, [sp, #-4]!
    44fc:	e2800c02 	add	r0, r0, #512	; 0x200
    4500:	ebfff719 	bl	216c <IINCHIP_READ>
    4504:	e49de004 	ldr	lr, [sp], #4
    4508:	e12fff1e 	bx	lr

0000450c <getIDR>:
    450c:	e52de004 	str	lr, [sp, #-4]!
    4510:	e3a000fe 	mov	r0, #254	; 0xfe
    4514:	ebfff714 	bl	216c <IINCHIP_READ>
    4518:	e49de004 	ldr	lr, [sp], #4
    451c:	e12fff1e 	bx	lr

00004520 <getPn_BDPTHR>:
    4520:	e1a00100 	mov	r0, r0, lsl #2
    4524:	e2000fff 	and	r0, r0, #1020	; 0x3fc
    4528:	e52de004 	str	lr, [sp, #-4]!
    452c:	e2800062 	add	r0, r0, #98	; 0x62
    4530:	ebfff70d 	bl	216c <IINCHIP_READ>
    4534:	e49de004 	ldr	lr, [sp], #4
    4538:	e12fff1e 	bx	lr

0000453c <getPn_BRDYR>:
    453c:	e1a00100 	mov	r0, r0, lsl #2
    4540:	e2000fff 	and	r0, r0, #1020	; 0x3fc
    4544:	e52de004 	str	lr, [sp, #-4]!
    4548:	e2800060 	add	r0, r0, #96	; 0x60
    454c:	ebfff706 	bl	216c <IINCHIP_READ>
    4550:	e20000ff 	and	r0, r0, #255	; 0xff
    4554:	e49de004 	ldr	lr, [sp], #4
    4558:	e12fff1e 	bx	lr

0000455c <getFMTUR>:
    455c:	e52de004 	str	lr, [sp, #-4]!
    4560:	e3a0004e 	mov	r0, #78	; 0x4e
    4564:	ebfff700 	bl	216c <IINCHIP_READ>
    4568:	e49de004 	ldr	lr, [sp], #4
    456c:	e12fff1e 	bx	lr

00004570 <getUPORTR>:
    4570:	e52de004 	str	lr, [sp, #-4]!
    4574:	e3a0004c 	mov	r0, #76	; 0x4c
    4578:	ebfff6fb 	bl	216c <IINCHIP_READ>
    457c:	e49de004 	ldr	lr, [sp], #4
    4580:	e12fff1e 	bx	lr

00004584 <getUIPR>:
    4584:	e92d4010 	stmdb	sp!, {r4, lr}
    4588:	e1a04000 	mov	r4, r0
    458c:	e3a00048 	mov	r0, #72	; 0x48
    4590:	ebfff6f5 	bl	216c <IINCHIP_READ>
    4594:	e1a00420 	mov	r0, r0, lsr #8
    4598:	e5c40000 	strb	r0, [r4]
    459c:	e3a00048 	mov	r0, #72	; 0x48
    45a0:	ebfff6f1 	bl	216c <IINCHIP_READ>
    45a4:	e5c40001 	strb	r0, [r4, #1]
    45a8:	e3a0004a 	mov	r0, #74	; 0x4a
    45ac:	ebfff6ee 	bl	216c <IINCHIP_READ>
    45b0:	e1a00420 	mov	r0, r0, lsr #8
    45b4:	e5c40002 	strb	r0, [r4, #2]
    45b8:	e3a0004a 	mov	r0, #74	; 0x4a
    45bc:	ebfff6ea 	bl	216c <IINCHIP_READ>
    45c0:	e5c40003 	strb	r0, [r4, #3]
    45c4:	e8bd4010 	ldmia	sp!, {r4, lr}
    45c8:	e12fff1e 	bx	lr

000045cc <getPDHAR>:
    45cc:	e92d4010 	stmdb	sp!, {r4, lr}
    45d0:	e1a04000 	mov	r4, r0
    45d4:	e3a00040 	mov	r0, #64	; 0x40
    45d8:	ebfff6e3 	bl	216c <IINCHIP_READ>
    45dc:	e1a00420 	mov	r0, r0, lsr #8
    45e0:	e5c40000 	strb	r0, [r4]
    45e4:	e3a00040 	mov	r0, #64	; 0x40
    45e8:	ebfff6df 	bl	216c <IINCHIP_READ>
    45ec:	e5c40001 	strb	r0, [r4, #1]
    45f0:	e3a00042 	mov	r0, #66	; 0x42
    45f4:	ebfff6dc 	bl	216c <IINCHIP_READ>
    45f8:	e1a00420 	mov	r0, r0, lsr #8
    45fc:	e5c40002 	strb	r0, [r4, #2]
    4600:	e3a00042 	mov	r0, #66	; 0x42
    4604:	ebfff6d8 	bl	216c <IINCHIP_READ>
    4608:	e5c40003 	strb	r0, [r4, #3]
    460c:	e3a00044 	mov	r0, #68	; 0x44
    4610:	ebfff6d5 	bl	216c <IINCHIP_READ>
    4614:	e1a00420 	mov	r0, r0, lsr #8
    4618:	e5c40004 	strb	r0, [r4, #4]
    461c:	e3a00044 	mov	r0, #68	; 0x44
    4620:	ebfff6d1 	bl	216c <IINCHIP_READ>
    4624:	e5c40005 	strb	r0, [r4, #5]
    4628:	e8bd4010 	ldmia	sp!, {r4, lr}
    462c:	e12fff1e 	bx	lr

00004630 <getPSIDR>:
    4630:	e52de004 	str	lr, [sp, #-4]!
    4634:	e3a0003c 	mov	r0, #60	; 0x3c
    4638:	ebfff6cb 	bl	216c <IINCHIP_READ>
    463c:	e49de004 	ldr	lr, [sp], #4
    4640:	e12fff1e 	bx	lr

00004644 <getPMAGICR>:
    4644:	e52de004 	str	lr, [sp, #-4]!
    4648:	e3a00038 	mov	r0, #56	; 0x38
    464c:	ebfff6c6 	bl	216c <IINCHIP_READ>
    4650:	e20000ff 	and	r0, r0, #255	; 0xff
    4654:	e49de004 	ldr	lr, [sp], #4
    4658:	e12fff1e 	bx	lr

0000465c <getPTIMER>:
    465c:	e52de004 	str	lr, [sp, #-4]!
    4660:	e3a00036 	mov	r0, #54	; 0x36
    4664:	ebfff6c0 	bl	216c <IINCHIP_READ>
    4668:	e20000ff 	and	r0, r0, #255	; 0xff
    466c:	e49de004 	ldr	lr, [sp], #4
    4670:	e12fff1e 	bx	lr

00004674 <getPATR>:
    4674:	e52de004 	str	lr, [sp, #-4]!
    4678:	e3a00032 	mov	r0, #50	; 0x32
    467c:	ebfff6ba 	bl	216c <IINCHIP_READ>
    4680:	e49de004 	ldr	lr, [sp], #4
    4684:	e12fff1e 	bx	lr

00004688 <getRCR>:
    4688:	e52de004 	str	lr, [sp, #-4]!
    468c:	e3a0001e 	mov	r0, #30	; 0x1e
    4690:	ebfff6b5 	bl	216c <IINCHIP_READ>
    4694:	e20000ff 	and	r0, r0, #255	; 0xff
    4698:	e49de004 	ldr	lr, [sp], #4
    469c:	e12fff1e 	bx	lr

000046a0 <getRTR>:
    46a0:	e52de004 	str	lr, [sp, #-4]!
    46a4:	e3a0001c 	mov	r0, #28	; 0x1c
    46a8:	ebfff6af 	bl	216c <IINCHIP_READ>
    46ac:	e49de004 	ldr	lr, [sp], #4
    46b0:	e12fff1e 	bx	lr

000046b4 <getSIPR>:
    46b4:	e92d4010 	stmdb	sp!, {r4, lr}
    46b8:	e1a04000 	mov	r4, r0
    46bc:	e3a00018 	mov	r0, #24	; 0x18
    46c0:	ebfff6a9 	bl	216c <IINCHIP_READ>
    46c4:	e1a00420 	mov	r0, r0, lsr #8
    46c8:	e5c40000 	strb	r0, [r4]
    46cc:	e3a00018 	mov	r0, #24	; 0x18
    46d0:	ebfff6a5 	bl	216c <IINCHIP_READ>
    46d4:	e5c40001 	strb	r0, [r4, #1]
    46d8:	e3a0001a 	mov	r0, #26	; 0x1a
    46dc:	ebfff6a2 	bl	216c <IINCHIP_READ>
    46e0:	e1a00420 	mov	r0, r0, lsr #8
    46e4:	e5c40002 	strb	r0, [r4, #2]
    46e8:	e3a0001a 	mov	r0, #26	; 0x1a
    46ec:	ebfff69e 	bl	216c <IINCHIP_READ>
    46f0:	e5c40003 	strb	r0, [r4, #3]
    46f4:	e8bd4010 	ldmia	sp!, {r4, lr}
    46f8:	e12fff1e 	bx	lr

000046fc <getSUBR>:
    46fc:	e92d4010 	stmdb	sp!, {r4, lr}
    4700:	e1a04000 	mov	r4, r0
    4704:	e3a00014 	mov	r0, #20	; 0x14
    4708:	ebfff697 	bl	216c <IINCHIP_READ>
    470c:	e1a00420 	mov	r0, r0, lsr #8
    4710:	e5c40000 	strb	r0, [r4]
    4714:	e3a00014 	mov	r0, #20	; 0x14
    4718:	ebfff693 	bl	216c <IINCHIP_READ>
    471c:	e5c40001 	strb	r0, [r4, #1]
    4720:	e3a00016 	mov	r0, #22	; 0x16
    4724:	ebfff690 	bl	216c <IINCHIP_READ>
    4728:	e1a00420 	mov	r0, r0, lsr #8
    472c:	e5c40002 	strb	r0, [r4, #2]
    4730:	e3a00016 	mov	r0, #22	; 0x16
    4734:	ebfff68c 	bl	216c <IINCHIP_READ>
    4738:	e5c40003 	strb	r0, [r4, #3]
    473c:	e8bd4010 	ldmia	sp!, {r4, lr}
    4740:	e12fff1e 	bx	lr

00004744 <getGAR>:
    4744:	e92d4010 	stmdb	sp!, {r4, lr}
    4748:	e1a04000 	mov	r4, r0
    474c:	e3a00010 	mov	r0, #16	; 0x10
    4750:	ebfff685 	bl	216c <IINCHIP_READ>
    4754:	e1a00420 	mov	r0, r0, lsr #8
    4758:	e5c40000 	strb	r0, [r4]
    475c:	e3a00010 	mov	r0, #16	; 0x10
    4760:	ebfff681 	bl	216c <IINCHIP_READ>
    4764:	e5c40001 	strb	r0, [r4, #1]
    4768:	e3a00012 	mov	r0, #18	; 0x12
    476c:	ebfff67e 	bl	216c <IINCHIP_READ>
    4770:	e1a00420 	mov	r0, r0, lsr #8
    4774:	e5c40002 	strb	r0, [r4, #2]
    4778:	e3a00012 	mov	r0, #18	; 0x12
    477c:	ebfff67a 	bl	216c <IINCHIP_READ>
    4780:	e5c40003 	strb	r0, [r4, #3]
    4784:	e8bd4010 	ldmia	sp!, {r4, lr}
    4788:	e12fff1e 	bx	lr

0000478c <getSHAR>:
    478c:	e92d4010 	stmdb	sp!, {r4, lr}
    4790:	e1a04000 	mov	r4, r0
    4794:	e3a00008 	mov	r0, #8	; 0x8
    4798:	ebfff673 	bl	216c <IINCHIP_READ>
    479c:	e1a00420 	mov	r0, r0, lsr #8
    47a0:	e5c40000 	strb	r0, [r4]
    47a4:	e3a00008 	mov	r0, #8	; 0x8
    47a8:	ebfff66f 	bl	216c <IINCHIP_READ>
    47ac:	e5c40001 	strb	r0, [r4, #1]
    47b0:	e3a0000a 	mov	r0, #10	; 0xa
    47b4:	ebfff66c 	bl	216c <IINCHIP_READ>
    47b8:	e1a00420 	mov	r0, r0, lsr #8
    47bc:	e5c40002 	strb	r0, [r4, #2]
    47c0:	e3a0000a 	mov	r0, #10	; 0xa
    47c4:	ebfff668 	bl	216c <IINCHIP_READ>
    47c8:	e5c40003 	strb	r0, [r4, #3]
    47cc:	e3a0000c 	mov	r0, #12	; 0xc
    47d0:	ebfff665 	bl	216c <IINCHIP_READ>
    47d4:	e1a00420 	mov	r0, r0, lsr #8
    47d8:	e5c40004 	strb	r0, [r4, #4]
    47dc:	e3a0000c 	mov	r0, #12	; 0xc
    47e0:	ebfff661 	bl	216c <IINCHIP_READ>
    47e4:	e5c40005 	strb	r0, [r4, #5]
    47e8:	e8bd4010 	ldmia	sp!, {r4, lr}
    47ec:	e12fff1e 	bx	lr

000047f0 <getIMR>:
    47f0:	e52de004 	str	lr, [sp, #-4]!
    47f4:	e3a00004 	mov	r0, #4	; 0x4
    47f8:	ebfff65b 	bl	216c <IINCHIP_READ>
    47fc:	e49de004 	ldr	lr, [sp], #4
    4800:	e12fff1e 	bx	lr

00004804 <getIR>:
    4804:	e52de004 	str	lr, [sp, #-4]!
    4808:	e3a00002 	mov	r0, #2	; 0x2
    480c:	ebfff656 	bl	216c <IINCHIP_READ>
    4810:	e49de004 	ldr	lr, [sp], #4
    4814:	e12fff1e 	bx	lr

00004818 <i2cStatus>:
static i2cErr_e i2cStatus (void)
{
  i2cErr_e status;

  while (!(I2C0_CONSET & I2C_CONSET_SI))
    4818:	e59f2018 	ldr	r2, [pc, #24]	; 4838 <prog+0x46d4>
    481c:	e5d23000 	ldrb	r3, [r2]
    4820:	e3130008 	tst	r3, #8	; 0x8
    4824:	0afffffb 	beq	4818 <i2cStatus>
    ;

  if ((status = I2C0_STAT) == I2CERR_BUSERRORx)
    4828:	e5d20004 	ldrb	r0, [r2, #4]
    return I2CERR_BUSERROR;

  return status;
}
    482c:	e3500000 	cmp	r0, #0	; 0x0
    4830:	03a00008 	moveq	r0, #8	; 0x8
    4834:	e12fff1e 	bx	lr
    4838:	e001c000 	and	ip, r1, r0

0000483c <i2cStop>:

//
//
//
static i2cErr_e i2cStop (void)
{
  I2C0_CONCLR = I2C_CONCLR_SIC;
    483c:	e59f3020 	ldr	r3, [pc, #32]	; 4864 <prog+0x4700>
    4840:	e3a02008 	mov	r2, #8	; 0x8
    4844:	e5c32018 	strb	r2, [r3, #24]
  I2C0_CONSET = I2C_CONSET_STO;
    4848:	e0822002 	add	r2, r2, r2
    484c:	e5c32000 	strb	r2, [r3]

  while (I2C0_CONSET & I2C_CONSET_STO) ;
    4850:	e59f300c 	ldr	r3, [pc, #12]	; 4864 <prog+0x4700>
    4854:	e5d33000 	ldrb	r3, [r3]
    4858:	e2130010 	ands	r0, r3, #16	; 0x10
    485c:	1afffffb 	bne	4850 <i2cStop+0x14>

  return I2CERR_NONE;
}
    4860:	e12fff1e 	bx	lr
    4864:	e001c000 	and	ip, r1, r0

00004868 <i2cStart>:

//
//
//
static i2cErr_e i2cStart (void)
{
  I2C0_CONCLR = I2C_CONCLR_SIC;
    4868:	e59f3058 	ldr	r3, [pc, #88]	; 48c8 <prog+0x4764>
    486c:	e3a02008 	mov	r2, #8	; 0x8
    4870:	e52de004 	str	lr, [sp, #-4]!
    4874:	e5c32018 	strb	r2, [r3, #24]
  I2C0_CONSET = I2C_CONSET_STA;
    4878:	e2822018 	add	r2, r2, #24	; 0x18
    487c:	e5c32000 	strb	r2, [r3]

  while (1)  {
    i2cErr_e status;

    if (((status = i2cStatus ()) == I2CERR_STARTTX) || (status == I2CERR_REPEATEDSTARTTX)) {
    4880:	ebffffe4 	bl	4818 <i2cStatus>
    4884:	e3500008 	cmp	r0, #8	; 0x8
    4888:	0a000001 	beq	4894 <i2cStart+0x2c>
    488c:	e3500010 	cmp	r0, #16	; 0x10
    4890:	1a000001 	bne	489c <i2cStart+0x34>
      I2C0_CONCLR = I2C_CONCLR_STAC;
    4894:	e3a00000 	mov	r0, #0	; 0x0
    4898:	ea000001 	b	48a4 <i2cStart+0x3c>
      return I2CERR_NONE;
    }
    else if (status != I2CERR_NOINFO) {
    489c:	e35000f8 	cmp	r0, #248	; 0xf8
    48a0:	0a000004 	beq	48b8 <i2cStart+0x50>
      I2C0_CONCLR = I2C_CONCLR_STAC;
    48a4:	e59f301c 	ldr	r3, [pc, #28]	; 48c8 <prog+0x4764>
    48a8:	e3a02020 	mov	r2, #32	; 0x20
    48ac:	e5c32018 	strb	r2, [r3, #24]
      return status;
    } else
      I2C0_CONCLR = I2C_CONCLR_SIC;
  }
}
    48b0:	e49de004 	ldr	lr, [sp], #4
    48b4:	e12fff1e 	bx	lr
    48b8:	e59f3008 	ldr	r3, [pc, #8]	; 48c8 <prog+0x4764>
    48bc:	e3a02008 	mov	r2, #8	; 0x8
    48c0:	e5c32018 	strb	r2, [r3, #24]
    48c4:	eaffffed 	b	4880 <i2cStart+0x18>
    48c8:	e001c000 	and	ip, r1, r0

000048cc <i2cRepeatedStart>:

//
//
//
static i2cErr_e i2cRepeatedStart (void)
{
    48cc:	e52de004 	str	lr, [sp, #-4]!
  while (!(I2C0_CONSET & I2C_CONSET_SI)) ;
    48d0:	e59f2060 	ldr	r2, [pc, #96]	; 4938 <prog+0x47d4>
    48d4:	e5d23000 	ldrb	r3, [r2]
    48d8:	e3130008 	tst	r3, #8	; 0x8
    48dc:	0afffffb 	beq	48d0 <i2cRepeatedStart+0x4>

  I2C0_CONCLR = I2C_CONCLR_SIC;
    48e0:	e3a03008 	mov	r3, #8	; 0x8
    48e4:	e5c23018 	strb	r3, [r2, #24]
  I2C0_CONSET = I2C_CONSET_STA;
    48e8:	e2833018 	add	r3, r3, #24	; 0x18
    48ec:	e5c23000 	strb	r3, [r2]

  while (1) {
    i2cErr_e status;

    if (((status = i2cStatus ()) == I2CERR_STARTTX) || (status == I2CERR_REPEATEDSTARTTX)) {
    48f0:	ebffffc8 	bl	4818 <i2cStatus>
    48f4:	e3500008 	cmp	r0, #8	; 0x8
    48f8:	0a000001 	beq	4904 <i2cRepeatedStart+0x38>
    48fc:	e3500010 	cmp	r0, #16	; 0x10
    4900:	1a000001 	bne	490c <i2cRepeatedStart+0x40>
      I2C0_CONCLR = I2C_CONCLR_STAC;
    4904:	e3a00000 	mov	r0, #0	; 0x0
    4908:	ea000001 	b	4914 <i2cRepeatedStart+0x48>
      return I2CERR_NONE;
    } 
    else if (status != I2CERR_NOINFO)  {
    490c:	e35000f8 	cmp	r0, #248	; 0xf8
    4910:	0a000004 	beq	4928 <i2cRepeatedStart+0x5c>
      I2C0_CONCLR = I2C_CONCLR_STAC;
    4914:	e59f301c 	ldr	r3, [pc, #28]	; 4938 <prog+0x47d4>
    4918:	e3a02020 	mov	r2, #32	; 0x20
    491c:	e5c32018 	strb	r2, [r3, #24]
      return status;
    }
    else
      I2C0_CONCLR = I2C_CONCLR_SIC;
  }
}
    4920:	e49de004 	ldr	lr, [sp], #4
    4924:	e12fff1e 	bx	lr
    4928:	e59f3008 	ldr	r3, [pc, #8]	; 4938 <prog+0x47d4>
    492c:	e3a02008 	mov	r2, #8	; 0x8
    4930:	e5c32018 	strb	r2, [r3, #24]
    4934:	eaffffed 	b	48f0 <i2cRepeatedStart+0x24>
    4938:	e001c000 	and	ip, r1, r0

0000493c <i2cPutByte>:

//
//
//
static i2cErr_e i2cPutByte (uint8 data)
{
  if (!(I2C0_CONSET & I2C_CONSET_SI))
    493c:	e59f2024 	ldr	r2, [pc, #36]	; 4968 <prog+0x4804>
    4940:	e5d23000 	ldrb	r3, [r2]
    4944:	e3130008 	tst	r3, #8	; 0x8
    4948:	e20000ff 	and	r0, r0, #255	; 0xff
    494c:	e3a03001 	mov	r3, #1	; 0x1
    return I2CERR_BUSY;

  I2C0_DAT = data;
  I2C0_CONCLR = I2C_CONCLR_SIC;
    4950:	13a03008 	movne	r3, #8	; 0x8
    4954:	15c20008 	strneb	r0, [r2, #8]
    4958:	15c23018 	strneb	r3, [r2, #24]
    495c:	13a03000 	movne	r3, #0	; 0x0

  return I2CERR_NONE;
}
    4960:	e1a00003 	mov	r0, r3
    4964:	e12fff1e 	bx	lr
    4968:	e001c000 	and	ip, r1, r0

0000496c <i2cGetByte>:

//
//
//
static i2cErr_e i2cGetByte (i2cMode_e mode, uint8 *pData)
{
  switch (mode)  {
    496c:	e3500001 	cmp	r0, #1	; 0x1
    case I2CMODE_ACK :
      I2C0_CONCLR = I2C_CONCLR_SIC;
      I2C0_CONSET = I2C_CONSET_AA;
      break;

    case I2CMODE_NACK :
      I2C0_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC);
    4970:	e3a0c000 	mov	ip, #0	; 0x0
    4974:	0a000009 	beq	49a0 <i2cGetByte+0x34>
    4978:	e59f2050 	ldr	r2, [pc, #80]	; 49d0 <prog+0x486c>
    497c:	3a000002 	bcc	498c <i2cGetByte+0x20>
    4980:	e3500002 	cmp	r0, #2	; 0x2
    4984:	0a000009 	beq	49b0 <i2cGetByte+0x44>
    4988:	ea00000e 	b	49c8 <i2cGetByte+0x5c>
    498c:	e3a03008 	mov	r3, #8	; 0x8
    4990:	e5c23018 	strb	r3, [r2, #24]
    4994:	e3a03004 	mov	r3, #4	; 0x4
    4998:	e5c23000 	strb	r3, [r2]
    499c:	ea000009 	b	49c8 <i2cGetByte+0x5c>
    49a0:	e59f3028 	ldr	r3, [pc, #40]	; 49d0 <prog+0x486c>
    49a4:	e3a0200c 	mov	r2, #12	; 0xc
    49a8:	e5c32018 	strb	r2, [r3, #24]
    49ac:	ea000005 	b	49c8 <i2cGetByte+0x5c>
      break;

    case I2CMODE_READ :
      {
        if (!(I2C0_CONSET & I2C_CONSET_SI))
    49b0:	e5d23000 	ldrb	r3, [r2]
    49b4:	e3130008 	tst	r3, #8	; 0x8
          return I2CERR_EMPTY;

        *pData = (uint8) I2C0_DAT;
    49b8:	15d23008 	ldrneb	r3, [r2, #8]
    49bc:	15c13000 	strneb	r3, [r1]
    49c0:	e1a0c000 	mov	ip, r0
    49c4:	13a0c000 	movne	ip, #0	; 0x0
      }
      break;
  }

  return I2CERR_NONE;
} 
    49c8:	e1a0000c 	mov	r0, ip
    49cc:	e12fff1e 	bx	lr
    49d0:	e001c000 	and	ip, r1, r0

000049d4 <i2cWriteBufferEx_o>:


static i2cErr_e i2cWriteBufferEx_o (uint8 address, uint8 *buffer, uint32 bufferLength, i2cFlags_e flags)
{
  uint32 i;
  i2cErr_e status;

  if (flags & I2CFLAGS_START) {
    49d4:	e3130001 	tst	r3, #1	; 0x1
    49d8:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49dc:	e1a05003 	mov	r5, r3
    49e0:	e1a08001 	mov	r8, r1
    49e4:	e1a07002 	mov	r7, r2
    49e8:	e20060ff 	and	r6, r0, #255	; 0xff
    49ec:	0a000001 	beq	49f8 <i2cWriteBufferEx_o+0x24>
    if ((status = i2cStart ()) != I2CERR_NONE) {
    49f0:	ebffff9c 	bl	4868 <i2cStart>
    49f4:	ea000002 	b	4a04 <i2cWriteBufferEx_o+0x30>
      i2cStop ();
      return status;
    }
  }
  else if (flags & I2CFLAGS_REPEATEDSTART) {
    49f8:	e3130002 	tst	r3, #2	; 0x2
    49fc:	0a000002 	beq	4a0c <i2cWriteBufferEx_o+0x38>
    if ((status = i2cRepeatedStart ()) != I2CERR_NONE) {
    4a00:	ebffffb1 	bl	48cc <i2cRepeatedStart>
    4a04:	e2504000 	subs	r4, r0, #0	; 0x0
    4a08:	1a00002d 	bne	4ac4 <i2cWriteBufferEx_o+0xf0>
      i2cStop ();
      return status;
    }
  }

  if (flags & I2CFLAGS_ADDRESS) {
    4a0c:	e3150008 	tst	r5, #8	; 0x8
    4a10:	0a000006 	beq	4a30 <i2cWriteBufferEx_o+0x5c>
    do
      if (((status = i2cPutByte (address & ~0x01)) != I2CERR_NONE) && (status != I2CERR_BUSY))
    4a14:	e20600fe 	and	r0, r6, #254	; 0xfe
    4a18:	ebffffc7 	bl	493c <i2cPutByte>
    4a1c:	e2504000 	subs	r4, r0, #0	; 0x0
    4a20:	0a000002 	beq	4a30 <i2cWriteBufferEx_o+0x5c>
    4a24:	e3540001 	cmp	r4, #1	; 0x1
    4a28:	1a000026 	bne	4ac8 <i2cWriteBufferEx_o+0xf4>
    4a2c:	eafffff8 	b	4a14 <i2cWriteBufferEx_o+0x40>
        return status;
    while (status == I2CERR_BUSY);
  }

  if (flags & I2CFLAGS_WRITEDATA) {
    4a30:	e3150010 	tst	r5, #16	; 0x10
    4a34:	13a06000 	movne	r6, #0	; 0x0
    4a38:	1a000011 	bne	4a84 <i2cWriteBufferEx_o+0xb0>
    4a3c:	ea000012 	b	4a8c <i2cWriteBufferEx_o+0xb8>
    for (i = 0; i < bufferLength; i++, buffer++) {
      while (1) {
        if (((status = i2cStatus ()) == I2CERR_SLAWTX_ACKRX) || (status == I2CERR_DATTX_ACKRX)) {
    4a40:	ebffff74 	bl	4818 <i2cStatus>
    4a44:	e3500018 	cmp	r0, #24	; 0x18
    4a48:	e1a04000 	mov	r4, r0
    4a4c:	0a000001 	beq	4a58 <i2cWriteBufferEx_o+0x84>
    4a50:	e3500028 	cmp	r0, #40	; 0x28
    4a54:	1a000006 	bne	4a74 <i2cWriteBufferEx_o+0xa0>
          do
            if (((status = i2cPutByte (*buffer)) != I2CERR_NONE) && (status != I2CERR_BUSY))
    4a58:	e7d60008 	ldrb	r0, [r6, r8]
    4a5c:	ebffffb6 	bl	493c <i2cPutByte>
    4a60:	e2504000 	subs	r4, r0, #0	; 0x0
    4a64:	0a000005 	beq	4a80 <i2cWriteBufferEx_o+0xac>
    4a68:	e3540001 	cmp	r4, #1	; 0x1
    4a6c:	1a000015 	bne	4ac8 <i2cWriteBufferEx_o+0xf4>
    4a70:	eafffff8 	b	4a58 <i2cWriteBufferEx_o+0x84>
              return status;
          while (status == I2CERR_BUSY);
          break;
        }
        else if (status != I2CERR_NOINFO) {
    4a74:	e35000f8 	cmp	r0, #248	; 0xf8
    4a78:	0afffff0 	beq	4a40 <i2cWriteBufferEx_o+0x6c>
    4a7c:	ea000010 	b	4ac4 <i2cWriteBufferEx_o+0xf0>
    4a80:	e2866001 	add	r6, r6, #1	; 0x1
    4a84:	e1560007 	cmp	r6, r7
    4a88:	1affffec 	bne	4a40 <i2cWriteBufferEx_o+0x6c>
          i2cStop ();
          return status;
        }
      }
    }
  }

  if (flags & I2CFLAGS_STOP) {
    4a8c:	e2150004 	ands	r0, r5, #4	; 0x4
    4a90:	01a04000 	moveq	r4, r0
    4a94:	0a00000b 	beq	4ac8 <i2cWriteBufferEx_o+0xf4>
    while (1) {
      if (((status = i2cStatus ()) == I2CERR_SLAWTX_ACKRX) || (status == I2CERR_DATTX_ACKRX)) {
    4a98:	ebffff5e 	bl	4818 <i2cStatus>
    4a9c:	e3500018 	cmp	r0, #24	; 0x18
    4aa0:	e1a04000 	mov	r4, r0
    4aa4:	0a000001 	beq	4ab0 <i2cWriteBufferEx_o+0xdc>
    4aa8:	e3500028 	cmp	r0, #40	; 0x28
    4aac:	1a000002 	bne	4abc <i2cWriteBufferEx_o+0xe8>
        i2cStop ();
    4ab0:	ebffff61 	bl	483c <i2cStop>
    4ab4:	e3a04000 	mov	r4, #0	; 0x0
    4ab8:	ea000002 	b	4ac8 <i2cWriteBufferEx_o+0xf4>
        return I2CERR_NONE;
      }
      else if (status != I2CERR_NOINFO) {
    4abc:	e35000f8 	cmp	r0, #248	; 0xf8
    4ac0:	0afffff4 	beq	4a98 <i2cWriteBufferEx_o+0xc4>
        i2cStop ();
    4ac4:	ebffff5c 	bl	483c <i2cStop>
        return status;
      }
    }
  }
  return I2CERR_NONE;
}
    4ac8:	e1a00004 	mov	r0, r4
    4acc:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    4ad0:	e12fff1e 	bx	lr

00004ad4 <i2cReadBufferEx_o>:


static i2cErr_e i2cReadBufferEx_o (uint8 address, uint8 *buffer, uint32 bufferLength, i2cFlags_e flags)
{
  uint32 i;
  i2cErr_e status;

  if (flags & I2CFLAGS_START) {
    4ad4:	e3130001 	tst	r3, #1	; 0x1
    4ad8:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4adc:	e1a05003 	mov	r5, r3
    4ae0:	e1a07001 	mov	r7, r1
    4ae4:	e1a08002 	mov	r8, r2
    4ae8:	e20060ff 	and	r6, r0, #255	; 0xff
    4aec:	0a000001 	beq	4af8 <i2cReadBufferEx_o+0x24>
    if ((status = i2cStart ()) != I2CERR_NONE) {
    4af0:	ebffff5c 	bl	4868 <i2cStart>
    4af4:	ea000002 	b	4b04 <i2cReadBufferEx_o+0x30>
      i2cStop ();
      return status;
    }
  }
  else if (flags & I2CFLAGS_REPEATEDSTART) {
    4af8:	e3130002 	tst	r3, #2	; 0x2
    4afc:	0a000002 	beq	4b0c <i2cReadBufferEx_o+0x38>
    if ((status = i2cRepeatedStart ()) != I2CERR_NONE) {
    4b00:	ebffff71 	bl	48cc <i2cRepeatedStart>
    4b04:	e2504000 	subs	r4, r0, #0	; 0x0
    4b08:	1a000021 	bne	4b94 <i2cReadBufferEx_o+0xc0>
      i2cStop ();
      return status;
    }
  }

  if (flags & I2CFLAGS_ADDRESS) {
    4b0c:	e3150008 	tst	r5, #8	; 0x8
    4b10:	0a000006 	beq	4b30 <i2cReadBufferEx_o+0x5c>
    do
      if (((status = i2cPutByte (address | 0x01)) != I2CERR_NONE) && (status != I2CERR_BUSY))
    4b14:	e3860001 	orr	r0, r6, #1	; 0x1
    4b18:	ebffff87 	bl	493c <i2cPutByte>
    4b1c:	e2504000 	subs	r4, r0, #0	; 0x0
    4b20:	0a000002 	beq	4b30 <i2cReadBufferEx_o+0x5c>
    4b24:	e3540001 	cmp	r4, #1	; 0x1
    4b28:	1a000024 	bne	4bc0 <i2cReadBufferEx_o+0xec>
    4b2c:	eafffff8 	b	4b14 <i2cReadBufferEx_o+0x40>
        return status;
    while (status == I2CERR_BUSY);
  }

  if (flags & I2CFLAGS_READDATA) {
    4b30:	e3150020 	tst	r5, #32	; 0x20
    4b34:	13a06000 	movne	r6, #0	; 0x0
    4b38:	1a000019 	bne	4ba4 <i2cReadBufferEx_o+0xd0>
    4b3c:	ea00001a 	b	4bac <i2cReadBufferEx_o+0xd8>
    for (i = 0; i < bufferLength; i++, buffer++)  {
      while (1) {
        if (((status = i2cStatus ()) == I2CERR_SLARTX_ACKRX) || (status == I2CERR_SLARTX_NACKRX) || (status == I2CERR_DATRX_ACKTX))  {
    4b40:	ebffff34 	bl	4818 <i2cStatus>
    4b44:	e3500040 	cmp	r0, #64	; 0x40
    4b48:	e1a04000 	mov	r4, r0
    4b4c:	0a000002 	beq	4b5c <i2cReadBufferEx_o+0x88>
    4b50:	e3500050 	cmp	r0, #80	; 0x50
    4b54:	13500048 	cmpne	r0, #72	; 0x48
    4b58:	1a00000b 	bne	4b8c <i2cReadBufferEx_o+0xb8>
          i2cGetByte ((i != bufferLength - 1) ? I2CMODE_ACK : I2CMODE_NACK, NULL);
    4b5c:	e2480001 	sub	r0, r8, #1	; 0x1
    4b60:	e1560000 	cmp	r6, r0
    4b64:	13a00000 	movne	r0, #0	; 0x0
    4b68:	03a00001 	moveq	r0, #1	; 0x1
    4b6c:	e3a01000 	mov	r1, #0	; 0x0
    4b70:	ebffff7d 	bl	496c <i2cGetByte>

          do
            status = i2cGetByte (I2CMODE_READ, buffer);
    4b74:	e1a01007 	mov	r1, r7
    4b78:	e3a00002 	mov	r0, #2	; 0x2
    4b7c:	ebffff7a 	bl	496c <i2cGetByte>
          while (status == I2CERR_EMPTY);
    4b80:	e3500002 	cmp	r0, #2	; 0x2
    4b84:	1a000004 	bne	4b9c <i2cReadBufferEx_o+0xc8>
    4b88:	eafffff9 	b	4b74 <i2cReadBufferEx_o+0xa0>

          break;
        }
        else if (status != I2CERR_NOINFO) {
    4b8c:	e35000f8 	cmp	r0, #248	; 0xf8
    4b90:	0affffea 	beq	4b40 <i2cReadBufferEx_o+0x6c>
          i2cStop ();
    4b94:	ebffff28 	bl	483c <i2cStop>
    4b98:	ea000008 	b	4bc0 <i2cReadBufferEx_o+0xec>
    4b9c:	e2866001 	add	r6, r6, #1	; 0x1
    4ba0:	e2877001 	add	r7, r7, #1	; 0x1
    4ba4:	e1560008 	cmp	r6, r8
    4ba8:	1affffe4 	bne	4b40 <i2cReadBufferEx_o+0x6c>
          return status;
        }
      }
    }
  }

  if (flags & I2CFLAGS_STOP)
    4bac:	e2150004 	ands	r0, r5, #4	; 0x4
    4bb0:	01a04000 	moveq	r4, r0
    4bb4:	0a000001 	beq	4bc0 <i2cReadBufferEx_o+0xec>
    i2cStop ();
    4bb8:	ebffff1f 	bl	483c <i2cStop>
    4bbc:	e3a04000 	mov	r4, #0	; 0x0

  return I2CERR_NONE;
}
    4bc0:	e1a00004 	mov	r0, r4
    4bc4:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    4bc8:	e12fff1e 	bx	lr

00004bcc <i2cPoll>:

//
//
static int i2cPoll (uint8 address)
{
  uint32 theFuture = miliSec + i2cTimeout;
    4bcc:	e59f3098 	ldr	r3, [pc, #152]	; 4c6c <prog+0x4b08>
    4bd0:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    4bd4:	e5932000 	ldr	r2, [r3]
    4bd8:	e59f3090 	ldr	r3, [pc, #144]	; 4c70 <prog+0x4b0c>
    4bdc:	e5933000 	ldr	r3, [r3]
    4be0:	e20050ff 	and	r5, r0, #255	; 0xff
    4be4:	e0826003 	add	r6, r2, r3
    4be8:	ea00000d 	b	4c24 <i2cPoll+0x58>

  while (miliSec < theFuture)  {
    if ((i2cErrno = i2cStart ()) != I2CERR_NONE)
    4bec:	ebffff1d 	bl	4868 <i2cStart>
    4bf0:	e1a03000 	mov	r3, r0
    4bf4:	e3530000 	cmp	r3, #0	; 0x0
      break;
    if ((i2cErrno = i2cPutByte (address & ~0x01)) != I2CERR_NONE)
    4bf8:	e20500fe 	and	r0, r5, #254	; 0xfe
    4bfc:	e5843000 	str	r3, [r4]
    4c00:	1a00000c 	bne	4c38 <i2cPoll+0x6c>
    4c04:	ebffff4c 	bl	493c <i2cPutByte>
    4c08:	e3500000 	cmp	r0, #0	; 0x0
    4c0c:	e5840000 	str	r0, [r4]
    4c10:	1a000008 	bne	4c38 <i2cPoll+0x6c>
      break;
    if ((i2cErrno = i2cStatus ()) == I2CERR_SLAWTX_ACKRX)
    4c14:	ebfffeff 	bl	4818 <i2cStatus>
    4c18:	e3500018 	cmp	r0, #24	; 0x18
    4c1c:	e5840000 	str	r0, [r4]
    4c20:	0a000009 	beq	4c4c <i2cPoll+0x80>
    4c24:	e59f3040 	ldr	r3, [pc, #64]	; 4c6c <prog+0x4b08>
    4c28:	e5933000 	ldr	r3, [r3]
    4c2c:	e1530006 	cmp	r3, r6
    4c30:	e59f403c 	ldr	r4, [pc, #60]	; 4c74 <prog+0x4b10>
    4c34:	3affffec 	bcc	4bec <i2cPoll+0x20>
      break;
  }

  if (i2cErrno != I2CERR_SLAWTX_ACKRX)
    4c38:	e59f2034 	ldr	r2, [pc, #52]	; 4c74 <prog+0x4b10>
    4c3c:	e5923000 	ldr	r3, [r2]
    4c40:	e3530018 	cmp	r3, #24	; 0x18
    i2cErrno = I2CERR_TIMEOUTACKPOLL;
    4c44:	13a03005 	movne	r3, #5	; 0x5
    4c48:	15823000 	strne	r3, [r2]

  i2cStop ();
    4c4c:	ebfffefa 	bl	483c <i2cStop>

  if ( i2cErrno == I2CERR_SLAWTX_ACKRX ) return 0; else return -1;
    4c50:	e59f301c 	ldr	r3, [pc, #28]	; 4c74 <prog+0x4b10>
    4c54:	e5933000 	ldr	r3, [r3]
    4c58:	e3530018 	cmp	r3, #24	; 0x18
}
    4c5c:	13e00000 	mvnne	r0, #0	; 0x0
    4c60:	03a00000 	moveq	r0, #0	; 0x0
    4c64:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    4c68:	e12fff1e 	bx	lr
    4c6c:	40000314 	andmi	r0, r0, r4, lsl r3
    4c70:	4000025c 	andmi	r0, r0, ip, asr r2
    4c74:	40001d5c 	andmi	r1, r0, ip, asr sp

00004c78 <i2cSetTimeout_o>:

//
void i2cSetTimeout_o (unsigned int timeoutInMilliseconds)
{
  i2cTimeout = timeoutInMilliseconds;
    4c78:	e59f3004 	ldr	r3, [pc, #4]	; 4c84 <prog+0x4b20>
    4c7c:	e5830000 	str	r0, [r3]
}
    4c80:	e12fff1e 	bx	lr
    4c84:	4000025c 	andmi	r0, r0, ip, asr r2

00004c88 <i2cWriteBuffer_o>:

int i2cWriteBuffer_o (uint8 address, uint8 *buffer, uint32 bufferLength)
{
    4c88:	e52de004 	str	lr, [sp, #-4]!
  if ((i2cErrno = i2cWriteBufferEx_o (address, buffer, bufferLength, I2CFLAGS_START | I2CFLAGS_ADDRESS | I2CFLAGS_WRITEDATA | I2CFLAGS_STOP)) != I2CERR_NONE) {
    4c8c:	e3a0301d 	mov	r3, #29	; 0x1d
    4c90:	e20000ff 	and	r0, r0, #255	; 0xff
    4c94:	ebffff4e 	bl	49d4 <i2cWriteBufferEx_o>
    4c98:	e59f3010 	ldr	r3, [pc, #16]	; 4cb0 <prog+0x4b4c>
    4c9c:	e3500000 	cmp	r0, #0	; 0x0
    4ca0:	e5830000 	str	r0, [r3]
    return -1;
  }

  return 0;
}
    4ca4:	13e00000 	mvnne	r0, #0	; 0x0
    4ca8:	e49de004 	ldr	lr, [sp], #4
    4cac:	e12fff1e 	bx	lr
    4cb0:	40001d5c 	andmi	r1, r0, ip, asr sp

00004cb4 <i2cReadBuffer_o>:

int i2cReadBuffer_o (uint8 address, uint8 *buffer, uint32 bufferLength)
{
    4cb4:	e52de004 	str	lr, [sp, #-4]!
  if ((i2cErrno = i2cReadBufferEx_o (address, buffer, bufferLength, I2CFLAGS_START | I2CFLAGS_ADDRESS | I2CFLAGS_READDATA | I2CFLAGS_STOP)) != I2CERR_NONE) {
    4cb8:	e3a0302d 	mov	r3, #45	; 0x2d
    4cbc:	e20000ff 	and	r0, r0, #255	; 0xff
    4cc0:	ebffff83 	bl	4ad4 <i2cReadBufferEx_o>
    4cc4:	e59f3010 	ldr	r3, [pc, #16]	; 4cdc <prog+0x4b78>
    4cc8:	e3500000 	cmp	r0, #0	; 0x0
    4ccc:	e5830000 	str	r0, [r3]
    return -1;
  }

  return 0;
}
    4cd0:	13e00000 	mvnne	r0, #0	; 0x0
    4cd4:	e49de004 	ldr	lr, [sp], #4
    4cd8:	e12fff1e 	bx	lr
    4cdc:	40001d5c 	andmi	r1, r0, ip, asr sp

00004ce0 <i2cWriteReadBuffer_o>:

int i2cWriteReadBuffer_o (uint8 address, uint8 *buffer, uint32 putLength, uint32 getLength)
{
    4ce0:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    4ce4:	e20040ff 	and	r4, r0, #255	; 0xff
    4ce8:	e1a06003 	mov	r6, r3
  if ((i2cErrno = i2cWriteBufferEx_o (address, buffer, putLength, I2CFLAGS_START | I2CFLAGS_ADDRESS | I2CFLAGS_WRITEDATA)) != I2CERR_NONE) {
    4cec:	e1a00004 	mov	r0, r4
    4cf0:	e3a03019 	mov	r3, #25	; 0x19
    4cf4:	e1a05001 	mov	r5, r1
    4cf8:	ebffff35 	bl	49d4 <i2cWriteBufferEx_o>
    4cfc:	e1a0c000 	mov	ip, r0
    return -1;
	}
	
  if ((i2cErrno = i2cReadBufferEx_o (address, buffer, getLength, I2CFLAGS_REPEATEDSTART | I2CFLAGS_ADDRESS | I2CFLAGS_READDATA | I2CFLAGS_STOP)) != I2CERR_NONE) {
    4d00:	e1a00004 	mov	r0, r4
    4d04:	e59f4038 	ldr	r4, [pc, #56]	; 4d44 <prog+0x4be0>
    4d08:	e35c0000 	cmp	ip, #0	; 0x0
    4d0c:	e1a01005 	mov	r1, r5
    4d10:	e1a02006 	mov	r2, r6
    4d14:	e3a0302e 	mov	r3, #46	; 0x2e
    4d18:	e584c000 	str	ip, [r4]
    4d1c:	1a000004 	bne	4d34 <i2cWriteReadBuffer_o+0x54>
    4d20:	ebffff6b 	bl	4ad4 <i2cReadBufferEx_o>
    4d24:	e3500000 	cmp	r0, #0	; 0x0
    4d28:	e1a03000 	mov	r3, r0
    4d2c:	e5840000 	str	r0, [r4]
    4d30:	0a000000 	beq	4d38 <i2cWriteReadBuffer_o+0x58>
    4d34:	e3e03000 	mvn	r3, #0	; 0x0
    return -1;
  }
  
  return 0;
}
    4d38:	e1a00003 	mov	r0, r3
    4d3c:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    4d40:	e12fff1e 	bx	lr
    4d44:	40001d5c 	andmi	r1, r0, ip, asr sp

00004d48 <i2cWriteBufferPoll>:

int i2cWriteBufferPoll (uint8 address, uint8 *buffer, uint32 bufferLength)
{
    4d48:	e92d4010 	stmdb	sp!, {r4, lr}
    4d4c:	e20040ff 	and	r4, r0, #255	; 0xff
  int r;

  if (!(r = i2cWriteBuffer_o (address, buffer, bufferLength)))
    4d50:	e1a00004 	mov	r0, r4
    4d54:	ebffffcb 	bl	4c88 <i2cWriteBuffer_o>
    4d58:	e3500000 	cmp	r0, #0	; 0x0
    4d5c:	1a000002 	bne	4d6c <i2cWriteBufferPoll+0x24>
    r = i2cPoll (address);
    4d60:	e1a00004 	mov	r0, r4

  return r;
}
    4d64:	e8bd4010 	ldmia	sp!, {r4, lr}
    4d68:	eaffff97 	b	4bcc <i2cPoll>
    4d6c:	e8bd4010 	ldmia	sp!, {r4, lr}
    4d70:	e12fff1e 	bx	lr

00004d74 <i2cWriteReadBufferPoll>:

int i2cWriteReadBufferPoll (uint8 address, uint8 *buffer, uint32 putLength, uint32 getLength)
{
    4d74:	e92d4010 	stmdb	sp!, {r4, lr}
    4d78:	e20040ff 	and	r4, r0, #255	; 0xff
  int r;

  if (!(r = i2cWriteReadBuffer_o (address, buffer, putLength, getLength)))
    4d7c:	e1a00004 	mov	r0, r4
    4d80:	ebffffd6 	bl	4ce0 <i2cWriteReadBuffer_o>
    4d84:	e3500000 	cmp	r0, #0	; 0x0
    4d88:	1a000002 	bne	4d98 <i2cWriteReadBufferPoll+0x24>
    r = i2cPoll (address);
    4d8c:	e1a00004 	mov	r0, r4
    
  return r;
}
    4d90:	e8bd4010 	ldmia	sp!, {r4, lr}
    4d94:	eaffff8c 	b	4bcc <i2cPoll>
    4d98:	e8bd4010 	ldmia	sp!, {r4, lr}
    4d9c:	e12fff1e 	bx	lr

00004da0 <i2cWaitComplete>:

/*****************
 * I2C interrupt driven support
 *
*****************/
int i2cTransferBytes (uint8 address, uint8 *buffer, int bufferLenWrite, int bufferLenRead)
{
  //
  //  Determine if our first operation will be a write or read.  If both, the
  //  write always occurs first.
  //
  if (bufferLenWrite)
    address &= ~0x01;
  else if (bufferLenRead)
    address |= 0x01;
  else
  {
    i2cErrno = I2CERR_OTHER;
    return -1;
  }

  //
  //  Wait until last I2C operation has finished.  
  //
  if (i2cBusInUse && i2cWaitComplete (i2cTimeout))
  {
    i2cErrno = I2CERR_TIMEOUT;
    return -1;
  }

  //
  //  Mark bus as in use, save the address, buffer and length
  //
  i2cBusInUse = 1;
  i2cAddress = address;
  i2cDataBuffer = buffer;
  i2cDataLenWrite = bufferLenWrite;
  i2cDataLenRead = bufferLenRead;
  i2cDataPtr = buffer;

  I2C0_CONCLR = I2C_CONCLR_MASK;
  I2C0_CONSET = I2C_CONSET_I2EN;
  I2C0_CONSET = I2C_CONSET_STA;

  return 0;
}

//
//
//
int i2cWaitComplete (int milliseconds)
{
  if (i2cBusInUse)  {
    4da0:	e59f3070 	ldr	r3, [pc, #112]	; 4e18 <prog+0x4cb4>
    4da4:	e5933000 	ldr	r3, [r3]
    4da8:	e3530000 	cmp	r3, #0	; 0x0
    4dac:	e92d4010 	stmdb	sp!, {r4, lr}
    4db0:	0a000015 	beq	4e0c <i2cWaitComplete+0x6c>
    uint32 theFuture;

    if (milliseconds < 10) milliseconds = 10;

    for (theFuture = miliSec + (milliseconds / 10); i2cBusInUse; ) {
    4db4:	e59f3060 	ldr	r3, [pc, #96]	; 4e1c <prog+0x4cb8>
    4db8:	e350000a 	cmp	r0, #10	; 0xa
    4dbc:	b3a0000a 	movlt	r0, #10	; 0xa
    4dc0:	e3a0100a 	mov	r1, #10	; 0xa
    4dc4:	e5934000 	ldr	r4, [r3]
    4dc8:	eb0002ca 	bl	58f8 <__aeabi_idiv>
    4dcc:	e0842000 	add	r2, r4, r0
    4dd0:	ea000009 	b	4dfc <i2cWaitComplete+0x5c>
      if (miliSec > theFuture) {
    4dd4:	e1540002 	cmp	r4, r2
    4dd8:	9a000007 	bls	4dfc <i2cWaitComplete+0x5c>
        I2C0_CONCLR = I2C_CONCLR_I2ENC;
    4ddc:	e59f303c 	ldr	r3, [pc, #60]	; 4e20 <prog+0x4cbc>
    4de0:	e3a02040 	mov	r2, #64	; 0x40
    4de4:	e5c32018 	strb	r2, [r3, #24]
        i2cErrno = I2CERR_TIMEOUTWC;
    4de8:	e59f3034 	ldr	r3, [pc, #52]	; 4e24 <prog+0x4cc0>
    4dec:	e3a02004 	mov	r2, #4	; 0x4
    4df0:	e3e00000 	mvn	r0, #0	; 0x0
    4df4:	e5832000 	str	r2, [r3]
    4df8:	ea000004 	b	4e10 <i2cWaitComplete+0x70>
    4dfc:	e59f3014 	ldr	r3, [pc, #20]	; 4e18 <prog+0x4cb4>
    4e00:	e5933000 	ldr	r3, [r3]
    4e04:	e3530000 	cmp	r3, #0	; 0x0
    4e08:	1afffff1 	bne	4dd4 <i2cWaitComplete+0x34>
    4e0c:	e3a00000 	mov	r0, #0	; 0x0
        return -1;
      }
    }
  }

  return 0;
}
    4e10:	e8bd4010 	ldmia	sp!, {r4, lr}
    4e14:	e12fff1e 	bx	lr
    4e18:	40001d6c 	andmi	r1, r0, ip, ror #26
    4e1c:	40000314 	andmi	r0, r0, r4, lsl r3
    4e20:	e001c000 	and	ip, r1, r0
    4e24:	40001d5c 	andmi	r1, r0, ip, asr sp

00004e28 <i2cTransferBytes>:
    4e28:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    4e2c:	e2527000 	subs	r7, r2, #0	; 0x0
    4e30:	e20040fe 	and	r4, r0, #254	; 0xfe
    4e34:	e1a05003 	mov	r5, r3
    4e38:	e1a06001 	mov	r6, r1
    4e3c:	e20000ff 	and	r0, r0, #255	; 0xff
    4e40:	1a000004 	bne	4e58 <i2cTransferBytes+0x30>
    4e44:	e3530000 	cmp	r3, #0	; 0x0
    4e48:	e3804001 	orr	r4, r0, #1	; 0x1
    4e4c:	03a02007 	moveq	r2, #7	; 0x7
    4e50:	e3e00000 	mvn	r0, #0	; 0x0
    4e54:	0a00000a 	beq	4e84 <i2cTransferBytes+0x5c>
    4e58:	e59f308c 	ldr	r3, [pc, #140]	; 4eec <prog+0x4d88>
    4e5c:	e5933000 	ldr	r3, [r3]
    4e60:	e3530000 	cmp	r3, #0	; 0x0
    4e64:	0a000009 	beq	4e90 <i2cTransferBytes+0x68>
    4e68:	e59f3080 	ldr	r3, [pc, #128]	; 4ef0 <prog+0x4d8c>
    4e6c:	e5930000 	ldr	r0, [r3]
    4e70:	ebffffca 	bl	4da0 <i2cWaitComplete>
    4e74:	e3500000 	cmp	r0, #0	; 0x0
    4e78:	e3e00000 	mvn	r0, #0	; 0x0
    4e7c:	0a000003 	beq	4e90 <i2cTransferBytes+0x68>
    4e80:	e3a02003 	mov	r2, #3	; 0x3
    4e84:	e59f3068 	ldr	r3, [pc, #104]	; 4ef4 <prog+0x4d90>
    4e88:	e5832000 	str	r2, [r3]
    4e8c:	ea000014 	b	4ee4 <i2cTransferBytes+0xbc>
    4e90:	e59f3054 	ldr	r3, [pc, #84]	; 4eec <prog+0x4d88>
    4e94:	e3a02001 	mov	r2, #1	; 0x1
    4e98:	e5832000 	str	r2, [r3]
    4e9c:	e59f3054 	ldr	r3, [pc, #84]	; 4ef8 <prog+0x4d94>
    4ea0:	e5c34000 	strb	r4, [r3]
    4ea4:	e59f3050 	ldr	r3, [pc, #80]	; 4efc <prog+0x4d98>
    4ea8:	e5837000 	str	r7, [r3]
    4eac:	e59f304c 	ldr	r3, [pc, #76]	; 4f00 <prog+0x4d9c>
    4eb0:	e5835000 	str	r5, [r3]
    4eb4:	e59f3048 	ldr	r3, [pc, #72]	; 4f04 <prog+0x4da0>
    4eb8:	e59f1048 	ldr	r1, [pc, #72]	; 4f08 <prog+0x4da4>
    4ebc:	e5836000 	str	r6, [r3]
    4ec0:	e3a0306c 	mov	r3, #108	; 0x6c
    4ec4:	e5c13018 	strb	r3, [r1, #24]
    4ec8:	e59f303c 	ldr	r3, [pc, #60]	; 4f0c <prog+0x4da8>
    4ecc:	e5836000 	str	r6, [r3]
    4ed0:	e3a03040 	mov	r3, #64	; 0x40
    4ed4:	e5c13000 	strb	r3, [r1]
    4ed8:	e3a03020 	mov	r3, #32	; 0x20
    4edc:	e5c13000 	strb	r3, [r1]
    4ee0:	e3a00000 	mov	r0, #0	; 0x0
    4ee4:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    4ee8:	e12fff1e 	bx	lr
    4eec:	40001d6c 	andmi	r1, r0, ip, ror #26
    4ef0:	4000025c 	andmi	r0, r0, ip, asr r2
    4ef4:	40001d5c 	andmi	r1, r0, ip, asr sp
    4ef8:	40001d68 	andmi	r1, r0, r8, ror #26
    4efc:	40001d64 	andmi	r1, r0, r4, ror #26
    4f00:	40001d60 	andmi	r1, r0, r0, ror #26
    4f04:	40001d54 	andmi	r1, r0, r4, asr sp
    4f08:	e001c000 	and	ip, r1, r0
    4f0c:	40001d58 	andmi	r1, r0, r8, asr sp

00004f10 <i2cWriteBufferEx>:

//
int i2cWriteBufferEx (uint8 address, uint8 *buffer, uint32 bufferLength, int milliseconds)
{
    4f10:	e92d4010 	stmdb	sp!, {r4, lr}
    4f14:	e20000ff 	and	r0, r0, #255	; 0xff
    4f18:	e1a04003 	mov	r4, r3
  if (i2cTransferBytes (address, buffer, bufferLength, 0))
    4f1c:	e3a03000 	mov	r3, #0	; 0x0
    4f20:	ebffffc0 	bl	4e28 <i2cTransferBytes>
    4f24:	e3500000 	cmp	r0, #0	; 0x0
    return -1;

  return i2cWaitComplete (milliseconds);
    4f28:	e1a00004 	mov	r0, r4
    4f2c:	1a000001 	bne	4f38 <i2cWriteBufferEx+0x28>
}
    4f30:	e8bd4010 	ldmia	sp!, {r4, lr}
    4f34:	eaffff99 	b	4da0 <i2cWaitComplete>
    4f38:	e3e00000 	mvn	r0, #0	; 0x0
    4f3c:	e8bd4010 	ldmia	sp!, {r4, lr}
    4f40:	e12fff1e 	bx	lr

00004f44 <i2cReadBufferEx>:

int i2cReadBufferEx (uint8 address, uint8 *buffer, uint32 bufferLength, int milliseconds)
{
    4f44:	e92d4010 	stmdb	sp!, {r4, lr}
    4f48:	e20000ff 	and	r0, r0, #255	; 0xff
    4f4c:	e1a04003 	mov	r4, r3
  if (i2cTransferBytes (address, buffer, 0, bufferLength))
    4f50:	e1a03002 	mov	r3, r2
    4f54:	e3a02000 	mov	r2, #0	; 0x0
    4f58:	ebffffb2 	bl	4e28 <i2cTransferBytes>
    4f5c:	e3500000 	cmp	r0, #0	; 0x0
    return -1;

  return i2cWaitComplete (milliseconds);
    4f60:	e1a00004 	mov	r0, r4
    4f64:	1a000001 	bne	4f70 <i2cReadBufferEx+0x2c>
}
    4f68:	e8bd4010 	ldmia	sp!, {r4, lr}
    4f6c:	eaffff8b 	b	4da0 <i2cWaitComplete>
    4f70:	e3e00000 	mvn	r0, #0	; 0x0
    4f74:	e8bd4010 	ldmia	sp!, {r4, lr}
    4f78:	e12fff1e 	bx	lr

00004f7c <i2cWriteReadBufferEx>:

int i2cWriteReadBufferEx (uint8 address, uint8 *buffer, uint32 putLength, uint32 getLength, int milliseconds)
{
    4f7c:	e92d4010 	stmdb	sp!, {r4, lr}
    4f80:	e20000ff 	and	r0, r0, #255	; 0xff
    4f84:	e59d4008 	ldr	r4, [sp, #8]
  if (i2cTransferBytes (address, buffer, putLength, getLength))
    4f88:	ebffffa6 	bl	4e28 <i2cTransferBytes>
    4f8c:	e3500000 	cmp	r0, #0	; 0x0
    return -1;

  return i2cWaitComplete (milliseconds);
    4f90:	e1a00004 	mov	r0, r4
    4f94:	1a000001 	bne	4fa0 <i2cWriteReadBufferEx+0x24>
}
    4f98:	e8bd4010 	ldmia	sp!, {r4, lr}
    4f9c:	eaffff7f 	b	4da0 <i2cWaitComplete>
    4fa0:	e3e00000 	mvn	r0, #0	; 0x0
    4fa4:	e8bd4010 	ldmia	sp!, {r4, lr}
    4fa8:	e12fff1e 	bx	lr

00004fac <i2cWriteBuffer>:

//
//  DANGER, WILL ROBINSON!  The callers buffer must persist until we're done
//
int i2cWriteBuffer (uint8 address, uint8 *buffer, uint32 bufferLength)
{
  return i2cWriteBufferEx (address, buffer, bufferLength, i2cTimeout);
    4fac:	e59f3008 	ldr	r3, [pc, #8]	; 4fbc <prog+0x4e58>
    4fb0:	e5933000 	ldr	r3, [r3]
    4fb4:	e20000ff 	and	r0, r0, #255	; 0xff
    4fb8:	eaffffd4 	b	4f10 <i2cWriteBufferEx>
    4fbc:	4000025c 	andmi	r0, r0, ip, asr r2

00004fc0 <i2cReadBuffer>:
}

int i2cReadBuffer (uint8 address, uint8 *buffer, uint32 bufferLength)
{
  return i2cReadBufferEx (address, buffer, bufferLength, i2cTimeout);
    4fc0:	e59f3008 	ldr	r3, [pc, #8]	; 4fd0 <prog+0x4e6c>
    4fc4:	e5933000 	ldr	r3, [r3]
    4fc8:	e20000ff 	and	r0, r0, #255	; 0xff
    4fcc:	eaffffdc 	b	4f44 <i2cReadBufferEx>
    4fd0:	4000025c 	andmi	r0, r0, ip, asr r2

00004fd4 <i2cWriteReadBuffer>:
}

int i2cWriteReadBuffer (uint8 address, uint8 *buffer, uint32 putLength, uint32 getLength)
{
    4fd4:	e52de004 	str	lr, [sp, #-4]!
  return i2cWriteReadBufferEx (address, buffer, putLength, getLength, i2cTimeout);
    4fd8:	e59fc01c 	ldr	ip, [pc, #28]	; 4ffc <prog+0x4e98>
    4fdc:	e59cc000 	ldr	ip, [ip]
    4fe0:	e24dd004 	sub	sp, sp, #4	; 0x4
    4fe4:	e20000ff 	and	r0, r0, #255	; 0xff
    4fe8:	e58dc000 	str	ip, [sp]
    4fec:	ebffffe2 	bl	4f7c <i2cWriteReadBufferEx>
}
    4ff0:	e28dd004 	add	sp, sp, #4	; 0x4
    4ff4:	e49de004 	ldr	lr, [sp], #4
    4ff8:	e12fff1e 	bx	lr
    4ffc:	4000025c 	andmi	r0, r0, ip, asr r2

00005000 <i2cSetTimeout>:

void i2cSetTimeout (int timeoutInMilliseconds)
{
  if (timeoutInMilliseconds < 10)
    timeoutInMilliseconds = 10;

  i2cTimeout = timeoutInMilliseconds;
    5000:	e59f300c 	ldr	r3, [pc, #12]	; 5014 <prog+0x4eb0>
    5004:	e350000a 	cmp	r0, #10	; 0xa
    5008:	b3a0000a 	movlt	r0, #10	; 0xa
    500c:	e5830000 	str	r0, [r3]
}
    5010:	e12fff1e 	bx	lr
    5014:	4000025c 	andmi	r0, r0, ip, asr r2

00005018 <eepromRdSBlk>:


/*****************
 * EEProm CAT1640 8Kbx8 support
 *
*****************/

#define EEPROM_ADDRESS 0xae

// EEProm Read SubBlock in range 0xXX00-0xXX40
int eepromRdSBlk (uint16 addr, uint8 *buffer, uint16 Length)
{
  int r;
  
	addr &= 0x1fff;
    5018:	e1a00980 	mov	r0, r0, lsl #19
    501c:	e1a009a0 	mov	r0, r0, lsr #19
    5020:	e1a03802 	mov	r3, r2, lsl #16
  buffer [0] = addr >> 8;
    5024:	e1a0c420 	mov	ip, r0, lsr #8
  buffer [1] = addr;
    5028:	e5c10001 	strb	r0, [r1, #1]

  //r = i2cWriteReadBufferPoll ((uint8)EEPROM_ADDRESS, buffer, 2, Length);
  //printf("\n\reepromRdInt addr=%x len=%d", (int)addr, (int)Length);
	r = i2cWriteReadBuffer ((uint8)EEPROM_ADDRESS, buffer, 2, Length);
    502c:	e1a03823 	mov	r3, r3, lsr #16
    5030:	e3a000ae 	mov	r0, #174	; 0xae
    5034:	e3a02002 	mov	r2, #2	; 0x2
    5038:	e5c1c000 	strb	ip, [r1]
    503c:	eaffffe4 	b	4fd4 <i2cWriteReadBuffer>

00005040 <eepromWrSBlk>:
	
  return r;
}

// EEProm Write SubBlock in range 0xXX00-0xXX40
int eepromWrSBlk (uint16 addr, uint8 *buffer, uint16 Length)
{
  int r;

	addr &= 0x1fff;
    5040:	e1a00980 	mov	r0, r0, lsl #19
    5044:	e1a02802 	mov	r2, r2, lsl #16
    5048:	e1a009a0 	mov	r0, r0, lsr #19
    504c:	e1a02822 	mov	r2, r2, lsr #16
  buffer [0] = addr >> 8;
    5050:	e1a0c420 	mov	ip, r0, lsr #8
  buffer [1] = addr;
    5054:	e5c10001 	strb	r0, [r1, #1]
  
  //r = i2cWriteBufferPoll ((uint8)EEPROM_ADDRESS, buffer, Length + 2);
  //printf("\n\reepromWrInt addr=%x len=%d", (int)addr, (int)Length);
	r = i2cWriteBuffer ((uint8)EEPROM_ADDRESS, buffer, Length + 2);
    5058:	e2822002 	add	r2, r2, #2	; 0x2
    505c:	e3a000ae 	mov	r0, #174	; 0xae
    5060:	e5c1c000 	strb	ip, [r1]
    5064:	eaffffd0 	b	4fac <i2cWriteBuffer>

00005068 <eepromRead>:
  return r;
}

int eepromWrite (uint16 addr, uint8* buffer, int Length)
{
	int len, bLen, el, r, idx;
	uint16 adr = addr;
	
	idx = 0;
	r = -1;
	len = Length;
	while ( len > 0 ) {
		if ( len > 64 ) bLen = 64; else bLen = len;
		el = ((adr|0x3f)-adr)+1;
		if ( el<bLen ) bLen = el;	
		r = eepromWrSBlk (adr, &buffer[idx], bLen);
		//printf("\n\reeWrBlk adr=%d(x%x) len=%d idx=%d r=%d ", adr, adr, bLen, idx, r);
		LogWr(0x50); LogWr(adr); LogWr((uint16)bLen);

		idx += bLen;
		len -= bLen;
		adr += bLen;
	}
	return r;
}

int eepromRead (uint16 addr, uint8* buffer, int Length)
{
    5068:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    506c:	e1a00800 	mov	r0, r0, lsl #16
    5070:	e3520f7d 	cmp	r2, #500	; 0x1f4
    5074:	b1a07002 	movlt	r7, r2
    5078:	a3a07f7d 	movge	r7, #500	; 0x1f4
    507c:	e1a0a001 	mov	sl, r1
    5080:	e1a05820 	mov	r5, r0, lsr #16
    5084:	e3e09000 	mvn	r9, #0	; 0x0
    5088:	e3a08000 	mov	r8, #0	; 0x0
    508c:	ea000014 	b	50e4 <eepromRead+0x7c>
	int bLen, len, el, r, idx;
	uint16 adr = addr;
	
	len = Length;
	if ( len > 500 ) len = 500;
	idx = 0;
	r = -1;
	
	while ( len > 0 ) {
    5090:	e3570040 	cmp	r7, #64	; 0x40
    5094:	b1a03007 	movlt	r3, r7
    5098:	a3a03040 	movge	r3, #64	; 0x40
		if ( len > 64 ) bLen = 64; else bLen = len;
		el = ((adr|0x3f)-adr)+1;
    509c:	e1560003 	cmp	r6, r3
    50a0:	a1a06003 	movge	r6, r3
		if ( el<bLen ) bLen = el;	
		r = eepromRdSBlk (adr, &buffer[idx], bLen);
    50a4:	e1a04806 	mov	r4, r6, lsl #16
    50a8:	e1a04824 	mov	r4, r4, lsr #16
    50ac:	e1a02004 	mov	r2, r4
    50b0:	ebffffd8 	bl	5018 <eepromRdSBlk>
    50b4:	e1a09000 	mov	r9, r0
		//printf("\n\reeRdBlk adr=%d(x%x) len=%d idx=%d r=%d ", adr, adr, bLen, idx, r);
		LogWr(0x51); LogWr(adr); LogWr((uint16)bLen);
    50b8:	e3a00051 	mov	r0, #81	; 0x51
    50bc:	ebffefc2 	bl	fcc <LogWr>
    50c0:	e1a00005 	mov	r0, r5
    50c4:	ebffefc0 	bl	fcc <LogWr>
    50c8:	e1a00004 	mov	r0, r4
    50cc:	ebffefbe 	bl	fcc <LogWr>

		idx += bLen;
		len -= bLen;
		adr += bLen;
    50d0:	e0854004 	add	r4, r5, r4
    50d4:	e1a04804 	mov	r4, r4, lsl #16
    50d8:	e0667007 	rsb	r7, r6, r7
    50dc:	e0888006 	add	r8, r8, r6
    50e0:	e1a05824 	mov	r5, r4, lsr #16
    50e4:	e385303f 	orr	r3, r5, #63	; 0x3f
    50e8:	e0653003 	rsb	r3, r5, r3
    50ec:	e3570000 	cmp	r7, #0	; 0x0
    50f0:	e2836001 	add	r6, r3, #1	; 0x1
    50f4:	e08a1008 	add	r1, sl, r8
    50f8:	e1a00005 	mov	r0, r5
    50fc:	caffffe3 	bgt	5090 <eepromRead+0x28>
	}
	return r;
}
    5100:	e1a00009 	mov	r0, r9
    5104:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5108:	e12fff1e 	bx	lr

0000510c <eepromWrite>:
    510c:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5110:	e1a00800 	mov	r0, r0, lsl #16
    5114:	e1a09001 	mov	r9, r1
    5118:	e1a07002 	mov	r7, r2
    511c:	e1a05820 	mov	r5, r0, lsr #16
    5120:	e3e0a000 	mvn	sl, #0	; 0x0
    5124:	e3a08000 	mov	r8, #0	; 0x0
    5128:	ea000014 	b	5180 <eepromWrite+0x74>
    512c:	e3570040 	cmp	r7, #64	; 0x40
    5130:	b1a03007 	movlt	r3, r7
    5134:	a3a03040 	movge	r3, #64	; 0x40
    5138:	e1560003 	cmp	r6, r3
    513c:	a1a06003 	movge	r6, r3
    5140:	e1a04806 	mov	r4, r6, lsl #16
    5144:	e1a04824 	mov	r4, r4, lsr #16
    5148:	e1a02004 	mov	r2, r4
    514c:	ebffffbb 	bl	5040 <eepromWrSBlk>
    5150:	e1a0a000 	mov	sl, r0
    5154:	e3a00050 	mov	r0, #80	; 0x50
    5158:	ebffef9b 	bl	fcc <LogWr>
    515c:	e1a00005 	mov	r0, r5
    5160:	ebffef99 	bl	fcc <LogWr>
    5164:	e1a00004 	mov	r0, r4
    5168:	ebffef97 	bl	fcc <LogWr>
    516c:	e0854004 	add	r4, r5, r4
    5170:	e1a04804 	mov	r4, r4, lsl #16
    5174:	e0667007 	rsb	r7, r6, r7
    5178:	e0888006 	add	r8, r8, r6
    517c:	e1a05824 	mov	r5, r4, lsr #16
    5180:	e385303f 	orr	r3, r5, #63	; 0x3f
    5184:	e0653003 	rsb	r3, r5, r3
    5188:	e3570000 	cmp	r7, #0	; 0x0
    518c:	e2836001 	add	r6, r3, #1	; 0x1
    5190:	e0891008 	add	r1, r9, r8
    5194:	e1a00005 	mov	r0, r5
    5198:	caffffe3 	bgt	512c <eepromWrite+0x20>
    519c:	e1a0000a 	mov	r0, sl
    51a0:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51a4:	e12fff1e 	bx	lr

000051a8 <i2cISR>:
    51a8:	e24ee004 	sub	lr, lr, #4	; 0x4
    51ac:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    51b0:	e14f1000 	mrs	r1, SPSR
    51b4:	e92d0002 	stmdb	sp!, {r1}
    51b8:	e59f51ec 	ldr	r5, [pc, #492]	; 53ac <prog+0x5248>
    51bc:	e5d53004 	ldrb	r3, [r5, #4]
    51c0:	e59f41e8 	ldr	r4, [pc, #488]	; 53b0 <prog+0x524c>
    51c4:	e20330f8 	and	r3, r3, #248	; 0xf8
    51c8:	e5843000 	str	r3, [r4]
    51cc:	e3a00049 	mov	r0, #73	; 0x49
    51d0:	ebffef7d 	bl	fcc <LogWr>
    51d4:	e1d400b0 	ldrh	r0, [r4]
    51d8:	ebffef7b 	bl	fcc <LogWr>
    51dc:	e5944000 	ldr	r4, [r4]
    51e0:	e3540030 	cmp	r4, #48	; 0x30
    51e4:	0a00005c 	beq	535c <i2cISR+0x1b4>
    51e8:	8a00000e 	bhi	5228 <i2cISR+0x80>
    51ec:	e3540010 	cmp	r4, #16	; 0x10
    51f0:	0a000020 	beq	5278 <i2cISR+0xd0>
    51f4:	8a000004 	bhi	520c <i2cISR+0x64>
    51f8:	e3540000 	cmp	r4, #0	; 0x0
    51fc:	0a000018 	beq	5264 <i2cISR+0xbc>
    5200:	e3540008 	cmp	r4, #8	; 0x8
    5204:	1a000059 	bne	5370 <i2cISR+0x1c8>
    5208:	ea00001a 	b	5278 <i2cISR+0xd0>
    520c:	e3540020 	cmp	r4, #32	; 0x20
    5210:	0a000053 	beq	5364 <i2cISR+0x1bc>
    5214:	e3540028 	cmp	r4, #40	; 0x28
    5218:	0a00001a 	beq	5288 <i2cISR+0xe0>
    521c:	e3540018 	cmp	r4, #24	; 0x18
    5220:	1a000052 	bne	5370 <i2cISR+0x1c8>
    5224:	ea00001d 	b	52a0 <i2cISR+0xf8>
    5228:	e3540048 	cmp	r4, #72	; 0x48
    522c:	0a00004a 	beq	535c <i2cISR+0x1b4>
    5230:	8a000004 	bhi	5248 <i2cISR+0xa0>
    5234:	e3540038 	cmp	r4, #56	; 0x38
    5238:	0a000030 	beq	5300 <i2cISR+0x158>
    523c:	e3540040 	cmp	r4, #64	; 0x40
    5240:	1a00004a 	bne	5370 <i2cISR+0x1c8>
    5244:	ea00003a 	b	5334 <i2cISR+0x18c>
    5248:	e3540058 	cmp	r4, #88	; 0x58
    524c:	0a000042 	beq	535c <i2cISR+0x1b4>
    5250:	e35400f8 	cmp	r4, #248	; 0xf8
    5254:	0a00004b 	beq	5388 <i2cISR+0x1e0>
    5258:	e3540050 	cmp	r4, #80	; 0x50
    525c:	1a000043 	bne	5370 <i2cISR+0x1c8>
    5260:	ea000028 	b	5308 <i2cISR+0x160>
    5264:	e3a03014 	mov	r3, #20	; 0x14
    5268:	e5c53000 	strb	r3, [r5]
    526c:	e59f3140 	ldr	r3, [pc, #320]	; 53b4 <prog+0x5250>
    5270:	e5834000 	str	r4, [r3]
    5274:	ea000043 	b	5388 <i2cISR+0x1e0>
    5278:	e59f3138 	ldr	r3, [pc, #312]	; 53b8 <prog+0x5254>
    527c:	e5d33000 	ldrb	r3, [r3]
    5280:	e5c53008 	strb	r3, [r5, #8]
    5284:	ea00003f 	b	5388 <i2cISR+0x1e0>
    5288:	e59f212c 	ldr	r2, [pc, #300]	; 53bc <prog+0x5258>
    528c:	e5923000 	ldr	r3, [r2]
    5290:	e2433001 	sub	r3, r3, #1	; 0x1
    5294:	e3530000 	cmp	r3, #0	; 0x0
    5298:	e5823000 	str	r3, [r2]
    529c:	0a000007 	beq	52c0 <i2cISR+0x118>
    52a0:	e59f2118 	ldr	r2, [pc, #280]	; 53c0 <prog+0x525c>
    52a4:	e5923000 	ldr	r3, [r2]
    52a8:	e4d31001 	ldrb	r1, [r3], #1
    52ac:	e5823000 	str	r3, [r2]
    52b0:	e3a03020 	mov	r3, #32	; 0x20
    52b4:	e5c51008 	strb	r1, [r5, #8]
    52b8:	e5c53018 	strb	r3, [r5, #24]
    52bc:	ea000031 	b	5388 <i2cISR+0x1e0>
    52c0:	e59f30fc 	ldr	r3, [pc, #252]	; 53c4 <prog+0x5260>
    52c4:	e5932000 	ldr	r2, [r3]
    52c8:	e3520000 	cmp	r2, #0	; 0x0
    52cc:	03a03020 	moveq	r3, #32	; 0x20
    52d0:	05c53018 	streqb	r3, [r5, #24]
    52d4:	03a03010 	moveq	r3, #16	; 0x10
    52d8:	05c53000 	streqb	r3, [r5]
    52dc:	0a000027 	beq	5380 <i2cISR+0x1d8>
    52e0:	e59f10d0 	ldr	r1, [pc, #208]	; 53b8 <prog+0x5254>
    52e4:	e5d13000 	ldrb	r3, [r1]
    52e8:	e59f20d8 	ldr	r2, [pc, #216]	; 53c8 <prog+0x5264>
    52ec:	e3833001 	orr	r3, r3, #1	; 0x1
    52f0:	e5922000 	ldr	r2, [r2]
    52f4:	e5c13000 	strb	r3, [r1]
    52f8:	e59f30c0 	ldr	r3, [pc, #192]	; 53c0 <prog+0x525c>
    52fc:	e5832000 	str	r2, [r3]
    5300:	e3a03020 	mov	r3, #32	; 0x20
    5304:	ea00000d 	b	5340 <i2cISR+0x198>
    5308:	e59f00b0 	ldr	r0, [pc, #176]	; 53c0 <prog+0x525c>
    530c:	e5d53008 	ldrb	r3, [r5, #8]
    5310:	e5902000 	ldr	r2, [r0]
    5314:	e59f10a8 	ldr	r1, [pc, #168]	; 53c4 <prog+0x5260>
    5318:	e4c23001 	strb	r3, [r2], #1
    531c:	e5913000 	ldr	r3, [r1]
    5320:	e243c001 	sub	ip, r3, #1	; 0x1
    5324:	e35c0000 	cmp	ip, #0	; 0x0
    5328:	e5802000 	str	r2, [r0]
    532c:	e581c000 	str	ip, [r1]
    5330:	0a000004 	beq	5348 <i2cISR+0x1a0>
    5334:	e3a03020 	mov	r3, #32	; 0x20
    5338:	e5c53018 	strb	r3, [r5, #24]
    533c:	e3a03004 	mov	r3, #4	; 0x4
    5340:	e5c53000 	strb	r3, [r5]
    5344:	ea00000f 	b	5388 <i2cISR+0x1e0>
    5348:	e3a03024 	mov	r3, #36	; 0x24
    534c:	e5c53018 	strb	r3, [r5, #24]
    5350:	e59f305c 	ldr	r3, [pc, #92]	; 53b4 <prog+0x5250>
    5354:	e583c000 	str	ip, [r3]
    5358:	ea00000a 	b	5388 <i2cISR+0x1e0>
    535c:	e3a03020 	mov	r3, #32	; 0x20
    5360:	e5c53018 	strb	r3, [r5, #24]
    5364:	e3a03010 	mov	r3, #16	; 0x10
    5368:	e5c53000 	strb	r3, [r5]
    536c:	ea000002 	b	537c <i2cISR+0x1d4>
    5370:	e59f3034 	ldr	r3, [pc, #52]	; 53ac <prog+0x5248>
    5374:	e3a02040 	mov	r2, #64	; 0x40
    5378:	e5c32018 	strb	r2, [r3, #24]
    537c:	e3a02000 	mov	r2, #0	; 0x0
    5380:	e59f302c 	ldr	r3, [pc, #44]	; 53b4 <prog+0x5250>
    5384:	e5832000 	str	r2, [r3]
    5388:	e59f301c 	ldr	r3, [pc, #28]	; 53ac <prog+0x5248>
    538c:	e3a02008 	mov	r2, #8	; 0x8
    5390:	e5c32018 	strb	r2, [r3, #24]
    5394:	e3a02000 	mov	r2, #0	; 0x0
    5398:	e3e03c0f 	mvn	r3, #3840	; 0xf00
    539c:	e50320cf 	str	r2, [r3, #-207]
    53a0:	e8bd0002 	ldmia	sp!, {r1}
    53a4:	e161f001 	msr	SPSR_c, r1
    53a8:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    53ac:	e001c000 	and	ip, r1, r0
    53b0:	40001d5c 	andmi	r1, r0, ip, asr sp
    53b4:	40001d6c 	andmi	r1, r0, ip, ror #26
    53b8:	40001d68 	andmi	r1, r0, r8, ror #26
    53bc:	40001d64 	andmi	r1, r0, r4, ror #26
    53c0:	40001d54 	andmi	r1, r0, r4, asr sp
    53c4:	40001d60 	andmi	r1, r0, r0, ror #26
    53c8:	40001d58 	andmi	r1, r0, r8, asr sp

000053cc <i2cInit>:
    53cc:	e59f20a8 	ldr	r2, [pc, #168]	; 547c <prog+0x5318>
    53d0:	e59230c4 	ldr	r3, [r2, #196]
    53d4:	e3833080 	orr	r3, r3, #128	; 0x80
    53d8:	e58230c4 	str	r3, [r2, #196]
    53dc:	e242281d 	sub	r2, r2, #1900544	; 0x1d0000
    53e0:	e5923000 	ldr	r3, [r2]
    53e4:	e3c33030 	bic	r3, r3, #48	; 0x30
    53e8:	e5823000 	str	r3, [r2]
    53ec:	e5923000 	ldr	r3, [r2]
    53f0:	e3833010 	orr	r3, r3, #16	; 0x10
    53f4:	e5823000 	str	r3, [r2]
    53f8:	e5923000 	ldr	r3, [r2]
    53fc:	e3c330c0 	bic	r3, r3, #192	; 0xc0
    5400:	e5823000 	str	r3, [r2]
    5404:	e5923000 	ldr	r3, [r2]
    5408:	e92d4010 	stmdb	sp!, {r4, lr}
    540c:	e3833040 	orr	r3, r3, #64	; 0x40
    5410:	e59f4068 	ldr	r4, [pc, #104]	; 5480 <prog+0x531c>
    5414:	e5823000 	str	r3, [r2]
    5418:	e3a0104c 	mov	r1, #76	; 0x4c
    541c:	e3e03000 	mvn	r3, #0	; 0x0
    5420:	e1c411b4 	strh	r1, [r4, #20]
    5424:	e3a0000a 	mov	r0, #10	; 0xa
    5428:	e1c411b0 	strh	r1, [r4, #16]
    542c:	e5c43018 	strb	r3, [r4, #24]
    5430:	ebfff2a8 	bl	1ed8 <delay>
    5434:	e3a0306c 	mov	r3, #108	; 0x6c
    5438:	e5c43018 	strb	r3, [r4, #24]
    543c:	e5d43000 	ldrb	r3, [r4]
    5440:	e3833040 	orr	r3, r3, #64	; 0x40
    5444:	e5c43000 	strb	r3, [r4]
    5448:	e3e02c0f 	mvn	r2, #3840	; 0xf00
    544c:	e51230f3 	ldr	r3, [r2, #-243]
    5450:	e3c33c02 	bic	r3, r3, #512	; 0x200
    5454:	e50230f3 	str	r3, [r2, #-243]
    5458:	e3a03029 	mov	r3, #41	; 0x29
    545c:	e582311d 	str	r3, [r2, #285]
    5460:	e59f301c 	ldr	r3, [pc, #28]	; 5484 <prog+0x5320>
    5464:	e582301d 	str	r3, [r2, #29]
    5468:	e51230ef 	ldr	r3, [r2, #-239]
    546c:	e3833c02 	orr	r3, r3, #512	; 0x200
    5470:	e50230ef 	str	r3, [r2, #-239]
    5474:	e8bd4010 	ldmia	sp!, {r4, lr}
    5478:	e12fff1e 	bx	lr
    547c:	e01fc000 	ands	ip, pc, r0
    5480:	e001c000 	and	ip, r1, r0
    5484:	000051a8 	andeq	r5, r0, r8, lsr #3

00005488 <memchr>:
    5488:	e1a0c002 	mov	ip, r2
    548c:	e35c0003 	cmp	ip, #3	; 0x3
    5490:	e52de004 	str	lr, [sp, #-4]!
    5494:	e1a02000 	mov	r2, r0
    5498:	e20110ff 	and	r1, r1, #255	; 0xff
    549c:	9a000001 	bls	54a8 <memchr+0x20>
    54a0:	e2103003 	ands	r3, r0, #3	; 0x3
    54a4:	0a00000e 	beq	54e4 <memchr+0x5c>
    54a8:	e35c0000 	cmp	ip, #0	; 0x0
    54ac:	0a000009 	beq	54d8 <memchr+0x50>
    54b0:	e5d03000 	ldrb	r3, [r0]
    54b4:	e1510003 	cmp	r1, r3
    54b8:	1a000003 	bne	54cc <memchr+0x44>
    54bc:	ea000006 	b	54dc <memchr+0x54>
    54c0:	e5f03001 	ldrb	r3, [r0, #1]!
    54c4:	e1510003 	cmp	r1, r3
    54c8:	0a000003 	beq	54dc <memchr+0x54>
    54cc:	e35c0001 	cmp	ip, #1	; 0x1
    54d0:	e24cc001 	sub	ip, ip, #1	; 0x1
    54d4:	1afffff9 	bne	54c0 <memchr+0x38>
    54d8:	e3a00000 	mov	r0, #0	; 0x0
    54dc:	e49de004 	ldr	lr, [sp], #4
    54e0:	e12fff1e 	bx	lr
    54e4:	e1a0e003 	mov	lr, r3
    54e8:	e2833001 	add	r3, r3, #1	; 0x1
    54ec:	e3530004 	cmp	r3, #4	; 0x4
    54f0:	e081e40e 	add	lr, r1, lr, lsl #8
    54f4:	1afffffb 	bne	54e8 <memchr+0x60>
    54f8:	e1a00002 	mov	r0, r2
    54fc:	e5902000 	ldr	r2, [r0]
    5500:	e022200e 	eor	r2, r2, lr
    5504:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    5508:	e2433801 	sub	r3, r3, #65536	; 0x10000
    550c:	e2433c01 	sub	r3, r3, #256	; 0x100
    5510:	e2433001 	sub	r3, r3, #1	; 0x1
    5514:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    5518:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    551c:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    5520:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    5524:	e1d32002 	bics	r2, r3, r2
    5528:	e24cc004 	sub	ip, ip, #4	; 0x4
    552c:	0a00000f 	beq	5570 <memchr+0xe8>
    5530:	e5d03000 	ldrb	r3, [r0]
    5534:	e1510003 	cmp	r1, r3
    5538:	e1a02000 	mov	r2, r0
    553c:	0a00000f 	beq	5580 <memchr+0xf8>
    5540:	e5d03001 	ldrb	r3, [r0, #1]
    5544:	e1510003 	cmp	r1, r3
    5548:	e2802001 	add	r2, r0, #1	; 0x1
    554c:	0a00000b 	beq	5580 <memchr+0xf8>
    5550:	e5d03002 	ldrb	r3, [r0, #2]
    5554:	e1510003 	cmp	r1, r3
    5558:	e2802002 	add	r2, r0, #2	; 0x2
    555c:	0a000007 	beq	5580 <memchr+0xf8>
    5560:	e5d03003 	ldrb	r3, [r0, #3]
    5564:	e1510003 	cmp	r1, r3
    5568:	e2802003 	add	r2, r0, #3	; 0x3
    556c:	0a000003 	beq	5580 <memchr+0xf8>
    5570:	e35c0003 	cmp	ip, #3	; 0x3
    5574:	e2800004 	add	r0, r0, #4	; 0x4
    5578:	8affffdf 	bhi	54fc <memchr+0x74>
    557c:	eaffffc9 	b	54a8 <memchr+0x20>
    5580:	e1a00002 	mov	r0, r2
    5584:	eaffffd4 	b	54dc <memchr+0x54>

00005588 <memcmp>:
    5588:	e3520003 	cmp	r2, #3	; 0x3
    558c:	e52de004 	str	lr, [sp, #-4]!
    5590:	e1a0e002 	mov	lr, r2
    5594:	e1a02000 	mov	r2, r0
    5598:	9a000002 	bls	55a8 <memcmp+0x20>
    559c:	e1803001 	orr	r3, r0, r1
    55a0:	e3130003 	tst	r3, #3	; 0x3
    55a4:	0a000010 	beq	55ec <memcmp+0x64>
    55a8:	e35e0000 	cmp	lr, #0	; 0x0
    55ac:	0a00000b 	beq	55e0 <memcmp+0x58>
    55b0:	e5d2c000 	ldrb	ip, [r2]
    55b4:	e5d10000 	ldrb	r0, [r1]
    55b8:	e15c0000 	cmp	ip, r0
    55bc:	0a000004 	beq	55d4 <memcmp+0x4c>
    55c0:	ea000014 	b	5618 <memcmp+0x90>
    55c4:	e5f2c001 	ldrb	ip, [r2, #1]!
    55c8:	e5f10001 	ldrb	r0, [r1, #1]!
    55cc:	e15c0000 	cmp	ip, r0
    55d0:	1a000010 	bne	5618 <memcmp+0x90>
    55d4:	e35e0001 	cmp	lr, #1	; 0x1
    55d8:	e24ee001 	sub	lr, lr, #1	; 0x1
    55dc:	1afffff8 	bne	55c4 <memcmp+0x3c>
    55e0:	e3a00000 	mov	r0, #0	; 0x0
    55e4:	e49de004 	ldr	lr, [sp], #4
    55e8:	e12fff1e 	bx	lr
    55ec:	e5902000 	ldr	r2, [r0]
    55f0:	e5913000 	ldr	r3, [r1]
    55f4:	e1520003 	cmp	r2, r3
    55f8:	1a000004 	bne	5610 <memcmp+0x88>
    55fc:	e24ee004 	sub	lr, lr, #4	; 0x4
    5600:	e35e0003 	cmp	lr, #3	; 0x3
    5604:	e2800004 	add	r0, r0, #4	; 0x4
    5608:	e2811004 	add	r1, r1, #4	; 0x4
    560c:	8afffff6 	bhi	55ec <memcmp+0x64>
    5610:	e1a02000 	mov	r2, r0
    5614:	eaffffe3 	b	55a8 <memcmp+0x20>
    5618:	e060000c 	rsb	r0, r0, ip
    561c:	eafffff0 	b	55e4 <memcmp+0x5c>

00005620 <memcpy>:
    5620:	e352000f 	cmp	r2, #15	; 0xf
    5624:	e52de004 	str	lr, [sp, #-4]!
    5628:	e1a0c000 	mov	ip, r0
    562c:	e1a0e002 	mov	lr, r2
    5630:	9a000002 	bls	5640 <memcpy+0x20>
    5634:	e1813000 	orr	r3, r1, r0
    5638:	e3130003 	tst	r3, #3	; 0x3
    563c:	0a000009 	beq	5668 <memcpy+0x48>
    5640:	e35e0000 	cmp	lr, #0	; 0x0
    5644:	0a000005 	beq	5660 <memcpy+0x40>
    5648:	e3a02000 	mov	r2, #0	; 0x0
    564c:	e4d13001 	ldrb	r3, [r1], #1
    5650:	e7c2300c 	strb	r3, [r2, ip]
    5654:	e2822001 	add	r2, r2, #1	; 0x1
    5658:	e152000e 	cmp	r2, lr
    565c:	1afffffa 	bne	564c <memcpy+0x2c>
    5660:	e49de004 	ldr	lr, [sp], #4
    5664:	e12fff1e 	bx	lr
    5668:	e5913000 	ldr	r3, [r1]
    566c:	e58c3000 	str	r3, [ip]
    5670:	e5912004 	ldr	r2, [r1, #4]
    5674:	e58c2004 	str	r2, [ip, #4]
    5678:	e5913008 	ldr	r3, [r1, #8]
    567c:	e58c3008 	str	r3, [ip, #8]
    5680:	e24ee010 	sub	lr, lr, #16	; 0x10
    5684:	e591300c 	ldr	r3, [r1, #12]
    5688:	e35e000f 	cmp	lr, #15	; 0xf
    568c:	e58c300c 	str	r3, [ip, #12]
    5690:	e2811010 	add	r1, r1, #16	; 0x10
    5694:	e28cc010 	add	ip, ip, #16	; 0x10
    5698:	8afffff2 	bhi	5668 <memcpy+0x48>
    569c:	e35e0003 	cmp	lr, #3	; 0x3
    56a0:	9affffe6 	bls	5640 <memcpy+0x20>
    56a4:	e24ee004 	sub	lr, lr, #4	; 0x4
    56a8:	e4913004 	ldr	r3, [r1], #4
    56ac:	e35e0003 	cmp	lr, #3	; 0x3
    56b0:	e48c3004 	str	r3, [ip], #4
    56b4:	8afffffa 	bhi	56a4 <memcpy+0x84>
    56b8:	eaffffe0 	b	5640 <memcpy+0x20>

000056bc <memset>:
    56bc:	e3520003 	cmp	r2, #3	; 0x3
    56c0:	e20110ff 	and	r1, r1, #255	; 0xff
    56c4:	e1a0c000 	mov	ip, r0
    56c8:	9a000001 	bls	56d4 <memset+0x18>
    56cc:	e3100003 	tst	r0, #3	; 0x3
    56d0:	0a000008 	beq	56f8 <memset+0x3c>
    56d4:	e3520000 	cmp	r2, #0	; 0x0
    56d8:	012fff1e 	bxeq	lr
    56dc:	e20110ff 	and	r1, r1, #255	; 0xff
    56e0:	e3a03000 	mov	r3, #0	; 0x0
    56e4:	e7c3100c 	strb	r1, [r3, ip]
    56e8:	e2833001 	add	r3, r3, #1	; 0x1
    56ec:	e1530002 	cmp	r3, r2
    56f0:	1afffffb 	bne	56e4 <memset+0x28>
    56f4:	e12fff1e 	bx	lr
    56f8:	e1813401 	orr	r3, r1, r1, lsl #8
    56fc:	e352000f 	cmp	r2, #15	; 0xf
    5700:	e183c803 	orr	ip, r3, r3, lsl #16
    5704:	e1a03000 	mov	r3, r0
    5708:	9a000009 	bls	5734 <memset+0x78>
    570c:	e2422010 	sub	r2, r2, #16	; 0x10
    5710:	e352000f 	cmp	r2, #15	; 0xf
    5714:	e583c000 	str	ip, [r3]
    5718:	e583c004 	str	ip, [r3, #4]
    571c:	e583c008 	str	ip, [r3, #8]
    5720:	e583c00c 	str	ip, [r3, #12]
    5724:	e2833010 	add	r3, r3, #16	; 0x10
    5728:	8afffff7 	bhi	570c <memset+0x50>
    572c:	e3520003 	cmp	r2, #3	; 0x3
    5730:	9a000003 	bls	5744 <memset+0x88>
    5734:	e2422004 	sub	r2, r2, #4	; 0x4
    5738:	e3520003 	cmp	r2, #3	; 0x3
    573c:	e483c004 	str	ip, [r3], #4
    5740:	8afffffb 	bhi	5734 <memset+0x78>
    5744:	e3520000 	cmp	r2, #0	; 0x0
    5748:	e1a0c003 	mov	ip, r3
    574c:	1affffe2 	bne	56dc <memset+0x20>
    5750:	e12fff1e 	bx	lr

00005754 <strlen>:
    5754:	e3100003 	tst	r0, #3	; 0x3
    5758:	e1a01000 	mov	r1, r0
    575c:	1a000018 	bne	57c4 <strlen+0x70>
    5760:	e5902000 	ldr	r2, [r0]
    5764:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    5768:	e2433801 	sub	r3, r3, #65536	; 0x10000
    576c:	e2433c01 	sub	r3, r3, #256	; 0x100
    5770:	e2433001 	sub	r3, r3, #1	; 0x1
    5774:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    5778:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    577c:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    5780:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    5784:	e1d32002 	bics	r2, r3, r2
    5788:	e1a02000 	mov	r2, r0
    578c:	1a00000b 	bne	57c0 <strlen+0x6c>
    5790:	e5b02004 	ldr	r2, [r0, #4]!
    5794:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    5798:	e2433801 	sub	r3, r3, #65536	; 0x10000
    579c:	e2433c01 	sub	r3, r3, #256	; 0x100
    57a0:	e2433001 	sub	r3, r3, #1	; 0x1
    57a4:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    57a8:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    57ac:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    57b0:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    57b4:	e1d32002 	bics	r2, r3, r2
    57b8:	0afffff4 	beq	5790 <strlen+0x3c>
    57bc:	e1a02000 	mov	r2, r0
    57c0:	e1a00002 	mov	r0, r2
    57c4:	e5d03000 	ldrb	r3, [r0]
    57c8:	e3530000 	cmp	r3, #0	; 0x0
    57cc:	0a000002 	beq	57dc <strlen+0x88>
    57d0:	e5f03001 	ldrb	r3, [r0, #1]!
    57d4:	e3530000 	cmp	r3, #0	; 0x0
    57d8:	1afffffc 	bne	57d0 <strlen+0x7c>
    57dc:	e0610000 	rsb	r0, r1, r0
    57e0:	e12fff1e 	bx	lr

000057e4 <__aeabi_uidiv>:
    57e4:	e2512001 	subs	r2, r1, #1	; 0x1
    57e8:	012fff1e 	bxeq	lr
    57ec:	3a000036 	bcc	58cc <__aeabi_uidiv+0xe8>
    57f0:	e1500001 	cmp	r0, r1
    57f4:	9a000022 	bls	5884 <__aeabi_uidiv+0xa0>
    57f8:	e1110002 	tst	r1, r2
    57fc:	0a000023 	beq	5890 <__aeabi_uidiv+0xac>
    5800:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    5804:	01a01181 	moveq	r1, r1, lsl #3
    5808:	03a03008 	moveq	r3, #8	; 0x8
    580c:	13a03001 	movne	r3, #1	; 0x1
    5810:	e3510201 	cmp	r1, #268435456	; 0x10000000
    5814:	31510000 	cmpcc	r1, r0
    5818:	31a01201 	movcc	r1, r1, lsl #4
    581c:	31a03203 	movcc	r3, r3, lsl #4
    5820:	3afffffa 	bcc	5810 <__aeabi_uidiv+0x2c>
    5824:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    5828:	31510000 	cmpcc	r1, r0
    582c:	31a01081 	movcc	r1, r1, lsl #1
    5830:	31a03083 	movcc	r3, r3, lsl #1
    5834:	3afffffa 	bcc	5824 <__aeabi_uidiv+0x40>
    5838:	e3a02000 	mov	r2, #0	; 0x0
    583c:	e1500001 	cmp	r0, r1
    5840:	20400001 	subcs	r0, r0, r1
    5844:	21822003 	orrcs	r2, r2, r3
    5848:	e15000a1 	cmp	r0, r1, lsr #1
    584c:	204000a1 	subcs	r0, r0, r1, lsr #1
    5850:	218220a3 	orrcs	r2, r2, r3, lsr #1
    5854:	e1500121 	cmp	r0, r1, lsr #2
    5858:	20400121 	subcs	r0, r0, r1, lsr #2
    585c:	21822123 	orrcs	r2, r2, r3, lsr #2
    5860:	e15001a1 	cmp	r0, r1, lsr #3
    5864:	204001a1 	subcs	r0, r0, r1, lsr #3
    5868:	218221a3 	orrcs	r2, r2, r3, lsr #3
    586c:	e3500000 	cmp	r0, #0	; 0x0
    5870:	11b03223 	movnes	r3, r3, lsr #4
    5874:	11a01221 	movne	r1, r1, lsr #4
    5878:	1affffef 	bne	583c <__aeabi_uidiv+0x58>
    587c:	e1a00002 	mov	r0, r2
    5880:	e12fff1e 	bx	lr
    5884:	03a00001 	moveq	r0, #1	; 0x1
    5888:	13a00000 	movne	r0, #0	; 0x0
    588c:	e12fff1e 	bx	lr
    5890:	e3510801 	cmp	r1, #65536	; 0x10000
    5894:	21a01821 	movcs	r1, r1, lsr #16
    5898:	23a02010 	movcs	r2, #16	; 0x10
    589c:	33a02000 	movcc	r2, #0	; 0x0
    58a0:	e3510c01 	cmp	r1, #256	; 0x100
    58a4:	21a01421 	movcs	r1, r1, lsr #8
    58a8:	22822008 	addcs	r2, r2, #8	; 0x8
    58ac:	e3510010 	cmp	r1, #16	; 0x10
    58b0:	21a01221 	movcs	r1, r1, lsr #4
    58b4:	22822004 	addcs	r2, r2, #4	; 0x4
    58b8:	e3510004 	cmp	r1, #4	; 0x4
    58bc:	82822003 	addhi	r2, r2, #3	; 0x3
    58c0:	908220a1 	addls	r2, r2, r1, lsr #1
    58c4:	e1a00230 	mov	r0, r0, lsr r2
    58c8:	e12fff1e 	bx	lr
    58cc:	e52de008 	str	lr, [sp, #-8]!
    58d0:	eb00008d 	bl	5b0c <__aeabi_idiv0>
    58d4:	e3a00000 	mov	r0, #0	; 0x0
    58d8:	e49de008 	ldr	lr, [sp], #8
    58dc:	e12fff1e 	bx	lr

000058e0 <__aeabi_uidivmod>:
    58e0:	e92d4003 	stmdb	sp!, {r0, r1, lr}
    58e4:	ebffffbe 	bl	57e4 <__aeabi_uidiv>
    58e8:	e8bd4006 	ldmia	sp!, {r1, r2, lr}
    58ec:	e0030092 	mul	r3, r2, r0
    58f0:	e0411003 	sub	r1, r1, r3
    58f4:	e12fff1e 	bx	lr

000058f8 <__aeabi_idiv>:
    58f8:	e3510000 	cmp	r1, #0	; 0x0
    58fc:	e020c001 	eor	ip, r0, r1
    5900:	0a000042 	beq	5a10 <__aeabi_idiv+0x118>
    5904:	42611000 	rsbmi	r1, r1, #0	; 0x0
    5908:	e2512001 	subs	r2, r1, #1	; 0x1
    590c:	0a000027 	beq	59b0 <__aeabi_idiv+0xb8>
    5910:	e1b03000 	movs	r3, r0
    5914:	42603000 	rsbmi	r3, r0, #0	; 0x0
    5918:	e1530001 	cmp	r3, r1
    591c:	9a000026 	bls	59bc <__aeabi_idiv+0xc4>
    5920:	e1110002 	tst	r1, r2
    5924:	0a000028 	beq	59cc <__aeabi_idiv+0xd4>
    5928:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    592c:	01a01181 	moveq	r1, r1, lsl #3
    5930:	03a02008 	moveq	r2, #8	; 0x8
    5934:	13a02001 	movne	r2, #1	; 0x1
    5938:	e3510201 	cmp	r1, #268435456	; 0x10000000
    593c:	31510003 	cmpcc	r1, r3
    5940:	31a01201 	movcc	r1, r1, lsl #4
    5944:	31a02202 	movcc	r2, r2, lsl #4
    5948:	3afffffa 	bcc	5938 <__aeabi_idiv+0x40>
    594c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    5950:	31510003 	cmpcc	r1, r3
    5954:	31a01081 	movcc	r1, r1, lsl #1
    5958:	31a02082 	movcc	r2, r2, lsl #1
    595c:	3afffffa 	bcc	594c <__aeabi_idiv+0x54>
    5960:	e3a00000 	mov	r0, #0	; 0x0
    5964:	e1530001 	cmp	r3, r1
    5968:	20433001 	subcs	r3, r3, r1
    596c:	21800002 	orrcs	r0, r0, r2
    5970:	e15300a1 	cmp	r3, r1, lsr #1
    5974:	204330a1 	subcs	r3, r3, r1, lsr #1
    5978:	218000a2 	orrcs	r0, r0, r2, lsr #1
    597c:	e1530121 	cmp	r3, r1, lsr #2
    5980:	20433121 	subcs	r3, r3, r1, lsr #2
    5984:	21800122 	orrcs	r0, r0, r2, lsr #2
    5988:	e15301a1 	cmp	r3, r1, lsr #3
    598c:	204331a1 	subcs	r3, r3, r1, lsr #3
    5990:	218001a2 	orrcs	r0, r0, r2, lsr #3
    5994:	e3530000 	cmp	r3, #0	; 0x0
    5998:	11b02222 	movnes	r2, r2, lsr #4
    599c:	11a01221 	movne	r1, r1, lsr #4
    59a0:	1affffef 	bne	5964 <__aeabi_idiv+0x6c>
    59a4:	e35c0000 	cmp	ip, #0	; 0x0
    59a8:	42600000 	rsbmi	r0, r0, #0	; 0x0
    59ac:	e12fff1e 	bx	lr
    59b0:	e13c0000 	teq	ip, r0
    59b4:	42600000 	rsbmi	r0, r0, #0	; 0x0
    59b8:	e12fff1e 	bx	lr
    59bc:	33a00000 	movcc	r0, #0	; 0x0
    59c0:	01a00fcc 	moveq	r0, ip, asr #31
    59c4:	03800001 	orreq	r0, r0, #1	; 0x1
    59c8:	e12fff1e 	bx	lr
    59cc:	e3510801 	cmp	r1, #65536	; 0x10000
    59d0:	21a01821 	movcs	r1, r1, lsr #16
    59d4:	23a02010 	movcs	r2, #16	; 0x10
    59d8:	33a02000 	movcc	r2, #0	; 0x0
    59dc:	e3510c01 	cmp	r1, #256	; 0x100
    59e0:	21a01421 	movcs	r1, r1, lsr #8
    59e4:	22822008 	addcs	r2, r2, #8	; 0x8
    59e8:	e3510010 	cmp	r1, #16	; 0x10
    59ec:	21a01221 	movcs	r1, r1, lsr #4
    59f0:	22822004 	addcs	r2, r2, #4	; 0x4
    59f4:	e3510004 	cmp	r1, #4	; 0x4
    59f8:	82822003 	addhi	r2, r2, #3	; 0x3
    59fc:	908220a1 	addls	r2, r2, r1, lsr #1
    5a00:	e35c0000 	cmp	ip, #0	; 0x0
    5a04:	e1a00233 	mov	r0, r3, lsr r2
    5a08:	42600000 	rsbmi	r0, r0, #0	; 0x0
    5a0c:	e12fff1e 	bx	lr
    5a10:	e52de008 	str	lr, [sp, #-8]!
    5a14:	eb00003c 	bl	5b0c <__aeabi_idiv0>
    5a18:	e3a00000 	mov	r0, #0	; 0x0
    5a1c:	e49de008 	ldr	lr, [sp], #8
    5a20:	e12fff1e 	bx	lr

00005a24 <__aeabi_idivmod>:
    5a24:	e92d4003 	stmdb	sp!, {r0, r1, lr}
    5a28:	ebffffb2 	bl	58f8 <__aeabi_idiv>
    5a2c:	e8bd4006 	ldmia	sp!, {r1, r2, lr}
    5a30:	e0030092 	mul	r3, r2, r0
    5a34:	e0411003 	sub	r1, r1, r3
    5a38:	e12fff1e 	bx	lr

00005a3c <__umodsi3>:
    5a3c:	e2512001 	subs	r2, r1, #1	; 0x1
    5a40:	3a00002c 	bcc	5af8 <__umodsi3+0xbc>
    5a44:	11500001 	cmpne	r0, r1
    5a48:	03a00000 	moveq	r0, #0	; 0x0
    5a4c:	81110002 	tsthi	r1, r2
    5a50:	00000002 	andeq	r0, r0, r2
    5a54:	912fff1e 	bxls	lr
    5a58:	e3a02000 	mov	r2, #0	; 0x0
    5a5c:	e3510201 	cmp	r1, #268435456	; 0x10000000
    5a60:	31510000 	cmpcc	r1, r0
    5a64:	31a01201 	movcc	r1, r1, lsl #4
    5a68:	32822004 	addcc	r2, r2, #4	; 0x4
    5a6c:	3afffffa 	bcc	5a5c <__umodsi3+0x20>
    5a70:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    5a74:	31510000 	cmpcc	r1, r0
    5a78:	31a01081 	movcc	r1, r1, lsl #1
    5a7c:	32822001 	addcc	r2, r2, #1	; 0x1
    5a80:	3afffffa 	bcc	5a70 <__umodsi3+0x34>
    5a84:	e2522003 	subs	r2, r2, #3	; 0x3
    5a88:	ba00000e 	blt	5ac8 <__umodsi3+0x8c>
    5a8c:	e1500001 	cmp	r0, r1
    5a90:	20400001 	subcs	r0, r0, r1
    5a94:	e15000a1 	cmp	r0, r1, lsr #1
    5a98:	204000a1 	subcs	r0, r0, r1, lsr #1
    5a9c:	e1500121 	cmp	r0, r1, lsr #2
    5aa0:	20400121 	subcs	r0, r0, r1, lsr #2
    5aa4:	e15001a1 	cmp	r0, r1, lsr #3
    5aa8:	204001a1 	subcs	r0, r0, r1, lsr #3
    5aac:	e3500001 	cmp	r0, #1	; 0x1
    5ab0:	e1a01221 	mov	r1, r1, lsr #4
    5ab4:	a2522004 	subges	r2, r2, #4	; 0x4
    5ab8:	aafffff3 	bge	5a8c <__umodsi3+0x50>
    5abc:	e3120003 	tst	r2, #3	; 0x3
    5ac0:	13300000 	teqne	r0, #0	; 0x0
    5ac4:	0a00000a 	beq	5af4 <__umodsi3+0xb8>
    5ac8:	e3720002 	cmn	r2, #2	; 0x2
    5acc:	ba000006 	blt	5aec <__umodsi3+0xb0>
    5ad0:	0a000002 	beq	5ae0 <__umodsi3+0xa4>
    5ad4:	e1500001 	cmp	r0, r1
    5ad8:	20400001 	subcs	r0, r0, r1
    5adc:	e1a010a1 	mov	r1, r1, lsr #1
    5ae0:	e1500001 	cmp	r0, r1
    5ae4:	20400001 	subcs	r0, r0, r1
    5ae8:	e1a010a1 	mov	r1, r1, lsr #1
    5aec:	e1500001 	cmp	r0, r1
    5af0:	20400001 	subcs	r0, r0, r1
    5af4:	e12fff1e 	bx	lr
    5af8:	e52de008 	str	lr, [sp, #-8]!
    5afc:	eb000002 	bl	5b0c <__aeabi_idiv0>
    5b00:	e3a00000 	mov	r0, #0	; 0x0
    5b04:	e49de008 	ldr	lr, [sp], #8
    5b08:	e12fff1e 	bx	lr

00005b0c <__aeabi_idiv0>:
    5b0c:	e12fff1e 	bx	lr

00005b10 <__end_of_prog__>:
    5b10:	ffff0050 	undefined instruction 0xffff0050

00005b12 <C.22.2627>:
    5b12:	01ffffff 00000000                       ........

00005b1a <C.21.2626>:
    5b1a:	0100a8c0 00000000                       ........

00005b22 <C.20.2625>:
    5b22:	2900a8c0 00000000                       ...)....

00005b2a <C.19.2624>:
    5b2a:	01534406 00000201 454d0000 59524f4d     .DS.......MEMORY
    5b3a:	4e4f4320 20474946 2e525245 000d0a0d      CONFIG ERR.....
    5b4a:	50490000 2020203a 252e6425 64252e64     ..IP:   %d.%d.%d
    5b5a:	0a64252e 4147000d 20203a52 252e6425     .%d...GAR:  %d.%
    5b6a:	64252e64 0a64252e 5553000d 203a5242     d.%d.%d...SUBR: 
    5b7a:	252e6425 64252e64 0a64252e 4853000d     %d.%d.%d.%d...SH
    5b8a:	203a5241 78323025 3230253a 30253a78     AR: %02x:%02x:%0
    5b9a:	253a7832 3a783230 78323025 3230253a     2x:%02x:%02x:%02
    5baa:	000d0a78 74480000 6f507074 203a7472     x.....HttpPort: 
    5bba:	00006425 524d0000 3430253d 54522078     %d....MR=%04x RT
    5bca:	30253d52 52207834 253d5243 20783230     R=%04x RCR=%02x 
    5bda:	3d524449 78343025 255f4d20 30253d78     IDR=%04x M_%x=%0
    5bea:	00007834 20200000 4f202a2a 2a2a204b     4x....  ** OK **
    5bfa:	00000d0a 20200000 3f202a2a 203f3f3f     ......  ** ???? 
    5c0a:	0d0a2a2a 0d0a0000 23232323 3d3d3d23     **......#####===
    5c1a:	4820203d 20505454 76726553 445f7265     =  HTTP Server_D
    5c2a:	206f6d65 20207325 3d3d3d3d 23232323     emo %s  ====####
    5c3a:	0a232323 0d0a000d 43676f4c 203d746e     ###.....LogCnt= 
    5c4a:	54206425 253d6d69 64252e64 30250020     %d Tim=%d.%d .%0
    5c5a:	00207834 0d0a0000 20643325 30252020     4x .....%3d   %0
    5c6a:	20207834 20200000 00202020 64200000     4x  ..     ... d
    5c7a:	25203d74 30250064 20206433 30250000     t= %d.%03d  ..%0
    5c8a:	00207832 0d0a0000 74696e49 45204545     2x .....InitEE E
    5c9a:	00317272 0d0a0000 23230021 54482023     rr1.....!.### HT
    5caa:	53205054 65767265 65445f72 25206f6d     TP Server_Demo %
    5cba:	23232073 000d0a23 45450000 4d4f5250     s ###.....EEPROM
    5cca:	000d0a3a 0d0a0000 58323025 32302520     :.......%02X %02
    5cda:	6f460058 32310078 32310033 00003433     X.Fox.123.1234..
    5cea:	72420000 006a0000 59580000 6f43005a     ..Br..j...XYZ.Co
    5cfa:	6e616d6d 003a7364 0d0a0000 20204c20     mmands:..... L  
    5d0a:	6f4c202d 73694467 79616c70 0d0a0000     - LogDisplay....
    5d1a:	20204920 6e49202d 00006f66 0d0a0000      I  - Info......
    5d2a:	20434520 6c43202d 20726165 00004545      EC - Clear EE..
    5d3a:	0d0a0000 20444520 7544202d 4520706d     .... ED - Dump E
    5d4a:	0d0a0045 204c4520 6f4c202d 492f6461     E... EL - Load/I
    5d5a:	2074696e 495f4545 00007350 0d0a0000     nit EE_IPs......
    5d6a:	20494520 6573202d 45452074 0050495f      EI - set EE_IP.
    5d7a:	0d0a0000 204d4520 6573202d 45452074     .... EM - set EE
    5d8a:	43414d5f 0d0a0000 20534520 6573202d     _MAC.... ES - se
    5d9a:	45452074 004e535f 0d0a0000 20474520     t EE_SN..... EG 
    5daa:	6573202d 45452074 5241475f 0d0a0000     - set EE_GAR....
    5dba:	20504520 6573202d 45452074 726f505f      EP - set EE_Por
    5dca:	0d0a0074 3f3f3f3f 50490000 6425203a     t...????..IP: %d
    5dda:	2e64252e 252e6425 0d0a0064 45457257     .%d.%d.%d...WrEE
    5dea:	72724520 3f3f0000 0d0a3f3f 41470000      Err..????....GA
    5dfa:	25203a52 64252e64 2e64252e 00006425     R: %d.%d.%d.%d..
    5e0a:	4e530000 6425203a 2e64252e 252e6425     ..SN: %d.%d.%d.%
    5e1a:	414d0064 25203a43 3a783230 78323025     d.MAC: %02x:%02x
    5e2a:	3230253a 30253a78 253a7832 3a783230     :%02x:%02x:%02x:
    5e3a:	78323025 654e0000 74682077 74726f50     %02x..New htPort
    5e4a:	25203d20 432a0064 7245646d 000d0a72      = %d.*CmdErr...
    5e5a:	72420000 416e776f 6f462042 33323178     ..BrownAB Fox123
    5e6a:	6d756a20 42417370 32312043 0a0d3433      jumpsABC 1234..
    5e7a:	00000a0d 6e280000 296c6c75 31300000     ......(null)..01
    5e8a:	35343332 39383736 64636261 00006665     23456789abcdef..
    5e9a:	45470000 00002054 202f0000 50545448     ..GET ..../ HTTP
    5eaa:	0d0a0000 3a544f44 00732520 4e490000     ....DOT: %s...IN
    5eba:	00584544 41460000 4f434956 4f50004e     DEX...FAVICON.PO
    5eca:	00205453 54480000 312f5054 3220312e     ST ...HTTP/1.1 2
    5eda:	4f203030 530a0d4b 65767265 44203a72     00 OK..Server: D
    5eea:	74696769 53206c61 74726f68 20747563     igital Shortcut 
    5efa:	20636e49 76726553 0a0d7265 746e6f43     Inc Server..Cont
    5f0a:	2d746e65 65707954 6574203a 682f7478     ent-Type: text/h
    5f1a:	0d6c6d74 6e6f430a 746e6574 6e654c2d     tml..Content-Len
    5f2a:	3a687467 00002020 54480000 312f5054     gth:  ....HTTP/1
    5f3a:	3220312e 4f203030 530a0d4b 65767265     .1 200 OK..Serve
    5f4a:	44203a72 74696769 53206c61 74726f68     r: Digital Short
    5f5a:	20747563 20636e49 76726553 0a0d7265     cut Inc Server..
    5f6a:	746e6f43 2d746e65 65707954 6d69203a     Content-Type: im
    5f7a:	2f656761 0d666967 6e6f430a 746e6574     age/gif..Content
    5f8a:	6e654c2d 3a687467 00002020 54480000     -Length:  ....HT
    5f9a:	312f5054 3220312e 4f203030 530a0d4b     TP/1.1 200 OK..S
    5faa:	65767265 44203a72 74696769 53206c61     erver: Digital S
    5fba:	74726f68 20747563 20636e49 76726553     hortcut Inc Serv
    5fca:	0a0d7265 746e6f43 2d746e65 65707954     er..Content-Type
    5fda:	6574203a 632f7478 0a0d7373 746e6f43     : text/css..Cont
    5fea:	2d746e65 676e654c 203a6874 54480020     ent-Length:  .HT
    5ffa:	312f5054 3220312e 4f203030 530a0d4b     TP/1.1 200 OK..S
    600a:	65767265 44203a72 74696769 53206c61     erver: Digital S
    601a:	74726f68 20747563 20636e49 76726553     hortcut Inc Serv
    602a:	0a0d7265 746e6f43 2d746e65 65707954     er..Content-Type
    603a:	6574203a 682f7478 0d6c6d74 6e6f430a     : text/html..Con
    604a:	746e6574 636e452d 6e69646f 67203a67     tent-Encoding: g
    605a:	0d70697a 6e6f430a 746e6574 6e654c2d     zip..Content-Len
    606a:	3a687467 00002020 54480000 312f5054     gth:  ....HTTP/1
    607a:	3220312e 4f203030 530a0d4b 65767265     .1 200 OK..Serve
    608a:	44203a72 74696769 53206c61 74726f68     r: Digital Short
    609a:	20747563 20636e49 76726553 0a0d7265     cut Inc Server..
    60aa:	746e6f43 2d746e65 65707954 6574203a     Content-Type: te
    60ba:	632f7478 0a0d7373 746e6f43 2d746e65     xt/css..Content-
    60ca:	6f636e45 676e6964 7a67203a 0a0d7069     Encoding: gzip..
    60da:	746e6f43 2d746e65 676e654c 203a6874     Content-Length: 
    60ea:	54480020 312f5054 3220312e 4f203030      .HTTP/1.1 200 O
    60fa:	530a0d4b 65767265 44203a72 74696769     K..Server: Digit
    610a:	53206c61 74726f68 20747563 20636e49     al Shortcut Inc 
    611a:	76726553 0a0d7265 746e6f43 2d746e65     Server..Content-
    612a:	65707954 6d69203a 2f656761 6765706a     Type: image/jpeg
    613a:	6f430a0d 6e65746e 654c2d74 6874676e     ..Content-Length
    614a:	0020203a 54480000 312f5054 3220312e     :  ...HTTP/1.1 2
    615a:	4f203030 530a0d4b 65767265 44203a72     00 OK..Server: D
    616a:	74696769 53206c61 74726f68 20747563     igital Shortcut 
    617a:	20636e49 76726553 0a0d7265 746e6f43     Inc Server..Cont
    618a:	2d746e65 65707954 6d69203a 2f656761     ent-Type: image/
    619a:	0d676e70 6e6f430a 746e6574 6e654c2d     png..Content-Len
    61aa:	3a687467 00002020 54480000 312f5054     gth:  ....HTTP/1
    61ba:	3220312e 4f203030 530a0d4b 65767265     .1 200 OK..Serve
    61ca:	44203a72 74696769 53206c61 74726f68     r: Digital Short
    61da:	20747563 20636e49 76726553 0a0d7265     cut Inc Server..
    61ea:	746e6f43 2d746e65 65707954 6d69203a     Content-Type: im
    61fa:	2f656761 63692d78 0a0d6e6f 746e6f43     age/x-icon..Cont
    620a:	2d746e65 676e654c 203a6874 54480020     ent-Length:  .HT
    621a:	312f5054 3220312e 4f203030 530a0d4b     TP/1.1 200 OK..S
    622a:	65767265 44203a72 74696769 53206c61     erver: Digital S
    623a:	74726f68 20747563 20636e49 76726553     hortcut Inc Serv
    624a:	0a0d7265 68636143 6f432d65 6f72746e     er..Cache-Contro
    625a:	6e203a6c 61632d6f 2c656863 73756d20     l: no-cache, mus
    626a:	65722d74 696c6176 65746164 6f430a0d     t-revalidate..Co
    627a:	6e65746e 79542d74 203a6570 74786574     ntent-Type: text
    628a:	6d74682f 430a0d6c 65746e6f 4c2d746e     /html..Content-L
    629a:	74676e65 20203a68 0d0a0000 2a2a2a20     ength:  .... ***
    62aa:	534f5020 72452054 20726f72 202a2a2a      POST Error *** 
    62ba:	54480000 312f5054 3420312e 42203030     ..HTTP/1.1 400 B
    62ca:	52206461 65757165 0a0d7473 76726553     ad Request..Serv
    62da:	203a7265 69676944 206c6174 726f6853     er: Digital Shor
    62ea:	74756374 636e4920 72655320 0d726576     tcut Inc Server.
    62fa:	000a0d0a 0d0a0000 2a2a2a20 52202a2a     ........ ***** R
    630a:	65757165 72457473 20726f72 2a2a2a2a     equestError ****
    631a:	0000202a 20200000 65485020 253a6461     * ....   PHead:%
    632a:	69732064 252d657a 74202c78 2d657079     d size-%x, type-
    633a:	00006425 2a200000 52452a2a 2a524f52     %d.... ***ERROR*
    634a:	00202a2a 0d0a0000 202a2a20 20504850     ** ..... ** PHP 
    635a:	78646e69 2064253d 253d6469 20783230     indx=%d id=%02x 
    636a:	4c200000 74676e65 30253d68 00207838     .. Length=%08x .
    637a:	0d0a0000 636f532a 6f6c435f 575f6573     ....*Soc_Close_W
    638a:	2a746961 0d0a0000 6b636150 7a69735f     ait*....Pack_siz
    639a:	6f742065 6962206f 64252067 0d0a0000     e too big %d....
    63aa:	3a206425 434f5320 2054454b 6e207369     %d : SOCKET is n
    63ba:	6320746f 74616572 00216465 0d0a0000     ot created!.....
    63ca:	3a206425 69614620 6e695b6c 696c6176     %d : Fail[invali
    63da:	70692064 726f702c 00005d74 0d0a0000     d ip,port]......
    63ea:	736f6c43 20292865 00786946 6c490000     Close() Fix...Il
    63fa:	6167656c 6843206c 656e6e61 6425286c     legal Channel(%d
    640a:	58542029 6d654d20 2079726f 657a6953     ) TX Memory Size
    641a:	000d0a2e 6c490000 6167656c 6843206c     ......Illegal Ch
    642a:	656e6e61 6425286c 58522029 6d654d20     annel(%d) RX Mem
    643a:	2079726f 657a6953 000d0a2e 6c490000     ory Size......Il
    644a:	6167656c 654d206c 79726f6d 6c6c4120     legal Memory All
    645a:	7461636f 0a6e6f69 0d0a000d 6d432323     ocation.....##Cm
    646a:	79645264 6d695420 74756f65 63524320     dRdy Timeout CRc
    647a:	253d746e 6d632064 30253d64 20207834     nt=%d cmd=%04x  
    648a:	64252853 52435f29 3430253d 00202078     S(%d)_CR=%04x  .
    649a:	6e530000 3d52495f 78323025 00002020     ..Sn_IR=%02x  ..
    64aa:	6e530000 5253535f 3230253d 00202078     ..Sn_SSR=%02x  .
	...
Disassembly of section .intvects:

40000000 <__intvects>:

@
@  Reserve space for interrupt vectors in RAM, in case we decode to be tricky
@
        .global __intvects
        .section .intvects,"ax"
        .align  0

__intvects:   ldr     pc, _ram_reset          @ reset
40000000:	e59ff018 	ldr	pc, [pc, #24]	; 40000020 <_ram_reset>
              ldr     pc, _ram_undf           @ undefined
40000004:	e59ff018 	ldr	pc, [pc, #24]	; 40000024 <_ram_undf>
              ldr     pc, _ram_swi            @ SWI
40000008:	e59ff018 	ldr	pc, [pc, #24]	; 40000028 <_ram_swi>
              ldr     pc, _ram_pabt           @ program abort
4000000c:	e59ff018 	ldr	pc, [pc, #24]	; 4000002c <_ram_pabt>
              ldr     pc, _ram_dabt           @ data abort
40000010:	e59ff018 	ldr	pc, [pc, #24]	; 40000030 <_ram_dabt>
              ldr     pc, _ram_rsrvd          @ reserved
40000014:	e59ff018 	ldr	pc, [pc, #24]	; 40000034 <_ram_rsrvd>
              ldr     pc, [pc, #-0xff0]       @ IRQ - read VIC_VectAddr (magic!  It's at 0xfffff030)
40000018:	e51ffff0 	ldr	pc, [pc, #-4080]	; 3ffff030 <__data_beg_src__+0x3fff8b34>
              ldr     pc, _ram_fiq            @ FIQ
4000001c:	e59ff018 	ldr	pc, [pc, #24]	; 4000003c <_ram_fiq>

40000020 <_ram_reset>:
40000020:	00000164 	andeq	r0, r0, r4, ror #2

40000024 <_ram_undf>:
40000024:	00000038 	andeq	r0, r0, r8, lsr r0

40000028 <_ram_swi>:
40000028:	00000804 	andeq	r0, r0, r4, lsl #16

4000002c <_ram_pabt>:
4000002c:	0000004c 	andeq	r0, r0, ip, asr #32

40000030 <_ram_dabt>:
40000030:	00000060 	andeq	r0, r0, r0, rrx

40000034 <_ram_rsrvd>:
40000034:	00000164 	andeq	r0, r0, r4, ror #2

40000038 <_ram_irq>:
40000038:	00000000 	andeq	r0, r0, r0

4000003c <_ram_fiq>:
4000003c:	00000800 	andeq	r0, r0, r0, lsl #16
