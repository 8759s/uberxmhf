#!/usr/bin/perl
# script to generate composition check files
# author: amit vasudevan (amitvasudevan@acm.org)

use Tie::File;
use File::Basename;
use Data::Dumper;

use lib dirname (__FILE__);
use upmf;	#load up the manifest parsing module


# command line inputs
my $g_slabsfile = $ARGV[0];
my $g_memoffsets = $ARGV[1];
my $g_ccompdriverfile = $ARGV[2];
my $g_ccompcheckfile = $ARGV[3];

$g_maxincldevlistentries = $ARGV[4];
$g_maxexcldevlistentries = $ARGV[5];
$g_maxmemoffsetentries = $ARGV[6];


my $g_rootdir;





$g_rootdir = dirname($g_slabsfile)."/";

#print "slabsfile:", $g_slabsfile, "\n";
#print "rootdir:", $g_rootdir, "\n";

print "parsing slab manifests...\n";
upmf_init($g_slabsfile, $g_memoffsets, $g_rootdir);
print "slab manifests parsed\n";

uccomp_outputccompcheckfile($g_ccompcheckfile);
uccomp_outputccompdriverfile($g_ccompdriverfile);

exit 0;



######
# output composition driver file
######
sub uccomp_outputccompdriverfile {
	my($filename) = @_;
	my $fh_ccompdriverfile;
	my $uapi_key;
	my $uapi_fndef;
	my $i = 0;

	open($fh_ccompdriverfile, '>', $filename) or die "Could not open file '$filename' $!";
	print $fh_ccompdriverfile "\n/* autogenerated XMHF composition driver file */";
	print $fh_ccompdriverfile "\n/* author: amit vasudevan (amitvasudevan@acm.org) */";
	print $fh_ccompdriverfile "\n\n";
	print $fh_ccompdriverfile "#include <xmhf.h>\r\n";
	print $fh_ccompdriverfile "#include <xmhf-debug.h>\r\n";
	print $fh_ccompdriverfile "#include <xmhfgeec.h>\r\n";
	print $fh_ccompdriverfile "\n\n";


	print $fh_ccompdriverfile "#include <xc.h>\r\n";
	#plug in header files
	while($i < $g_totalslabs){
	    print $fh_ccompdriverfile "#include <".$slab_idtoname{$i}.".h>\r\n";
	    $i=$i+1;
	}

	print $fh_ccompdriverfile "\n\n";


	#plug in frama-c nondeterminism
	print $fh_ccompdriverfile "\r\n//////";
	print $fh_ccompdriverfile "\r\n// frama-c non-determinism functions";
	print $fh_ccompdriverfile "\r\n//////";
	print $fh_ccompdriverfile "\r\n";
	print $fh_ccompdriverfile "\r\nu32 Frama_C_entropy_source;";
	print $fh_ccompdriverfile "\r\n";
	print $fh_ccompdriverfile "\r\n//@ assigns Frama_C_entropy_source \\from Frama_C_entropy_source;";
	print $fh_ccompdriverfile "\r\nvoid Frama_C_update_entropy(void);";
	print $fh_ccompdriverfile "\r\n";
	print $fh_ccompdriverfile "\r\nu32 framac_nondetu32(void){";
	print $fh_ccompdriverfile "\r\n  Frama_C_update_entropy();";
	print $fh_ccompdriverfile "\r\n  return (u32)Frama_C_entropy_source;";
	print $fh_ccompdriverfile "\r\n}";
	print $fh_ccompdriverfile "\r\n";
	print $fh_ccompdriverfile "\r\nu32 framac_nondetu32interval(u32 min, u32 max)";
	print $fh_ccompdriverfile "\r\n{";
	print $fh_ccompdriverfile "\r\n  u32 r,aux;";
	print $fh_ccompdriverfile "\r\n  Frama_C_update_entropy();";
	print $fh_ccompdriverfile "\r\n  aux = Frama_C_entropy_source;";
	print $fh_ccompdriverfile "\r\n  if ((aux>=min) && (aux <=max))";
	print $fh_ccompdriverfile "\r\n    r = aux;";
	print $fh_ccompdriverfile "\r\n  else";
	print $fh_ccompdriverfile "\r\n    r = min;";
	print $fh_ccompdriverfile "\r\n  return r;";
	print $fh_ccompdriverfile "\r\n}";

	print $fh_ccompdriverfile "\r\n\r\n";


	print $fh_ccompdriverfile "\r\n//////";
	print $fh_ccompdriverfile "\r\n// main function";
	print $fh_ccompdriverfile "\r\n//////";
	print $fh_ccompdriverfile "\r\n";
	print $fh_ccompdriverfile "void main(void){\r\n";

	# iterate over the uapi_fndef hashtable
	while ( ($uapi_key, $uapi_fndef) = each %uapi_fndef )
	{
		# fore each uapi_key we find, write function driver
		print $fh_ccompdriverfile "/* $uapi_key */\r\n";
		print $fh_ccompdriverfile "$uapi_fndrvcode{$uapi_key} \r\n\r\n";
	}

	print $fh_ccompdriverfile "}\r\n";

	close $fh_ccompdriverfile;
}
######



######
# output composition check file
######
sub uccomp_outputccompcheckfile {
	my($filename) = @_;
	my $fh_ccompcheckfile;
	my $uapi_key;
	my $uapi_fndef;
	my $i = 0;

	open($fh_ccompcheckfile, '>', $filename) or die "Could not open file '$filename' $!";
	print $fh_ccompcheckfile "\n/* autogenerated XMHF composition check file */";
	print $fh_ccompcheckfile "\n/* author: amit vasudevan (amitvasudevan@acm.org) */";
	print $fh_ccompcheckfile "\n\n";
	print $fh_ccompcheckfile "#include <xmhf.h>\r\n";
	print $fh_ccompcheckfile "#include <xmhf-debug.h>\r\n";
	print $fh_ccompcheckfile "#include <xmhfgeec.h>\r\n";
	print $fh_ccompcheckfile "\n\n";


	print $fh_ccompcheckfile "#include <xc.h>\r\n";
	#plug in header files
	while($i < $g_totalslabs){
	    print $fh_ccompcheckfile "#include <".$slab_idtoname{$i}.".h>\r\n";
	    $i=$i+1;
	}

	print $fh_ccompcheckfile "\n\n";


	# iterate over the uapi_fndef hashtable
	while ( ($uapi_key, $uapi_fndef) = each %uapi_fndef )
	{
		# fore each uapi_key we find, write function definition followed by assertions into check file
		print $fh_ccompcheckfile "$uapi_fndef{$uapi_key} { \r\n";
		print $fh_ccompcheckfile "$uapi_fnccomppre{$uapi_key} \r\n";
		print $fh_ccompcheckfile "$uapi_fnccompasserts{$uapi_key} \r\n";
		print $fh_ccompcheckfile "} \r\n\r\n";
	}

	close $fh_ccompcheckfile;
}
######




















