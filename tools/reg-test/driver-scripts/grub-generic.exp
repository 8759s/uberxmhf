#!/usr/bin/expect -f
#
#   Connect up to a device on a serial port
#   Time stamp any incoming lines to stdout

       # port is any serial port (omit the /dev/ prefix)
       # e.g. ttya, cua0, serialA, serialB, boca01 - boca16

# Jon based this on:
# http://www.aps.anl.gov/Sectors/33_34/controls/docs/serialWatch.html

# This script expects to be invoked from a shell script that defines
# lots of environment variables that start with FIRST_ and SECOND_.
# Its purpose in life is to manually supply boot parameters to grub's
# interactive command prompt.  This is easier than maintaining a bunch
# of distinct /boot disk images for each test host.  It solves three
# problems as compared to disk images:
# 1. Allows Intel systems to get their necessary SINIT module
# 2. Avoids the need to write to /boot (no 'savedefault' option)
# 3. Unique ISCSI_INITIATOR per client system
# 4. Any other kernel or hypervisor command line options as desired

# Uncomment this line to enable extremely verbose debug info.
# exp_internal -f internal.log 1

if {$argc != 2} {
  puts "$argc, $argv"
  puts "usage 1: grub-generic.exp serial <port>"
  puts "         NOTE: omit /dev/, e.g., just use ttyS0"
  puts "usage 2: grub-generic.exp amtterm <hostname>"
  puts "         NOTE: amtterm mode requires environment variable AMT_PASSWORD"
  exit
}

proc timeStamp {} {
  global tcl_version
  if {$tcl_version >= 7.5} {
    # "clock" command requires Tcl v7.5 or greater
    # internal routine a little faster than making a system call
    set stamp [clock format [clock seconds] -format %Y-%m-%d,%T]
  } else {
    # fall back to standard UNIX system call
    set stamp [exec /bin/date +%Y-%m-%d,%T]
  }
  return $stamp
}

puts "\n[timeStamp] Log starting..."

if {[string compare "serial" [lindex $argv 0]] == 0} {
    puts "SERIAL MODE"
    set port /dev/[lindex $argv 1]
    set spawned [spawn -open [open $port w+]]
    puts "[timeStamp]: [string trim $spawned \r\n]"
    set baud 115200
        # -parenb means don't use a parity bit
        # -cstopb means "not 2 stop bits, but 1"
        # cs8 means 8 bits
        # -echo means no echo (full duplex?)
    stty ispeed $baud ospeed $baud raw -echo cs8 -parenb -cstopb onlcr < $port
} elseif {[string compare "amtterm" [lindex $argv 0]] == 0} {
    puts "AMTTERM MODE"
    set amt_retry_ctr 10
    while {1} {
        set spawned [spawn /usr/local/bin/amtterm [lindex $argv 1]]
        puts "[timeStamp]: [string trim $spawned \r\n]"
        expect {
            "connected now, use ^] to escape" {
                puts "[timeStamp]: [string trim $expect_out(buffer) \r\n]"
                break;
            }
            "amtterm: ERROR:" {
                puts "[timeStamp]: [string trim $expect_out(buffer) \r\n]"
                puts "*** Retrying amtterm launch"
                incr $amt_retry_ctr -1
                if {$amt_retry_ctr == 0} {
                    puts "[timeStamp]: TOO MANY amtterm LAUNCH FAILURES. EXITING!\r\n]"
                    exit
                }
                # while will loop and try again,
                # but don't cycle too fast
                sleep 1 
            }
            # The expect_after block below that looks for eof from
            # amtterm will gracefully handle subsequent failures in
            # amtterm.  Nothing else needs to be done here.
        }
    }
} else {
    puts "Unrecognized mode \"[lindex $argv 0]\""
    exit
}

# High tendency for amtterm to crap out in the second while loop below
# (which looks for serial output after Linux is booted on top of
# EMHF); it's related to the the linux kernel initializing serial
# ports for its own use. There are two remediation options:

# 1. Use linux kernel command line option 8250.nr_uarts=0 to
#    completely disable the Linux kernel's support for serial I/O.

# 2. Detect the "eof" that is produced when amtterm dies, and
#    automatically restart it. "expect_after" is perfect for this,
#    since it is applied to all subsequent expect blocks if they fail
#    to match anything.  Thus, we don't need to litter eof detection
#    conditions throughout this entire script..

expect_after {
    eof {
        if {[string compare "amtterm" [lindex $argv 0]] == 0} {
            puts "\r\nDETECTED eof FROM amtterm. I NEED TO RESTART amtterm!\r\n"
            set spawned [spawn /usr/local/bin/amtterm [lindex $argv 1]]
        } else {
            puts "\r\nDETECTED eof BUT I WAS NOT RUNNING amtterm\r\n"
            puts "\r\nI DO NOT KNOW HOW TO DEAL WITH THIS\r\n"
            puts "\r\nAIEEEEEE!!!!\r\n"
            exit
        }
    }
}   

set timeout 60
set send_slow {1 .05}
#log_file foo.log
log_user 1

# expect "Press any key to continue."
# send -s "c"

# expect "command-line."
# send -s "c"

# expect "grub>"
# send -s "$env(FIRST_ROOT)\r\n"

# expect "grub>"
# send -s "$env(FIRST_KERNEL)\r\n"

# expect "grub>"
# send -s "$env(FIRST_MOD1)\r\n"

# expect "grub>"
# send -s "$env(FIRST_MOD2)\r\n"

# expect "grub>"
# send -s "$env(FIRST_MOD3)\r\n"

# expect "grub>"
# send -s "boot\r\n"

log_user 0
while {1} {
    expect {
        "Press any key to continue." {
            send -s "Q"
            break
        }
        "\n" {
            puts "[timeStamp]: [string trim $expect_out(buffer) \r\n]"
            # send_log -- "[timeStamp]: [string trim $expect_out(buffer) \r\n]"
        }
    }
}

log_user 1

# expect "command-line."
# send -s "c"

# expect "grub>"
# send -s "$env(SECOND_ROOT)\r\n"

# expect "grub>"
# send -s "$env(SECOND_KERNEL)\r\n"

# expect "grub>"
# send -s "$env(SECOND_MOD1)\r\n"

# expect "grub>"
# send -s "boot\r\n"

log_user 0
while {1} {
    expect {
        "REGRESSION TESTING COMPLETED." {
            puts "\r\n\r\n[timeStamp]: [string trim $expect_out(buffer) \r\n]"
            puts "\r\n[timeStamp]: OUTPUT MONITORING COMPLETED; GOODBYE!\r\n"
            exit
        }
        "Press any key to continue." {
            send -s "Q"
        }
        eof {
            if {[string compare "amtterm" [lindex $argv 0]] == 0} {
                puts "\r\nDETECTED eof FROM amtterm. I NEED TO RESTART amtterm!\r\n"
                set spawned [spawn /usr/local/bin/amtterm [lindex $argv 1]]
            } else {
                puts "\r\nDETECTED eof BUT I DO NOT KNOW HOW TO DEAL WITH THIS\r\n"
                puts "\r\nAIEEEEEE!!!!\r\n"
                exit
            }
        }
        "\n" {
            puts "[timeStamp]: [string trim $expect_out(buffer) \r\n]"
            # send_log -- "[timeStamp]: [string trim $expect_out(buffer) \r\n]"
        }
        timeout {
            puts "\r\n[timeStamp]: OUTPUT MONITORING TIMED OUT; GOODBYE!\r\n"
            exit
        }
    }
}
