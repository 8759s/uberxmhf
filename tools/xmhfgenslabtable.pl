#!/usr/bin/perl
# script to generate XMHF slab physical memory extents
# based on the slab names provided
# author: amit vasudevan (amitvasudevan@acm.org)

my $i = 0;

print "\n/* autogenerated XMHF/GEEC sentinel slab info table */";
print "\n/* author: amit vasudevan (amitvasudevan@acm.org) */";

print "\n";

while( $i <= $#ARGV) {
	print "\n";
	print "\nextern u8 _slab_$ARGV[$i]_code_start[];";
	print "\nextern u8 _slab_$ARGV[$i]_code_end[];";
	print "\nextern u8 _slab_$ARGV[$i]_data_start[];";
	print "\nextern u8 _slab_$ARGV[$i]_data_end[];";
	print "\nextern u8 _slab_$ARGV[$i]_stack_start[];";
	print "\nextern u8 _slab_$ARGV[$i]_stack_end[];";
	print "\nextern u8 _slab_$ARGV[$i]_dmadata_start[];";
	print "\nextern u8 _slab_$ARGV[$i]_dmadata_end[];";
	print "\nextern u8 _slab_$ARGV[$i]_mmio_start[];";
	print "\nextern u8 _slab_$ARGV[$i]_mmio_end[];";
	print "\nextern u8 _slab_$ARGV[$i]_entrypoint[];";

	$i++;
}

print "\n";
print "\n__attribute__(( section(\".data\") )) __attribute__((aligned(4096))) x_slab_info_t _xmhfhic_common_slab_info_table[] = {";


$i = 0;
while( $i <= ($#ARGV - 1) ){
	print "\n";
    print "\n	//$ARGV[$i]";
    print "\n	{";
    print "\n	    {";
    print "\n	        HIC_SLAB_X86VMXX86PC_HYPERVISOR,";
    print "\n	        false,";
    print "\n	        false,";
    print "\n	        0,";
    print "\n	        {";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[1*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[2*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[3*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[4*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[5*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[6*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[7*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[8*XMHF_SLAB_STACKSIZE]),";
    print "\n	        }";
    print "\n	    },";
    print "\n	    true,";
    print "\n	    0,";
    print "\n       0,";
    print "\n	    0,";
    print "\n	    {false, 0, {0}},";
    print "\n	    {";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_code_start, .addr_end = _slab_$ARGV[$i]_code_end, .protection = 0},";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_data_start, .addr_end = _slab_$ARGV[$i]_data_end, .protection = 0},";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_stack_start, .addr_end = _slab_$ARGV[$i]_stack_end, .protection = 0},";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_dmadata_start, .addr_end = _slab_$ARGV[$i]_dmadata_end, .protection = 0},";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_mmio_start, .addr_end = _slab_$ARGV[$i]_mmio_end, .protection = 0},";
    print "\n	    },";
    print "\n	    (u32)_slab_$ARGV[$i]_entrypoint";
    print "\n	},";
	print "\n";

	$i++;
}

# guest slab
	print "\n";
    print "\n	//$ARGV[$i]";
    print "\n	{";
    print "\n	    {";
    print "\n	        HIC_SLAB_X86VMXX86PC_GUEST,";
    print "\n	        false,";
    print "\n	        false,";
    print "\n	        0,";
    print "\n	        {";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[1*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[2*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[3*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[4*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[5*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[6*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[7*XMHF_SLAB_STACKSIZE]),";
    print "\n	            ((u32)&_slab_$ARGV[$i]_stack_start[8*XMHF_SLAB_STACKSIZE]),";
    print "\n	        }";
    print "\n	    },";
    print "\n	    true,";
    print "\n	    0,";
    print "\n       0,";
    print "\n	    0,";
    print "\n	    {true, 0xFFFFFFFFUL, {0}},";
    print "\n	    {";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_code_start, .addr_end = _slab_$ARGV[$i]_code_end, .protection = 0},";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_data_start, .addr_end = _slab_$ARGV[$i]_data_end, .protection = 0},";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_stack_start, .addr_end = _slab_$ARGV[$i]_stack_end, .protection = 0},";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_dmadata_start, .addr_end = _slab_$ARGV[$i]_dmadata_end, .protection = 0},";
    print "\n	        {.addr_start = _slab_$ARGV[$i]_mmio_start, .addr_end = _slab_$ARGV[$i]_mmio_end, .protection = 0},";
    print "\n	    },";
    print "\n	    (u32)_slab_$ARGV[$i]_entrypoint";
    print "\n	},";
	print "\n";



print "\n};";

exit 0;
