# top-level Makefile for XMHF
# author: amit vasudevan (amitvasudevan@acm.org)

include ./common.mk

######
# top-level build harness
######

# XMHF bootloader source location
export XMHF_BOOTLOADER_SRC := $(realpath xmhf-bootloader)

export XMHF_SLAB_DIRS := $(shell awk -F, '{print $$1}' $(XMHF_DIR)/SLABS)
XMHF_SLAB_NAMES := $(notdir $(XMHF_SLAB_DIRS))
export XMHF_SLAB_TOTAL := $(shell wc -l < $(XMHF_DIR)/SLABS)


export LIBXMHFC_SRC := $(realpath xmhf-libs/libxmhfc)
export LIBXMHFCRYPTO_SRC := $(realpath xmhf-libs/libxmhfcrypto)
export LIBXMHFDEBUG_SRC := $(realpath xmhf-libs/libxmhfdebug)
export LIBXMHFGEEC_SRC := $(realpath xmhf-libs/libxmhfgeec)
export LIBXMHFHW_SRC := $(realpath xmhf-libs/libxmhfhw)







.PHONY: all
all: tools slabs xmhfbin bootloader finalbin


.PHONY: tools
tools: 
	@echo building tools...
	cd $(XMHF_DIR)/tools &&	$(MAKE) -f Makefile -w all
	@echo tools built sucessfully.
	


.PHONY: _libxmhfc
_libxmhfc:
	@echo building libxmhfc...
	mkdir -p $(XMHF_LIBS_OBJECTS_DIR)
	cd $(XMHF_LIBS_OBJECTS_DIR) &&	$(MAKE) -f $(LIBXMHFC_SRC)/Makefile -w all
	@echo libxmhfc built sucessfully.


.PHONY: _libxmhfcrypto
_libxmhfcrypto:
	@echo building libxmhfcrypto...
	mkdir -p $(XMHF_LIBS_OBJECTS_DIR)
	cd $(XMHF_LIBS_OBJECTS_DIR) &&	$(MAKE) -f $(LIBXMHFCRYPTO_SRC)/Makefile -w all
	@echo libxmhfcrypto built sucessfully.


.PHONY: _libxmhfdebug
_libxmhfdebug:
	@echo building libxmhfdebug...
	mkdir -p $(XMHF_LIBS_OBJECTS_DIR)
	cd $(XMHF_LIBS_OBJECTS_DIR) &&	$(MAKE) -f $(LIBXMHFDEBUG_SRC)/Makefile -w all
	@echo libxmhfdebug built sucessfully.


.PHONY: _libxmhfhw
_libxmhfhw:
	@echo building libxmhfhw...
	mkdir -p $(XMHF_LIBS_OBJECTS_DIR)
	cd $(XMHF_LIBS_OBJECTS_DIR) &&	$(MAKE) -f $(LIBXMHFHW_SRC)/Makefile -w all
	@echo libxmhfhw built sucessfully.


.PHONY: xmhflibs
xmhflibs: _libxmhfc _libxmhfcrypto _libxmhfdebug _libxmhfhw

.PHONY: _libxmhfgeec_prebuild
_libxmhfgeec_prebuild:
	@echo building libxmhfgeec prebuild...
	mkdir -p $(XMHF_LIBS_OBJECTS_DIR)
	cd $(XMHF_LIBS_OBJECTS_DIR) &&	$(MAKE) -f $(LIBXMHFGEEC_SRC)/Makefile -w all
	@echo libxmhfgeec prebuild built sucessfully.

.PHONY: _libxmhfgeec_realbuild
_libxmhfgeec_realbuild:
	@echo building libxmhfgeec realbuild...
	mkdir -p $(XMHF_LIBS_OBJECTS_DIR)
	touch $(LIBXMHFGEEC_SRC)/xmhfgeec_slabinfotable.c
	cd $(XMHF_LIBS_OBJECTS_DIR) &&	$(MAKE) -f $(LIBXMHFGEEC_SRC)/Makefile -w all
	@echo libxmhfgeec realbuild built sucessfully.



.PHONY: _slabs_common_prebuild
_slabs_common_prebuild:
	@echo Building slabs prebuild...
	@for i in $(XMHF_SLAB_DIRS); \
	do \
		(cd $(XMHF_OBJDIR) &&	echo "Making all in $$i..." && $(MAKE) -f $(XMHF_DIR)/$$i/Makefile -w all) || exit 1; \
	done;
	@echo Slabs build prebuild SUCCESS

.PHONY: _slabs_common_realbuild
_slabs_common_realbuild:
	@echo Building slabs realbuild...
	@for i in $(XMHF_SLAB_DIRS); \
	do \
		(cd $(XMHF_OBJDIR) &&	echo "Making all in $$i..." && $(MAKE) -f $(XMHF_DIR)/$$i/Makefile -w linkslabbin) || exit 1; \
	done;
	@echo Slabs build realbuild SUCCESS

.PHONY: _slabs_preprocessmanifests
_slabs_preprocessmanifests:
	mkdir -p $(XMHF_OBJDIR)
	@for i in $(XMHF_SLAB_NAMES); \
	do \
		(cd $(XMHF_OBJDIR) && echo "Prepping slab geec manifest for $$i..." && $(CP) -f $(XMHF_DIR)/xmhf-slabs/$$i/$$i.gsm $$i.gsm.c && $(CCERT) -E -D__ASSEMBLY__ $(CCERT_FLAGS) $$i.gsm.c >$(XMHF_DIR)/xmhf-slabs/$$i/$$i.gsm.pp) || exit 1; \
	done;
	@echo Slab geec manifests prepped


.PHONY: _slabs_configureandgenerateslabinfonoexports
_slabs_configureandgenerateslabinfonoexports: _slabs_preprocessmanifests
	##cd $(XMHF_DIR) && $(XMHF_DIR)/tools/xmhfgenslabtable.pl SLABS $(XMHF_DIR)/xmhf-libs/libxmhfgeec/_libxmhfgeec_slabinfotable_autogenerated_data $(XMHF_OBJDIR)/xmhf.lscript $(XMHF_CONFIG_LOADADDR) $(XMHF_CONFIG_LOADMAXSIZE) $(XMHFGEEC_TOTAL_UHSLABS) $(XMHF_CONFIG_MAX_INCLDEVLIST_ENTRIES) $(XMHF_CONFIG_MAX_EXCLDEVLIST_ENTRIES) $(XMHF_CONFIG_MAX_MEMOFFSET_ENTRIES) NOMEMOFFSETS
	cd $(XMHF_DIR) && frama-c -load-module $(XMHF_DIR)/tools/Umf.o -umf-uobjlist $(XMHF_DIR)/SLABS -umf-outuobjinfotable $(XMHF_DIR)/xmhf-libs/libxmhfgeec/_libxmhfgeec_slabinfotable_autogenerated_data -umf-outlinkerscript $(XMHF_OBJDIR)/xmhf.lscript -umf-loadaddr $(XMHF_CONFIG_LOADADDR) -umf-loadmaxsize $(XMHF_CONFIG_LOADMAXSIZE) -umf-totaluhuobjs $(XMHFGEEC_TOTAL_UHSLABS) -umf-maxincldevlistentries $(XMHF_CONFIG_MAX_INCLDEVLIST_ENTRIES) -umf-maxexcldevlistentries $(XMHF_CONFIG_MAX_EXCLDEVLIST_ENTRIES) -umf-maxmemoffsetentries $(XMHF_CONFIG_MAX_MEMOFFSET_ENTRIES) 

.PHONY: _slabs_generateslabinfoexports
_slabs_generateslabinfoexports: _slabs_preprocessmanifests
	@echo generating slab info table with memoffsets...
	##cd $(XMHF_DIR) && $(XMHF_DIR)/tools/xmhfgenslabtable.pl SLABS $(XMHF_DIR)/xmhf-libs/libxmhfgeec/_libxmhfgeec_slabinfotable_autogenerated_data $(XMHF_OBJDIR)/xmhf.lscript $(XMHF_CONFIG_LOADADDR) $(XMHF_CONFIG_LOADMAXSIZE) $(XMHFGEEC_TOTAL_UHSLABS) $(XMHF_CONFIG_MAX_INCLDEVLIST_ENTRIES) $(XMHF_CONFIG_MAX_EXCLDEVLIST_ENTRIES) $(XMHF_CONFIG_MAX_MEMOFFSET_ENTRIES) MEMOFFSETS
	cd $(XMHF_DIR) && frama-c -load-module $(XMHF_DIR)/tools/Umf.o -umf-uobjlist $(XMHF_DIR)/SLABS -umf-outuobjinfotable $(XMHF_DIR)/xmhf-libs/libxmhfgeec/_libxmhfgeec_slabinfotable_autogenerated_data -umf-outlinkerscript $(XMHF_OBJDIR)/xmhf.lscript -umf-loadaddr $(XMHF_CONFIG_LOADADDR) -umf-loadmaxsize $(XMHF_CONFIG_LOADMAXSIZE) -umf-totaluhuobjs $(XMHFGEEC_TOTAL_UHSLABS) -umf-maxincldevlistentries $(XMHF_CONFIG_MAX_INCLDEVLIST_ENTRIES) -umf-maxexcldevlistentries $(XMHF_CONFIG_MAX_EXCLDEVLIST_ENTRIES) -umf-maxmemoffsetentries $(XMHF_CONFIG_MAX_MEMOFFSET_ENTRIES) -umf-memoffsets
	@echo slab info table with memoffsets ready.

.PHONY: slabs_prebuild
slabs_prebuild: _slabs_configureandgenerateslabinfonoexports xmhflibs _libxmhfgeec_prebuild _slabs_common_prebuild

.PHONY: slabs_realbuild
slabs_realbuild: slabs_prebuild _slabs_generateslabinfoexports _libxmhfgeec_realbuild  _slabs_common_realbuild

.PHONY: _slabs_verify
_slabs_verify:
	@echo WiP

.PHONY: slabs_verify
slabs_verify: slabs_prebuild _slabs_generateslabinfoexports _slabs_verify

.PHONY: slabs
slabs: slabs_prebuild slabs_verify slabs_realbuild

.PHONY: verif_ccomp
verif_ccomp: tools _slabs_preprocessmanifests
	@echo Proceeding to generate composition check files...
	mkdir -p $(XMHF_OBJDIR)/_verif_ccomp
	#cd $(XMHF_DIR) && $(XMHF_DIR)/tools/uccomp.pl SLABS NOMEMOFFSETS $(XMHF_OBJDIR)/_verif_ccomp/ccompdriverfile.c.v.c $(XMHF_OBJDIR)/_verif_ccomp/ccompcheckfile.c.v.c $(XMHF_CONFIG_MAX_INCLDEVLIST_ENTRIES) $(XMHF_CONFIG_MAX_EXCLDEVLIST_ENTRIES) $(XMHF_CONFIG_MAX_MEMOFFSET_ENTRIES)
	cd $(XMHF_DIR) && frama-c -load-module $(XMHF_DIR)/tools/Uccomp.o -umf-uobjlist $(XMHF_DIR)/SLABS -umf-outuobjccompdriver $(XMHF_OBJDIR)/_verif_ccomp/ccompdriverfile.c.v.c -umf-outuobjccompcheck $(XMHF_OBJDIR)/_verif_ccomp/ccompcheckfile.c.v.c  -umf-maxincldevlistentries $(XMHF_CONFIG_MAX_INCLDEVLIST_ENTRIES) -umf-maxexcldevlistentries $(XMHF_CONFIG_MAX_EXCLDEVLIST_ENTRIES) -umf-maxmemoffsetentries $(XMHF_CONFIG_MAX_MEMOFFSET_ENTRIES)
	@echo composition check files generated
	cd $(XMHF_OBJDIR)/_verif_ccomp && frama-c -val -no-val-show-progress -slevel 2048 -cpp-extra-args=-nostdinc $(VFLAGS) ccompdriverfile.c.v.c ccompcheckfile.c.v.c


.PHONY: verif_bp
verif_bp: tools _slabs_preprocessmanifests
	@echo Proceeding to generate sentinel stubs for blueprint conformance...
	mkdir -p $(XMHF_OBJDIR)/_verif_bp
	#cd $(XMHF_DIR) && $(XMHF_DIR)/tools/ubp.pl SLABS NOMEMOFFSETS $(XMHF_OBJDIR)/_verif_bp/ $(XMHF_CONFIG_MAX_INCLDEVLIST_ENTRIES) $(XMHF_CONFIG_MAX_EXCLDEVLIST_ENTRIES) $(XMHF_CONFIG_MAX_MEMOFFSET_ENTRIES)
	cd $(XMHF_DIR) && frama-c -load-module $(XMHF_DIR)/tools/Ubp.o -umf-uobjlist $(XMHF_DIR)/SLABS -umf-outdirsentinelstubs $(XMHF_OBJDIR)/_verif_bp/  -umf-maxincldevlistentries $(XMHF_CONFIG_MAX_INCLDEVLIST_ENTRIES) -umf-maxexcldevlistentries $(XMHF_CONFIG_MAX_EXCLDEVLIST_ENTRIES) -umf-maxmemoffsetentries $(XMHF_CONFIG_MAX_MEMOFFSET_ENTRIES)
	@echo sentinel stubs generated



.PHONY: _xmhf-bootloader
_xmhf-bootloader:


.PHONY: bootloader
bootloader: xmhflibs _libxmhfgeec_realbuild _xmhf-bootloader
	@echo Building XMHF boot loader...
	cd $(XMHF_OBJDIR) && $(MAKE) -f $(XMHF_BOOTLOADER_SRC)/Makefile -w all \
		RUNTIME_INTEGRITY_HASH=\""$(shell ( sha1sum $(XMHFCORE_OBJECTS_DIR)/_objs_xmhf-runtime/runtime.bin | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\" \
		SLBELOW64K_INTEGRITY_HASH=\""$(shell ( dd if=$(XMHF_OBJDIR)/_objs_xmhf-secureloader/sl.bin bs=1024 count=64 | sha1sum | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\" \
		SLABOVE64K_INTEGRITY_HASH=\""$(shell ( dd if=$(XMHF_OBJDIR)/_objs_xmhf-secureloader/sl.bin bs=1024 skip=64 count=1984 | sha1sum | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\"
	@echo XMHF boot loader build SUCCESS


.PHONY: xmhfbin
xmhfbin: $(XMHFLIBS_SRC) $(XMHFCORE_SRC)
	@echo Linking XMHF binary...
	cd $(XMHF_OBJDIR) && cp -f xmhf.lscript xmhf.lscript.c
	cd $(XMHF_OBJDIR) && $(CC) $(CFLAGS) -D__ASSEMBLY__ -P -E xmhf.lscript.c -o xmhf.lds
	cd $(XMHF_OBJDIR) && $(LD) --oformat elf32-i386 -T xmhf.lds -o xmhf.exe -L$(CCERT_LIB) -L$(CCLIB)/lib/linux -L$(XMHF_LIBS_OBJECTS_DIR) -lxmhfc -lclang_rt.full-i386 -lcompcert
	cd $(XMHF_OBJDIR) && $(OBJCOPY) --output-format=binary xmhf.exe xmhf.bin
	@echo XMHF link SUCCESS


.PHONY: finalbin
finalbin: bootloader xmhfbin
	@echo generating final binaries...
	cd $(XMHF_OBJDIR) && $(CAT) ./_objs_xmhf-bootloader/xmhf-bootloader.bin ./xmhf.bin > ./xmhf.tmp.img
	cd $(XMHF_OBJDIR) && gzip -c ./xmhf.tmp.img > ./xmhf-$(XMHF_TARGET_TRIAD).bin.gz
	cd $(XMHF_OBJDIR) && $(RM) -rf ./xmhf.tmp.img
	@echo xmhf binary generation SUCCESS

.PHONY: install
install: install-bin

.PHONY: install-bin
install-bin:
	# Install the _actual_ final product
	install -d $(DESTDIR)/boot
	install --mode=644 $(XMHF_OBJDIR)/_objs_xmhf-core/xmhf-$(XMHF_TARGET_TRIAD).bin.gz $(DESTDIR)/boot

.PHONY: clean distclean
clean:
	$(RM) -f $(XMHF_DIR)/xmhf-slabs/geec_sentinel/__geec_sentinel_autogendata_slabinfotable
	rm -rf *.html
	rm -rf doc
	$(RM) -rf $(XMHF_OBJDIR)

distclean: clean
	$(RM) config.log config.status
	# http://www.gnu.org/software/automake/manual/automake.html#Clean
	$(RM) -rf Makefile

.PHONY: htmldoc
htmldoc:
	tools/docgen/render-doc.sh


#-----autoconf rules
Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

configure: configure.ac
	./autogen.sh

