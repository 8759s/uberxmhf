# top-level Makefile for XMHF
# author: amit vasudevan (amitvasudevan@acm.org)

# directory where this Makefile resides (source root)
export XMHF_DIR := $(CURDIR)

# objects directory (used for building binaries without polluting source namespace)
export XMHF_OBJDIR = $(CURDIR)/_objects

# top-level include directory
XMHF_INC = $(CURDIR)/include

# verification directory (used for verification without polluting source namespace)
export XMHF_VERIFYDIR := $(CURDIR)/_verify

# xmhf libs directory
export XMHFLIBS_SRC := $(realpath @XMHFLIBS_SRC@)

# XMHF core source location
export XMHFCORE_SRC := $(realpath xmhf-slabs/xmhf-core)
XMHFCORE_INC = -I$(realpath xmhf-slabs/xmhf-core/) -I$(realpath xmhf-slabs/xmhf-core/include)

# libxmhfhw source location
export LIBXMHFHW_SRC := $(realpath xmhf-libs/libxmhfhw)
LIBXMHFHW_INC = $(realpath xmhf-libs/libxmhfhw/include)

# XMHF bootloader source location
export XMHF_BOOTLOADER_SRC := $(realpath xmhf-bootloader)

# build include paths for xmhf libs
XMHFLIBS_SUBLIBS = $(wildcard $(XMHFLIBS_SRC)/lib*)
XMHFLIBS_INC = $(foreach dir,$(XMHFLIBS_SUBLIBS),-I$(dir)/include)

# populate library and include paths
export ADDL_INCLUDES :=
export XMHFLIBS_DIR := $(XMHF_OBJDIR)/_objs_xmhf-libs
ADDL_INCLUDES += -I$(XMHF_INC) $(XMHFCORE_INC) -I$(LIBXMHFHW_INC) $(XMHFLIBS_INC)

##################################################################################
### BEGIN Variables controlled using autoconf
##################################################################################
# Build-time configuration options; our project IS UNIQUE in this aspect
# For an explanation of these options, see configure.ac or run:
# ./configure --help
export DEBUG_SERIAL := @DEBUG_SERIAL@
export DEBUG_SERIAL_PORT := @DEBUG_SERIAL_PORT@
export DEBUG_VGA := @DEBUG_VGA@
export DRT := @DRT@
export DMAP := @DMAP@

export XMHF_TARGET_CPU := @TARGET_CPU@
export XMHF_TARGET_CONTAINER := @TARGET_CONTAINER@
export XMHF_TARGET_PLATFORM := @TARGET_PLATFORM@
export XMHF_TARGET_TRIAD := $(XMHF_TARGET_CPU)-$(XMHF_TARGET_CONTAINER)-$(XMHF_TARGET_PLATFORM)

# Path settings; our project is not unique in this aspect
export prefix=@prefix@
export exec_prefix=@exec_prefix@
export libdir=@libdir@
export includedir=@includedir@
export pkgconfigdir=@pkgconfigdir@
export pkgincludedir=@pkgincludedir@

# Tool settings; our project is not unique in this aspect
export CC = @CC@
export AS = @AS@
export LD = @LD@
export OBJDUMP = @OBJDUMP@
export OBJCOPY = @OBJCOPY@
export STRIP = @STRIP@
export RM = @RM@
export CP = @CP@
export TAR = @TAR@
export SED = @SED@
export MKDIR = @MKDIR@
export CAT = @CAT@

export CCLIB = @CCLIB@
export CCLIB := $(realpath $(CCLIB))


#-----build configuration

#----- build information (version)
export XMHF_BUILD_VERSION := $(shell git describe --abbrev=0)

#----- build information (revision)
export XMHF_BUILD_REVISION_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)
export XMHF_BUILD_REVISION_COMMIT := $(shell git log --pretty=format:'%H' -n 1)
export XMHF_BUILD_REVISION := $(XMHF_BUILD_REVISION_BRANCH)-$(XMHF_BUILD_REVISION_COMMIT)

#-----basic flags for compiling and assembling
FLAGS = -O0 -fno-builtin -fno-common -fno-strict-aliasing -iwithprefix include
FLAGS += -fno-stack-protector
FLAGS += -Wstrict-prototypes -Wdeclaration-after-statement
FLAGS += -Wno-pointer-arith -Wextra -Wfloat-equal
#FLAGS += -Werror
FLAGS += -Wsign-compare
FLAGS += -Wno-bad-function-cast -Wall
FLAGS += -Waggregate-return
FLAGS += -Winline
#FLAGS += -m32 -march=k8
FLAGS += -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-ssse3
FLAGS += -mno-sse4.1 -mno-sse4.2 -mno-sse4 -mno-avx -mno-aes
#FLAGS += -mno-pclmul -mno-sse4a -mno-sse5 -mno-3dnow -mno-popcnt -mno-abm
FLAGS += -mno-pclmul -mno-sse4a -mno-3dnow -mno-popcnt
FLAGS += -nostdinc -pipe

FLAGS += $(ADDL_INCLUDES)
VFLAGS = $(ADDL_INCLUDES)

#-----generate compiler/assembler defines from configuration options selected
FLAGS += -D___XMHF_BUILD_VERSION___=\"$(XMHF_BUILD_VERSION)\"
VFLAGS += -D___XMHF_BUILD_VERSION___=\"$(XMHF_BUILD_VERSION)\"

FLAGS += -D___XMHF_BUILD_REVISION___=\"$(XMHF_BUILD_REVISION)\"
VFLAGS += -D___XMHF_BUILD_REVISION___=\"$(XMHF_BUILD_REVISION)\"

# target cpu
ifeq ($(XMHF_TARGET_CPU), x86)
	FLAGS += -D__XMHF_TARGET_CPU_X86__
	VFLAGS += -D__XMHF_TARGET_CPU_X86__
endif

# target container
ifeq ($(XMHF_TARGET_CONTAINER), vmx)
	FLAGS += -D__XMHF_TARGET_CONTAINER_VMX__
	VFLAGS += -D__XMHF_TARGET_CONTAINER_VMX__
endif

# target platform
ifeq ($(XMHF_TARGET_PLATFORM), x86pc)
	FLAGS += -D__XMHF_TARGET_PLATFORM_X86PC__
	VFLAGS += -D__XMHF_TARGET_PLATFORM_X86PC__
endif

# target triad
ifeq ($(XMHF_TARGET_TRIAD), x86-vmx-x86pc)
	FLAGS += -D__XMHF_TARGET_TRIAD_X86_VMX_X86PC__
	VFLAGS += -D__XMHF_TARGET_TRIAD_X86_VMX_X86PC__
endif

# other options
ifeq ($(DEBUG_SERIAL), y)
	FLAGS += -D__DEBUG_SERIAL__
	VFLAGS += -D__DEBUG_SERIAL__
	FLAGS += -DDEBUG_PORT=$(DEBUG_SERIAL_PORT)
	VFLAGS += -DDEBUG_PORT=$(DEBUG_SERIAL_PORT)
endif
ifeq ($(DRT), y)
	FLAGS += -D__DRT__
	VFLAGS += -D__DRT__
endif
ifeq ($(DMAP), y)
	FLAGS += -D__DMAP__
	VFLAGS += -D__DMAP__
endif


#-----export CFLAGS and ASFLAGS
ASFLAGS = $(FLAGS) -D__ASSEMBLY__
CFLAGS = $(FLAGS)

export ASFLAGS
export CFLAGS
export VFLAGS

export XMHF_SLAB_DIRS := $(shell cat $(XMHF_DIR)/SLABS)
XMHF_SLAB_NAMES := $(notdir $(XMHF_SLAB_DIRS))

.PHONY: all
#all: genfiles libshared subdirs
all: genfiles
#all:
#	xmhfgenslabtable.pl $(XMHF_SLAB_NAMES)

.PHONY: genfiles
genfiles:
	mkdir -p $(XMHF_OBJDIR)
	cd $(XMHF_OBJDIR) && xmhfgenlscript.pl $(XMHF_SLAB_NAMES) >xmhf.lscript
#	cd $(XMHF_OBJDIR) && xmhfgenslabtable.pl $(XMHF_SLAB_NAMES) >$(XMHF_DIR)/xmhf-slabs/shared/shared-slabtable.c
	cd $(XMHF_OBJDIR) && xmhfgenslabtable.pl $(XMHF_SLAB_NAMES) >$(XMHF_DIR)/xmhf-hic/data-hypslabtable.c

.PHONY: libshared
libshared:
	mkdir -p $(XMHF_OBJDIR)
	cd $(XMHF_OBJDIR) && $(MAKE) -f $(XMHF_DIR)/xmhf-slabs/shared/Makefile -w all

.PHONY: subdirs
subdirs: $(XMHFLIBS_SRC) $(XMHFCORE_SRC)
	@echo Building XMHF libs...
	cd $(XMHF_OBJDIR) && $(MAKE) -f $(XMHFLIBS_SRC)/Makefile -w all
	@echo XMHF libs build SUCCESS
	@echo Building slabs...
	@for i in $(XMHF_SLAB_DIRS); \
	do \
		(cd $(XMHF_OBJDIR) &&	echo "Making all in $$i..." && $(MAKE) -f $(XMHF_DIR)/$$i/Makefile -w all) || exit 1; \
	done;
	@echo Slabs build SUCCESS
	@echo Linking XMHF binary...
	cd $(XMHF_OBJDIR) && cp -f xmhf.lscript xmhf.lscript.c
	cd $(XMHF_OBJDIR) && $(CC) $(CFLAGS) -D__ASSEMBLY__ -P -E xmhf.lscript.c -o xmhf.lds
	cd $(XMHF_OBJDIR) && $(LD) --oformat elf64-x86-64 -T xmhf.lds -o xmhf.exe _objs_libshared/libshared.a -L$(CCLIB)/lib/linux -L$(XMHFLIBS_DIR) -lxmhfc -lxmhfcrypto -lxmhfutil -lxmhfhw -lxmhfutil -lxmhfc -lclang_rt.builtins-x86_64
	cd $(XMHF_OBJDIR) && $(OBJCOPY) --output-format=binary xmhf.exe xmhf.bin
	@echo XMHF link SUCCESS
	@echo Building XMHF boot loader...
	cd $(XMHF_OBJDIR) && $(MAKE) -f $(XMHF_BOOTLOADER_SRC)/Makefile -w all \
		RUNTIME_INTEGRITY_HASH=\""$(shell ( sha1sum $(XMHFCORE_OBJECTS_DIR)/_objs_xmhf-runtime/runtime.bin | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\" \
		SLBELOW64K_INTEGRITY_HASH=\""$(shell ( dd if=$(XMHF_OBJDIR)/_objs_xmhf-secureloader/sl.bin bs=1024 count=64 | sha1sum | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\" \
		SLABOVE64K_INTEGRITY_HASH=\""$(shell ( dd if=$(XMHF_OBJDIR)/_objs_xmhf-secureloader/sl.bin bs=1024 skip=64 count=1984 | sha1sum | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\"
	@echo XMHF boot loader build SUCCESS
	@echo generating final binaries...
	cd $(XMHF_OBJDIR) && $(CAT) ./_objs_xmhf-bootloader/xmhf-bootloader.bin ./xmhf.bin > ./xmhf.tmp.img
	cd $(XMHF_OBJDIR) && gzip -c ./xmhf.tmp.img > ./xmhf-$(XMHF_TARGET_TRIAD).bin.gz
	cd $(XMHF_OBJDIR) && $(RM) -rf ./xmhf.tmp.img
	@echo xmhf binary generation SUCCESS

.PHONY: install
install: install-bin

.PHONY: install-bin
install-bin:
	# Install the _actual_ final product
	install -d $(DESTDIR)/boot
	install --mode=644 $(XMHF_OBJDIR)/_objs_xmhf-core/xmhf-$(XMHF_TARGET_TRIAD).bin.gz $(DESTDIR)/boot

# Currently the only tests we have are in the TrustVisor tree
.PHONY: test
test:
	cd $(APP_ROOT) && $(MAKE) -w test


#.PHONY: clean distclean init-late-clean
.PHONY: clean distclean
clean:
	$(RM) -f $(XMHF_DIR)/xmhf-slabs/shared/shared-slabtable.c
	rm -rf *.html
	rm -rf doc
	$(RM) -rf $(XMHF_OBJDIR)

distclean: clean
	$(RM) config.log config.status
	# http://www.gnu.org/software/automake/manual/automake.html#Clean
	$(RM) -rf Makefile
	$(RM) -rf xmhf.pc

verify:
	#cd xmhf/src/xmhf-core && make -w verify
	mkdir -p $(XMHF_VERIFYDIR)
	@echo **************************************************************
	@echo Starting verification...
	@echo **************************************************************
	cd $(XMHF_VERIFYDIR) && $(MAKE) -f ./verification/Makefile -w verify


.PHONY: htmldoc
htmldoc:
	tools/docgen/render-doc.sh


#-----autoconf rules
Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

configure: configure.ac
	./autogen.sh

