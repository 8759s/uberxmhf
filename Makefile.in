# top-level Makefile for XMHF
# author: amit vasudevan (amitvasudevan@acm.org)

include ./common.mk

######
# top-level build harness
######

# XMHF bootloader source location
export XMHF_BOOTLOADER_SRC := $(realpath xmhf-bootloader)

export XMHF_SLAB_DIRS := $(shell awk -F, '{print $$1}' $(XMHF_DIR)/SLABS)
XMHF_SLAB_NAMES := $(notdir $(XMHF_SLAB_DIRS))
export XMHF_SLAB_TOTAL := $(shell wc -l < $(XMHF_DIR)/SLABS)

.PHONY: all
all: genfiles xmhflibs xmhfslabs xmhfbin

.PHONY: genfiles
genfiles:
	mkdir -p $(XMHF_OBJDIR)
	cd $(XMHF_DIR) && $(XMHF_DIR)/tools/slabconf.pl $(XMHF_DIR) SLABS
	@for i in $(XMHF_SLAB_DIRS); \
	do \
		(cd $(XMHF_OBJDIR) &&	echo "Prepping slab $$i..." && $(MAKE) -f $(XMHF_DIR)/$$i/Makefile -w pp_slab_gsm) || exit 1; \
	done;
	@echo Slabs prepped for build
	cd $(XMHF_OBJDIR) && $(XMHF_DIR)/tools/xmhfgenlscript.pl $(XMHF_SLAB_NAMES) >xmhf.lscript
	cd $(XMHF_DIR) && $(XMHF_DIR)/tools/xmhfgenslabtable.pl SLABS $(XMHF_SLAB_TOTAL) >$(XMHF_DIR)/xmhf-slabs/geec_sentinel/__geec_sentinel_autogendata_slabinfotable


.PHONY: xmhflibs
xmhflibs:
	@echo Building XMHF libs...
	mkdir -p $(XMHF_LIBS_OBJECTS_DIR)
	@for i in $(XMHF_LIBDIRS); \
	do \
		(cd $(XMHF_LIBS_OBJECTS_DIR) &&	echo "Making all in $$i..." && $(MAKE) -f $$i/Makefile -w all) || exit 1; \
	done;
	@echo XMHF libs build SUCCESS

.PHONY: xmhfslabs
xmhfslabs:
	@echo Building slabs...
	@for i in $(XMHF_SLAB_DIRS); \
	do \
		(cd $(XMHF_OBJDIR) &&	echo "Making all in $$i..." && $(MAKE) -f $(XMHF_DIR)/$$i/Makefile -w all) || exit 1; \
	done;
	@echo Slabs build SUCCESS


.PHONY: xmhfbin
xmhfbin: $(XMHFLIBS_SRC) $(XMHFCORE_SRC)
	@echo Linking XMHF binary...
	cd $(XMHF_OBJDIR) && cp -f xmhf.lscript xmhf.lscript.c
	cd $(XMHF_OBJDIR) && $(CC) $(CFLAGS) -D__ASSEMBLY__ -P -E xmhf.lscript.c -o xmhf.lds
	cd $(XMHF_OBJDIR) && $(LD) --oformat elf32-i386 -T xmhf.lds -o xmhf.exe -L$(CCERT_LIB) -L$(CCLIB)/lib/linux -L$(XMHF_LIBS_OBJECTS_DIR) -lxmhfc -lxmhfdebug -lxmhfc -lclang_rt.full-i386 -lcompcert
	cd $(XMHF_OBJDIR) && $(OBJCOPY) --output-format=binary xmhf.exe xmhf.bin
	@echo XMHF link SUCCESS
	@echo Building XMHF boot loader...
	cd $(XMHF_OBJDIR) && $(MAKE) -f $(XMHF_BOOTLOADER_SRC)/Makefile -w all \
		RUNTIME_INTEGRITY_HASH=\""$(shell ( sha1sum $(XMHFCORE_OBJECTS_DIR)/_objs_xmhf-runtime/runtime.bin | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\" \
		SLBELOW64K_INTEGRITY_HASH=\""$(shell ( dd if=$(XMHF_OBJDIR)/_objs_xmhf-secureloader/sl.bin bs=1024 count=64 | sha1sum | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\" \
		SLABOVE64K_INTEGRITY_HASH=\""$(shell ( dd if=$(XMHF_OBJDIR)/_objs_xmhf-secureloader/sl.bin bs=1024 skip=64 count=1984 | sha1sum | perl -nae '$$F[0] =~ s/(..)/\\\\x$$1/g; print $$F[0];' ))"\"
	@echo XMHF boot loader build SUCCESS
	@echo generating final binaries...
	cd $(XMHF_OBJDIR) && $(CAT) ./_objs_xmhf-bootloader/xmhf-bootloader.bin ./xmhf.bin > ./xmhf.tmp.img
	cd $(XMHF_OBJDIR) && gzip -c ./xmhf.tmp.img > ./xmhf-$(XMHF_TARGET_TRIAD).bin.gz
	cd $(XMHF_OBJDIR) && $(RM) -rf ./xmhf.tmp.img
	@echo xmhf binary generation SUCCESS

.PHONY: install
install: install-bin

.PHONY: install-bin
install-bin:
	# Install the _actual_ final product
	install -d $(DESTDIR)/boot
	install --mode=644 $(XMHF_OBJDIR)/_objs_xmhf-core/xmhf-$(XMHF_TARGET_TRIAD).bin.gz $(DESTDIR)/boot

.PHONY: clean distclean
clean:
	$(RM) -f $(XMHF_DIR)/xmhf-slabs/geec_sentinel/__geec_sentinel_autogendata_slabinfotable
	rm -rf *.html
	rm -rf doc
	$(RM) -rf $(XMHF_OBJDIR)

distclean: clean
	$(RM) config.log config.status
	# http://www.gnu.org/software/automake/manual/automake.html#Clean
	$(RM) -rf Makefile

.PHONY: htmldoc
htmldoc:
	tools/docgen/render-doc.sh


#-----autoconf rules
Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

configure: configure.ac
	./autogen.sh

